// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: col/colengine/colengine.proto

package colengine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import github_com_cockroachdb_cockroach_pkg_col_coltypes "github.com/cockroachdb/cockroach/pkg/col/coltypes"
import github_com_cockroachdb_cockroach_pkg_col_coldb "github.com/cockroachdb/cockroach/pkg/col/coldb"

import bytes "bytes"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// IndexSchema defines the physical schema of how a table's primary or secondary
// index data is persisted on disk.
//
// WIP these column fields are a mess. We probably want to do something like the
// types package to store this data in the most natural way and then have
// methods for computing and cacheing []coltypes.T and the idx maps.
type IndexSchema struct {
	KeyPrefix     []byte                                                `protobuf:"bytes,1,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	Types         []github_com_cockroachdb_cockroach_pkg_col_coltypes.T `protobuf:"varint,2,rep,packed,name=types,proto3,casttype=github.com/cockroachdb/cockroach/pkg/col/coltypes.T" json:"types,omitempty"`
	ColIdxByColID map[uint32]int                                        `protobuf:"bytes,3,rep,name=colidx_by_colid,json=colidxByColid,proto3,castvalue=int" json:"colidx_by_colid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	KeyColIDs     []uint32                                              `protobuf:"varint,4,rep,packed,name=key_colids,json=keyColids,proto3" json:"key_colids,omitempty"`
	MinValid      hlc.Timestamp                                         `protobuf:"bytes,5,opt,name=min_valid,json=minValid,proto3" json:"min_valid"`
	MaxValid      hlc.Timestamp                                         `protobuf:"bytes,6,opt,name=max_valid,json=maxValid,proto3" json:"max_valid"`
}

func (m *IndexSchema) Reset()         { *m = IndexSchema{} }
func (m *IndexSchema) String() string { return proto.CompactTextString(m) }
func (*IndexSchema) ProtoMessage()    {}
func (*IndexSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_colengine_acee752812c4a92f, []int{0}
}
func (m *IndexSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *IndexSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSchema.Merge(dst, src)
}
func (m *IndexSchema) XXX_Size() int {
	return m.Size()
}
func (m *IndexSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSchema.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSchema proto.InternalMessageInfo

// DeterministicData encapsulates everything needed to deterministically ingest
// columnar data. An independant replay of ingesting a series of
// DeterministicData will always result in the same Engine state.
type DeterministicData struct {
	Namespace github_com_cockroachdb_cockroach_pkg_col_coldb.NamespaceID `protobuf:"varint,1,opt,name=namespace,proto3,casttype=github.com/cockroachdb/cockroach/pkg/col/coldb.NamespaceID" json:"namespace,omitempty"`
	Schema    IndexSchema                                                `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema"`
	Data      []byte                                                     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DeterministicData) Reset()         { *m = DeterministicData{} }
func (m *DeterministicData) String() string { return proto.CompactTextString(m) }
func (*DeterministicData) ProtoMessage()    {}
func (*DeterministicData) Descriptor() ([]byte, []int) {
	return fileDescriptor_colengine_acee752812c4a92f, []int{1}
}
func (m *DeterministicData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeterministicData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DeterministicData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeterministicData.Merge(dst, src)
}
func (m *DeterministicData) XXX_Size() int {
	return m.Size()
}
func (m *DeterministicData) XXX_DiscardUnknown() {
	xxx_messageInfo_DeterministicData.DiscardUnknown(m)
}

var xxx_messageInfo_DeterministicData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IndexSchema)(nil), "cockroach.col.colengine.IndexSchema")
	proto.RegisterMapType((map[uint32]int)(nil), "cockroach.col.colengine.IndexSchema.ColidxByColidEntry")
	proto.RegisterType((*DeterministicData)(nil), "cockroach.col.colengine.DeterministicData")
}
func (this *IndexSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexSchema)
	if !ok {
		that2, ok := that.(IndexSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.KeyPrefix, that1.KeyPrefix) {
		return false
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if this.Types[i] != that1.Types[i] {
			return false
		}
	}
	if len(this.ColIdxByColID) != len(that1.ColIdxByColID) {
		return false
	}
	for i := range this.ColIdxByColID {
		if this.ColIdxByColID[i] != that1.ColIdxByColID[i] {
			return false
		}
	}
	if len(this.KeyColIDs) != len(that1.KeyColIDs) {
		return false
	}
	for i := range this.KeyColIDs {
		if this.KeyColIDs[i] != that1.KeyColIDs[i] {
			return false
		}
	}
	if !this.MinValid.Equal(&that1.MinValid) {
		return false
	}
	if !this.MaxValid.Equal(&that1.MaxValid) {
		return false
	}
	return true
}
func (this *DeterministicData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeterministicData)
	if !ok {
		that2, ok := that.(DeterministicData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Schema.Equal(&that1.Schema) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (m *IndexSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSchema) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyPrefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintColengine(dAtA, i, uint64(len(m.KeyPrefix)))
		i += copy(dAtA[i:], m.KeyPrefix)
	}
	if len(m.Types) > 0 {
		dAtA2 := make([]byte, len(m.Types)*10)
		var j1 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintColengine(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.ColIdxByColID) > 0 {
		keysForColIdxByColID := make([]uint32, 0, len(m.ColIdxByColID))
		for k := range m.ColIdxByColID {
			keysForColIdxByColID = append(keysForColIdxByColID, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForColIdxByColID)
		for _, k := range keysForColIdxByColID {
			dAtA[i] = 0x1a
			i++
			v := m.ColIdxByColID[uint32(k)]
			mapSize := 1 + sovColengine(uint64(k)) + 1 + sovColengine(uint64(v))
			i = encodeVarintColengine(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintColengine(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintColengine(dAtA, i, uint64(v))
		}
	}
	if len(m.KeyColIDs) > 0 {
		dAtA4 := make([]byte, len(m.KeyColIDs)*10)
		var j3 int
		for _, num := range m.KeyColIDs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintColengine(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintColengine(dAtA, i, uint64(m.MinValid.Size()))
	n5, err := m.MinValid.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x32
	i++
	i = encodeVarintColengine(dAtA, i, uint64(m.MaxValid.Size()))
	n6, err := m.MaxValid.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *DeterministicData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeterministicData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Namespace != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintColengine(dAtA, i, uint64(m.Namespace))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintColengine(dAtA, i, uint64(m.Schema.Size()))
	n7, err := m.Schema.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintColengine(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintColengine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IndexSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyPrefix)
	if l > 0 {
		n += 1 + l + sovColengine(uint64(l))
	}
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovColengine(uint64(e))
		}
		n += 1 + sovColengine(uint64(l)) + l
	}
	if len(m.ColIdxByColID) > 0 {
		for k, v := range m.ColIdxByColID {
			_ = k
			_ = v
			mapEntrySize := 1 + sovColengine(uint64(k)) + 1 + sovColengine(uint64(v))
			n += mapEntrySize + 1 + sovColengine(uint64(mapEntrySize))
		}
	}
	if len(m.KeyColIDs) > 0 {
		l = 0
		for _, e := range m.KeyColIDs {
			l += sovColengine(uint64(e))
		}
		n += 1 + sovColengine(uint64(l)) + l
	}
	l = m.MinValid.Size()
	n += 1 + l + sovColengine(uint64(l))
	l = m.MaxValid.Size()
	n += 1 + l + sovColengine(uint64(l))
	return n
}

func (m *DeterministicData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != 0 {
		n += 1 + sovColengine(uint64(m.Namespace))
	}
	l = m.Schema.Size()
	n += 1 + l + sovColengine(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovColengine(uint64(l))
	}
	return n
}

func sovColengine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozColengine(x uint64) (n int) {
	return sovColengine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowColengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthColengine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPrefix = append(m.KeyPrefix[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyPrefix == nil {
				m.KeyPrefix = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_col_coltypes.T
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowColengine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_col_coltypes.T(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowColengine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthColengine
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]github_com_cockroachdb_cockroach_pkg_col_coltypes.T, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_col_coltypes.T
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowColengine
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_col_coltypes.T(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColIdxByColID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthColengine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColIdxByColID == nil {
				m.ColIdxByColID = make(map[uint32]int)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowColengine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowColengine
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowColengine
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipColengine(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthColengine
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ColIdxByColID[mapkey] = ((int)(mapvalue))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowColengine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColIDs = append(m.KeyColIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowColengine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthColengine
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyColIDs) == 0 {
					m.KeyColIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowColengine
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColIDs = append(m.KeyColIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthColengine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinValid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthColengine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxValid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipColengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthColengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeterministicData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowColengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeterministicData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeterministicData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			m.Namespace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Namespace |= (github_com_cockroachdb_cockroach_pkg_col_coldb.NamespaceID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthColengine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthColengine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipColengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthColengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipColengine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowColengine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowColengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthColengine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowColengine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipColengine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthColengine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowColengine   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("col/colengine/colengine.proto", fileDescriptor_colengine_acee752812c4a92f)
}

var fileDescriptor_colengine_acee752812c4a92f = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0x34, 0x6d, 0xb1, 0x53, 0x8b, 0x3a, 0x2c, 0x18, 0x0a, 0x4d, 0xca, 0xe2, 0xa1, 0xa0,
	0x4c, 0xa0, 0x7b, 0x58, 0xe9, 0x41, 0x96, 0x6c, 0x3d, 0x14, 0x51, 0x24, 0x2e, 0x1e, 0x44, 0x28,
	0xd3, 0xe9, 0xd8, 0x0e, 0x4d, 0x32, 0xa1, 0x99, 0x2e, 0xcd, 0x5f, 0xf0, 0xe4, 0x4f, 0xf0, 0xe7,
	0xf4, 0xe6, 0x1e, 0xf7, 0x54, 0x35, 0xbd, 0x78, 0xf4, 0xbc, 0x27, 0xc9, 0x4b, 0xb6, 0x2d, 0x88,
	0xe0, 0x9e, 0xf2, 0xe5, 0xcd, 0xfb, 0xbe, 0xf9, 0xbe, 0xf7, 0x06, 0xb7, 0xb9, 0xf2, 0x1d, 0xae,
	0x7c, 0x11, 0x4e, 0x65, 0x28, 0xf6, 0x88, 0x46, 0x0b, 0xa5, 0x15, 0x79, 0xcc, 0x15, 0x9f, 0x2f,
	0x14, 0xe3, 0x33, 0xca, 0x95, 0x4f, 0x77, 0xc7, 0xad, 0xa3, 0xa9, 0x9a, 0x2a, 0xe8, 0x71, 0x32,
	0x94, 0xb7, 0xb7, 0xcc, 0xa5, 0x96, 0xbe, 0x33, 0xf3, 0xb9, 0xa3, 0x65, 0x20, 0x62, 0xcd, 0x82,
	0x28, 0x3f, 0x39, 0xfe, 0x6d, 0xe0, 0xc6, 0x30, 0x9c, 0x88, 0xd5, 0x3b, 0x3e, 0x13, 0x01, 0x23,
	0x6d, 0x8c, 0xe7, 0x22, 0x19, 0x45, 0x0b, 0xf1, 0x49, 0xae, 0x4c, 0xd4, 0x41, 0xdd, 0xfb, 0x5e,
	0x7d, 0x2e, 0x92, 0xb7, 0x50, 0x20, 0xaf, 0x71, 0x55, 0x27, 0x91, 0x88, 0xcd, 0x72, 0xc7, 0xe8,
	0x36, 0xdd, 0xd3, 0x9b, 0x8d, 0x7d, 0x32, 0x95, 0x7a, 0xb6, 0x1c, 0x53, 0xae, 0x02, 0x67, 0xe7,
	0x6a, 0x32, 0xde, 0x63, 0x27, 0x9a, 0x4f, 0x9d, 0x22, 0x0e, 0x90, 0xe9, 0x85, 0x97, 0xab, 0x90,
	0x04, 0x3f, 0xe0, 0xca, 0x97, 0x93, 0xd5, 0x68, 0x9c, 0x8c, 0x00, 0x99, 0x46, 0xc7, 0xe8, 0x36,
	0x7a, 0xa7, 0xf4, 0x1f, 0x01, 0xe9, 0x81, 0x59, 0x7a, 0x0e, 0x5c, 0x37, 0x81, 0xef, 0xcb, 0x50,
	0x2f, 0x12, 0xd7, 0x4c, 0x37, 0x76, 0xf3, 0x5c, 0xf9, 0xc3, 0xa2, 0x3e, 0x1c, 0x7c, 0xfe, 0x6e,
	0x1b, 0x32, 0xd4, 0x5e, 0x93, 0x1f, 0x76, 0x93, 0x67, 0x79, 0x50, 0x28, 0xc6, 0x66, 0x05, 0xe2,
	0x34, 0xd3, 0x8d, 0x5d, 0x7f, 0x25, 0x72, 0x5e, 0x0c, 0xb9, 0xa1, 0x39, 0x26, 0x67, 0xb8, 0x1e,
	0xc8, 0x70, 0x74, 0xc9, 0x32, 0x8b, 0xd5, 0x0e, 0xea, 0x36, 0x7a, 0xed, 0x03, 0x8b, 0xd9, 0x78,
	0xe9, 0xcc, 0xe7, 0xf4, 0xe2, 0x76, 0xbc, 0x6e, 0x65, 0xbd, 0xb1, 0x4b, 0xde, 0xbd, 0x40, 0x86,
	0xef, 0x33, 0x12, 0x28, 0xb0, 0x55, 0xa1, 0x50, 0xbb, 0x8b, 0x02, 0x5b, 0x81, 0x42, 0xeb, 0x0c,
	0x93, 0xbf, 0x03, 0x93, 0x87, 0xd8, 0x98, 0x8b, 0x04, 0x36, 0xd5, 0xf4, 0x32, 0x48, 0x8e, 0x70,
	0xf5, 0x92, 0xf9, 0x4b, 0x61, 0x96, 0xa1, 0x96, 0xff, 0xf4, 0xcb, 0xcf, 0x51, 0xbf, 0xf2, 0xeb,
	0xab, 0x8d, 0x8e, 0xbf, 0x21, 0xfc, 0x68, 0x20, 0xb4, 0x58, 0x04, 0x32, 0x94, 0xb1, 0x96, 0x7c,
	0xc0, 0x34, 0x23, 0x1f, 0x71, 0x3d, 0x64, 0x81, 0x88, 0x23, 0xc6, 0x05, 0xa8, 0x55, 0xdc, 0x17,
	0x37, 0x1b, 0xbb, 0x7f, 0x97, 0xed, 0x4e, 0xc6, 0xf4, 0xcd, 0xad, 0xc6, 0x70, 0xe0, 0xed, 0x05,
	0x89, 0x8b, 0x6b, 0x31, 0xec, 0x0c, 0x4c, 0x35, 0x7a, 0x4f, 0xfe, 0x67, 0xbf, 0xc5, 0x04, 0x0a,
	0x26, 0x21, 0xb8, 0x32, 0x61, 0x9a, 0x99, 0x06, 0x3c, 0x4a, 0xc0, 0x79, 0x22, 0xf7, 0xe9, 0xfa,
	0xa7, 0x55, 0x5a, 0xa7, 0x16, 0xba, 0x4a, 0x2d, 0x74, 0x9d, 0x5a, 0xe8, 0x47, 0x6a, 0xa1, 0x2f,
	0x5b, 0xab, 0x74, 0xb5, 0xb5, 0x4a, 0xd7, 0x5b, 0xab, 0xf4, 0xa1, 0xbe, 0xbb, 0x60, 0x5c, 0x83,
	0x87, 0x7f, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0xea, 0xdf, 0xaf, 0xe1, 0x62, 0x03, 0x00, 0x00,
}
