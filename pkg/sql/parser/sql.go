// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) partitionList() []Partition {
	return u.val.([]Partition)
}
func (u *sqlSymUnion) partition() Partition {
	return u.val.(Partition)
}

//line sql.y:472
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LIST = 57515
const LOCAL = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const LOW = 57519
const LSHIFT = 57520
const MATCH = 57521
const MINUTE = 57522
const MONTH = 57523
const NAN = 57524
const NAME = 57525
const NAMES = 57526
const NATURAL = 57527
const NEXT = 57528
const NO = 57529
const NO_INDEX_JOIN = 57530
const NORMAL = 57531
const NOT = 57532
const NOTHING = 57533
const NULL = 57534
const NULLIF = 57535
const NULLS = 57536
const NUMERIC = 57537
const OF = 57538
const OFF = 57539
const OFFSET = 57540
const OID = 57541
const ON = 57542
const ONLY = 57543
const OPTIONS = 57544
const OR = 57545
const ORDER = 57546
const ORDINALITY = 57547
const OUT = 57548
const OUTER = 57549
const OVER = 57550
const OVERLAPS = 57551
const OVERLAY = 57552
const PARENT = 57553
const PARTIAL = 57554
const PARTITION = 57555
const PASSWORD = 57556
const PAUSE = 57557
const PLACING = 57558
const PLANS = 57559
const POSITION = 57560
const PRECEDING = 57561
const PRECISION = 57562
const PREPARE = 57563
const PRIMARY = 57564
const PRIORITY = 57565
const QUERIES = 57566
const QUERY = 57567
const RANGE = 57568
const READ = 57569
const REAL = 57570
const RECURSIVE = 57571
const REF = 57572
const REFERENCES = 57573
const REGCLASS = 57574
const REGPROC = 57575
const REGPROCEDURE = 57576
const REGNAMESPACE = 57577
const REGTYPE = 57578
const RENAME = 57579
const REPEATABLE = 57580
const RELEASE = 57581
const RESET = 57582
const RESTORE = 57583
const RESTRICT = 57584
const RESUME = 57585
const RETURNING = 57586
const REVOKE = 57587
const RIGHT = 57588
const ROLLBACK = 57589
const ROLLUP = 57590
const ROW = 57591
const ROWS = 57592
const RSHIFT = 57593
const SAVEPOINT = 57594
const SCATTER = 57595
const SEARCH = 57596
const SECOND = 57597
const SELECT = 57598
const SEQUENCES = 57599
const SERIAL = 57600
const SERIALIZABLE = 57601
const SESSION = 57602
const SESSIONS = 57603
const SESSION_USER = 57604
const SET = 57605
const SETTING = 57606
const SETTINGS = 57607
const SHOW = 57608
const SIMILAR = 57609
const SIMPLE = 57610
const SMALLINT = 57611
const SMALLSERIAL = 57612
const SNAPSHOT = 57613
const SOME = 57614
const SPLIT = 57615
const SQL = 57616
const START = 57617
const STATUS = 57618
const STDIN = 57619
const STRICT = 57620
const STRING = 57621
const STORE = 57622
const STORING = 57623
const SUBSTRING = 57624
const SYMMETRIC = 57625
const SYSTEM = 57626
const TABLE = 57627
const TABLES = 57628
const TEMP = 57629
const TEMPLATE = 57630
const TEMPORARY = 57631
const TESTING_RANGES = 57632
const TESTING_RELOCATE = 57633
const TEXT = 57634
const THEN = 57635
const TIME = 57636
const TIMESTAMP = 57637
const TIMESTAMPTZ = 57638
const TO = 57639
const TRAILING = 57640
const TRACE = 57641
const TRANSACTION = 57642
const TREAT = 57643
const TRIM = 57644
const TRUE = 57645
const TRUNCATE = 57646
const TYPE = 57647
const UNBOUNDED = 57648
const UNCOMMITTED = 57649
const UNION = 57650
const UNIQUE = 57651
const UNKNOWN = 57652
const UPDATE = 57653
const UPSERT = 57654
const USE = 57655
const USER = 57656
const USERS = 57657
const USING = 57658
const UUID = 57659
const VALID = 57660
const VALIDATE = 57661
const VALUE = 57662
const VALUES = 57663
const VARCHAR = 57664
const VARIADIC = 57665
const VIEW = 57666
const VARYING = 57667
const WHEN = 57668
const WHERE = 57669
const WINDOW = 57670
const WITH = 57671
const WITHIN = 57672
const WITHOUT = 57673
const WRITE = 57674
const YEAR = 57675
const ZONE = 57676
const NOT_LA = 57677
const WITH_LA = 57678
const AS_LA = 57679
const POSTFIXOP = 57680
const UMINUS = 57681
const HELPTOKEN = 57682

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6564

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	359, 53,
	-2, 676,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 529,
	-2, 0,
	-1, 61,
	92, 676,
	145, 676,
	311, 676,
	312, 676,
	-2, 0,
	-1, 71,
	103, 651,
	112, 651,
	153, 651,
	172, 651,
	198, 651,
	204, 651,
	308, 651,
	-2, 640,
	-1, 103,
	4, 678,
	20, 678,
	21, 678,
	23, 678,
	28, 678,
	33, 678,
	34, 678,
	35, 678,
	36, 678,
	37, 678,
	38, 678,
	39, 678,
	40, 678,
	41, 678,
	42, 678,
	44, 678,
	45, 678,
	46, 678,
	47, 678,
	48, 678,
	51, 678,
	52, 678,
	53, 678,
	55, 678,
	56, 678,
	60, 678,
	61, 678,
	62, 678,
	64, 678,
	66, 678,
	67, 678,
	68, 678,
	71, 678,
	72, 678,
	73, 678,
	81, 678,
	82, 678,
	83, 678,
	84, 678,
	85, 678,
	86, 678,
	87, 678,
	88, 678,
	90, 678,
	92, 678,
	94, 678,
	97, 678,
	98, 678,
	100, 678,
	104, 678,
	105, 678,
	106, 678,
	107, 678,
	108, 678,
	109, 678,
	113, 678,
	114, 678,
	115, 678,
	116, 678,
	117, 678,
	119, 678,
	121, 678,
	126, 678,
	127, 678,
	129, 678,
	132, 678,
	133, 678,
	134, 678,
	135, 678,
	136, 678,
	137, 678,
	140, 678,
	142, 678,
	145, 678,
	146, 678,
	147, 678,
	148, 678,
	149, 678,
	150, 678,
	151, 678,
	152, 678,
	154, 678,
	157, 678,
	158, 678,
	159, 678,
	161, 678,
	162, 678,
	163, 678,
	165, 678,
	166, 678,
	168, 678,
	170, 678,
	173, 678,
	174, 678,
	177, 678,
	179, 678,
	180, 678,
	181, 678,
	182, 678,
	183, 678,
	184, 678,
	186, 678,
	187, 678,
	188, 678,
	189, 678,
	193, 678,
	194, 678,
	195, 678,
	196, 678,
	197, 678,
	199, 678,
	201, 678,
	202, 678,
	205, 678,
	206, 678,
	208, 678,
	210, 678,
	211, 678,
	212, 678,
	213, 678,
	214, 678,
	215, 678,
	217, 678,
	218, 678,
	219, 678,
	220, 678,
	221, 678,
	223, 678,
	224, 678,
	225, 678,
	226, 678,
	227, 678,
	228, 678,
	229, 678,
	230, 678,
	232, 678,
	233, 678,
	234, 678,
	235, 678,
	236, 678,
	237, 678,
	238, 678,
	239, 678,
	240, 678,
	241, 678,
	242, 678,
	243, 678,
	245, 678,
	247, 678,
	248, 678,
	249, 678,
	250, 678,
	252, 678,
	253, 678,
	254, 678,
	255, 678,
	257, 678,
	258, 678,
	259, 678,
	260, 678,
	261, 678,
	263, 678,
	264, 678,
	265, 678,
	266, 678,
	268, 678,
	269, 678,
	270, 678,
	271, 678,
	273, 678,
	274, 678,
	275, 678,
	276, 678,
	277, 678,
	278, 678,
	279, 678,
	280, 678,
	281, 678,
	282, 678,
	284, 678,
	286, 678,
	287, 678,
	288, 678,
	289, 678,
	290, 678,
	291, 678,
	292, 678,
	294, 678,
	295, 678,
	296, 678,
	299, 678,
	300, 678,
	301, 678,
	302, 678,
	304, 678,
	305, 678,
	306, 678,
	307, 678,
	310, 678,
	311, 678,
	312, 678,
	313, 678,
	315, 678,
	317, 678,
	318, 678,
	319, 678,
	320, 678,
	321, 678,
	322, 678,
	325, 678,
	330, 678,
	331, 678,
	332, 678,
	333, 678,
	334, 678,
	-2, 0,
	-1, 116,
	103, 650,
	112, 650,
	153, 650,
	172, 650,
	198, 650,
	204, 650,
	308, 650,
	-2, 643,
	-1, 121,
	1, 578,
	157, 578,
	223, 578,
	227, 578,
	358, 578,
	359, 578,
	-2, 0,
	-1, 123,
	1, 578,
	358, 578,
	359, 578,
	-2, 0,
	-1, 124,
	1, 578,
	358, 578,
	359, 578,
	-2, 0,
	-1, 125,
	1, 582,
	358, 582,
	359, 582,
	-2, 0,
	-1, 132,
	4, 684,
	5, 684,
	6, 684,
	7, 684,
	8, 684,
	9, 684,
	20, 684,
	21, 684,
	23, 684,
	28, 684,
	29, 684,
	33, 684,
	34, 684,
	35, 684,
	36, 684,
	37, 684,
	38, 684,
	39, 684,
	40, 684,
	41, 684,
	42, 684,
	44, 684,
	45, 684,
	46, 684,
	47, 684,
	48, 684,
	49, 684,
	50, 684,
	51, 684,
	52, 684,
	53, 684,
	55, 684,
	56, 684,
	58, 684,
	60, 684,
	61, 684,
	62, 684,
	64, 684,
	66, 684,
	67, 684,
	68, 684,
	70, 684,
	71, 684,
	72, 684,
	73, 684,
	75, 684,
	76, 684,
	77, 684,
	79, 684,
	80, 684,
	81, 684,
	82, 684,
	83, 684,
	84, 684,
	85, 684,
	86, 684,
	87, 684,
	88, 684,
	90, 684,
	92, 684,
	94, 684,
	97, 684,
	98, 684,
	100, 684,
	104, 684,
	105, 684,
	106, 684,
	107, 684,
	108, 684,
	109, 684,
	110, 684,
	113, 684,
	114, 684,
	115, 684,
	116, 684,
	117, 684,
	119, 684,
	121, 684,
	124, 684,
	126, 684,
	127, 684,
	129, 684,
	132, 684,
	133, 684,
	134, 684,
	135, 684,
	136, 684,
	137, 684,
	138, 684,
	140, 684,
	142, 684,
	144, 684,
	145, 684,
	146, 684,
	147, 684,
	148, 684,
	149, 684,
	150, 684,
	151, 684,
	152, 684,
	154, 684,
	156, 684,
	157, 684,
	158, 684,
	159, 684,
	160, 684,
	161, 684,
	162, 684,
	163, 684,
	165, 684,
	166, 684,
	168, 684,
	169, 684,
	170, 684,
	171, 684,
	173, 684,
	174, 684,
	177, 684,
	179, 684,
	180, 684,
	181, 684,
	182, 684,
	183, 684,
	184, 684,
	185, 684,
	186, 684,
	187, 684,
	188, 684,
	189, 684,
	190, 684,
	192, 684,
	193, 684,
	194, 684,
	195, 684,
	196, 684,
	197, 684,
	199, 684,
	202, 684,
	205, 684,
	206, 684,
	207, 684,
	208, 684,
	209, 684,
	210, 684,
	211, 684,
	212, 684,
	213, 684,
	214, 684,
	215, 684,
	217, 684,
	218, 684,
	219, 684,
	220, 684,
	221, 684,
	223, 684,
	224, 684,
	225, 684,
	226, 684,
	227, 684,
	228, 684,
	229, 684,
	230, 684,
	232, 684,
	233, 684,
	234, 684,
	235, 684,
	236, 684,
	237, 684,
	238, 684,
	239, 684,
	240, 684,
	241, 684,
	242, 684,
	243, 684,
	245, 684,
	246, 684,
	247, 684,
	248, 684,
	249, 684,
	250, 684,
	252, 684,
	253, 684,
	254, 684,
	255, 684,
	257, 684,
	258, 684,
	259, 684,
	260, 684,
	261, 684,
	262, 684,
	263, 684,
	264, 684,
	265, 684,
	266, 684,
	267, 684,
	268, 684,
	269, 684,
	270, 684,
	271, 684,
	273, 684,
	274, 684,
	275, 684,
	276, 684,
	277, 684,
	278, 684,
	279, 684,
	280, 684,
	281, 684,
	282, 684,
	284, 684,
	286, 684,
	287, 684,
	288, 684,
	289, 684,
	290, 684,
	291, 684,
	292, 684,
	294, 684,
	295, 684,
	296, 684,
	299, 684,
	300, 684,
	301, 684,
	302, 684,
	303, 684,
	304, 684,
	305, 684,
	306, 684,
	307, 684,
	310, 684,
	311, 684,
	312, 684,
	313, 684,
	314, 684,
	315, 684,
	317, 684,
	318, 684,
	319, 684,
	320, 684,
	321, 684,
	322, 684,
	325, 684,
	330, 684,
	331, 684,
	332, 684,
	333, 684,
	334, 684,
	335, 684,
	341, 684,
	346, 684,
	347, 684,
	348, 684,
	355, 684,
	361, 684,
	-2, 0,
	-1, 135,
	1, 53,
	359, 53,
	-2, 676,
	-1, 495,
	123, 1276,
	297, 1276,
	340, 1276,
	357, 1276,
	-2, 0,
	-1, 496,
	123, 1228,
	297, 1228,
	340, 1228,
	357, 1228,
	-2, 0,
	-1, 498,
	123, 1334,
	297, 1334,
	340, 1334,
	357, 1334,
	-2, 0,
	-1, 500,
	123, 1356,
	297, 1356,
	340, 1356,
	357, 1356,
	-2, 0,
	-1, 507,
	123, 1281,
	297, 1281,
	340, 1281,
	357, 1281,
	-2, 317,
	-1, 533,
	1, 394,
	354, 394,
	356, 394,
	358, 394,
	359, 394,
	-2, 0,
	-1, 534,
	1, 441,
	120, 441,
	354, 441,
	356, 441,
	358, 441,
	359, 441,
	-2, 0,
	-1, 540,
	1, 408,
	354, 408,
	356, 408,
	358, 408,
	359, 408,
	-2, 0,
	-1, 542,
	1, 412,
	354, 412,
	356, 412,
	358, 412,
	359, 412,
	-2, 0,
	-1, 545,
	1, 420,
	354, 420,
	356, 420,
	358, 420,
	359, 420,
	-2, 0,
	-1, 546,
	1, 425,
	354, 425,
	356, 425,
	358, 425,
	359, 425,
	-2, 0,
	-1, 549,
	1, 435,
	354, 435,
	356, 435,
	358, 435,
	359, 435,
	-2, 0,
	-1, 563,
	112, 686,
	172, 686,
	198, 686,
	-2, 646,
	-1, 566,
	112, 685,
	172, 685,
	198, 685,
	-2, 644,
	-1, 623,
	355, 1206,
	-2, 1199,
	-1, 624,
	355, 1207,
	-2, 1200,
	-1, 630,
	5, 861,
	355, 861,
	-2, 1407,
	-1, 655,
	5, 820,
	-2, 1377,
	-1, 656,
	5, 855,
	355, 855,
	-2, 1379,
	-1, 657,
	5, 830,
	-2, 1380,
	-1, 658,
	5, 829,
	-2, 1381,
	-1, 659,
	5, 855,
	355, 855,
	-2, 1384,
	-1, 660,
	5, 855,
	355, 855,
	-2, 1385,
	-1, 661,
	5, 856,
	-2, 1388,
	-1, 662,
	5, 812,
	-2, 1389,
	-1, 663,
	5, 812,
	-2, 1390,
	-1, 664,
	5, 837,
	-2, 1394,
	-1, 665,
	5, 822,
	-2, 1395,
	-1, 666,
	5, 823,
	-2, 1396,
	-1, 667,
	5, 813,
	-2, 1401,
	-1, 668,
	5, 814,
	-2, 1402,
	-1, 669,
	5, 815,
	-2, 1403,
	-1, 670,
	5, 816,
	-2, 1404,
	-1, 671,
	5, 817,
	-2, 1405,
	-1, 672,
	5, 818,
	-2, 1406,
	-1, 673,
	5, 812,
	-2, 1411,
	-1, 674,
	5, 821,
	-2, 1416,
	-1, 675,
	5, 819,
	-2, 1419,
	-1, 676,
	5, 853,
	355, 853,
	-2, 1421,
	-1, 677,
	5, 857,
	-2, 1424,
	-1, 678,
	5, 859,
	-2, 1425,
	-1, 679,
	5, 852,
	355, 852,
	-2, 1430,
	-1, 774,
	214, 674,
	-2, 522,
	-1, 778,
	200, 1203,
	-2, 0,
	-1, 813,
	1, 208,
	354, 208,
	356, 208,
	358, 208,
	359, 208,
	-2, 649,
	-1, 820,
	4, 1429,
	10, 1429,
	11, 1429,
	13, 1429,
	14, 1429,
	15, 1429,
	16, 1429,
	17, 1429,
	18, 1429,
	20, 1429,
	21, 1429,
	23, 1429,
	26, 1429,
	28, 1429,
	30, 1429,
	33, 1429,
	34, 1429,
	35, 1429,
	36, 1429,
	37, 1429,
	38, 1429,
	39, 1429,
	40, 1429,
	41, 1429,
	42, 1429,
	44, 1429,
	45, 1429,
	46, 1429,
	47, 1429,
	48, 1429,
	51, 1429,
	52, 1429,
	53, 1429,
	55, 1429,
	56, 1429,
	57, 1429,
	60, 1429,
	61, 1429,
	62, 1429,
	63, 1429,
	64, 1429,
	66, 1429,
	67, 1429,
	68, 1429,
	70, 1429,
	71, 1429,
	72, 1429,
	73, 1429,
	81, 1429,
	82, 1429,
	83, 1429,
	84, 1429,
	85, 1429,
	86, 1429,
	87, 1429,
	88, 1429,
	90, 1429,
	92, 1429,
	94, 1429,
	97, 1429,
	98, 1429,
	100, 1429,
	104, 1429,
	105, 1429,
	106, 1429,
	107, 1429,
	108, 1429,
	109, 1429,
	113, 1429,
	114, 1429,
	115, 1429,
	116, 1429,
	117, 1429,
	118, 1429,
	119, 1429,
	121, 1429,
	124, 1429,
	126, 1429,
	127, 1429,
	129, 1429,
	132, 1429,
	133, 1429,
	134, 1429,
	135, 1429,
	136, 1429,
	137, 1429,
	138, 1429,
	139, 1429,
	140, 1429,
	142, 1429,
	144, 1429,
	145, 1429,
	146, 1429,
	147, 1429,
	148, 1429,
	149, 1429,
	150, 1429,
	151, 1429,
	152, 1429,
	154, 1429,
	156, 1429,
	157, 1429,
	158, 1429,
	159, 1429,
	160, 1429,
	161, 1429,
	162, 1429,
	163, 1429,
	165, 1429,
	166, 1429,
	168, 1429,
	169, 1429,
	170, 1429,
	171, 1429,
	173, 1429,
	174, 1429,
	177, 1429,
	178, 1429,
	179, 1429,
	180, 1429,
	181, 1429,
	182, 1429,
	183, 1429,
	184, 1429,
	185, 1429,
	186, 1429,
	187, 1429,
	188, 1429,
	189, 1429,
	193, 1429,
	194, 1429,
	195, 1429,
	196, 1429,
	197, 1429,
	199, 1429,
	202, 1429,
	203, 1429,
	205, 1429,
	206, 1429,
	208, 1429,
	210, 1429,
	211, 1429,
	212, 1429,
	213, 1429,
	214, 1429,
	215, 1429,
	217, 1429,
	218, 1429,
	219, 1429,
	220, 1429,
	221, 1429,
	223, 1429,
	224, 1429,
	225, 1429,
	226, 1429,
	227, 1429,
	228, 1429,
	229, 1429,
	230, 1429,
	232, 1429,
	233, 1429,
	234, 1429,
	235, 1429,
	236, 1429,
	237, 1429,
	238, 1429,
	239, 1429,
	240, 1429,
	241, 1429,
	242, 1429,
	243, 1429,
	245, 1429,
	246, 1429,
	247, 1429,
	248, 1429,
	249, 1429,
	250, 1429,
	251, 1429,
	252, 1429,
	253, 1429,
	254, 1429,
	255, 1429,
	257, 1429,
	258, 1429,
	259, 1429,
	260, 1429,
	261, 1429,
	263, 1429,
	264, 1429,
	265, 1429,
	266, 1429,
	267, 1429,
	268, 1429,
	269, 1429,
	270, 1429,
	271, 1429,
	273, 1429,
	274, 1429,
	275, 1429,
	276, 1429,
	277, 1429,
	278, 1429,
	279, 1429,
	280, 1429,
	281, 1429,
	282, 1429,
	284, 1429,
	286, 1429,
	287, 1429,
	288, 1429,
	289, 1429,
	290, 1429,
	291, 1429,
	292, 1429,
	294, 1429,
	295, 1429,
	296, 1429,
	299, 1429,
	300, 1429,
	301, 1429,
	302, 1429,
	304, 1429,
	305, 1429,
	306, 1429,
	307, 1429,
	310, 1429,
	311, 1429,
	312, 1429,
	313, 1429,
	315, 1429,
	317, 1429,
	318, 1429,
	319, 1429,
	320, 1429,
	321, 1429,
	322, 1429,
	325, 1429,
	330, 1429,
	331, 1429,
	332, 1429,
	333, 1429,
	334, 1429,
	335, 1429,
	336, 1429,
	338, 1429,
	339, 1429,
	340, 1429,
	341, 1429,
	343, 1429,
	344, 1429,
	345, 1429,
	346, 1429,
	347, 1429,
	348, 1429,
	349, 1429,
	350, 1429,
	351, 1429,
	353, 1429,
	356, 1429,
	357, 1429,
	360, 1429,
	361, 1429,
	-2, 0,
	-1, 834,
	123, 1334,
	297, 1334,
	340, 1334,
	357, 1334,
	-2, 0,
	-1, 851,
	123, 1356,
	297, 1356,
	340, 1356,
	357, 1356,
	-2, 0,
	-1, 921,
	112, 685,
	172, 685,
	198, 685,
	-2, 647,
	-1, 990,
	103, 651,
	112, 651,
	153, 651,
	172, 651,
	198, 651,
	204, 651,
	308, 651,
	-2, 980,
	-1, 1000,
	355, 1183,
	-2, 1171,
	-1, 1018,
	356, 1123,
	-2, 0,
	-1, 1074,
	103, 651,
	112, 651,
	153, 651,
	172, 651,
	198, 651,
	204, 651,
	308, 651,
	-2, 747,
	-1, 1394,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 896,
	-1, 1395,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 897,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 898,
	-1, 1400,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 902,
	-1, 1401,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 903,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 904,
	-1, 1405,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 909,
	-1, 1411,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 911,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 915,
	-1, 1414,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 916,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 917,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 918,
	-1, 1442,
	209, 1065,
	-2, 1068,
	-1, 1486,
	123, 1105,
	355, 1206,
	-2, 1199,
	-1, 1487,
	123, 1106,
	-2, 1373,
	-1, 1488,
	123, 1107,
	-2, 1280,
	-1, 1489,
	123, 1108,
	-2, 1243,
	-1, 1490,
	123, 1109,
	-2, 1259,
	-1, 1491,
	123, 1110,
	-2, 1279,
	-1, 1492,
	123, 1111,
	-2, 1331,
	-1, 1568,
	1, 748,
	70, 748,
	103, 748,
	112, 748,
	124, 748,
	128, 748,
	130, 748,
	144, 748,
	153, 748,
	160, 748,
	169, 748,
	172, 748,
	185, 748,
	198, 748,
	200, 748,
	204, 748,
	244, 748,
	246, 748,
	308, 748,
	316, 748,
	327, 748,
	328, 748,
	337, 748,
	354, 748,
	356, 748,
	358, 748,
	359, 748,
	360, 748,
	-2, 747,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 910,
	-1, 1709,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 912,
	-1, 1714,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 913,
	-1, 1732,
	209, 1064,
	-2, 1067,
	-1, 1957,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 914,
	-1, 1962,
	156, 0,
	-2, 930,
	-1, 1972,
	209, 1066,
	-2, 1069,
	-1, 2014,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 957,
	-1, 2015,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 958,
	-1, 2016,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 959,
	-1, 2020,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 963,
	-1, 2021,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 964,
	-1, 2022,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 965,
	-1, 2147,
	156, 0,
	-2, 931,
	-1, 2150,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 934,
	-1, 2151,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 936,
	-1, 2269,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 935,
	-1, 2270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 937,
	-1, 2277,
	156, 0,
	-2, 966,
	-1, 2355,
	156, 0,
	-2, 967,
	-1, 2434,
	36, 0,
	138, 0,
	171, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 1376,
}

const sqlPrivate = 57344

const sqlLast = 41249

var sqlAct = [...]int{

	624, 129, 2433, 2442, 2407, 2103, 1631, 2483, 2443, 2303,
	2444, 1639, 1991, 1939, 2360, 1702, 2113, 1198, 567, 1611,
	506, 2250, 2432, 583, 614, 622, 2137, 1205, 70, 872,
	2135, 768, 1290, 2201, 2215, 2074, 621, 1615, 1240, 1563,
	173, 2075, 1907, 1291, 173, 1905, 2283, 1218, 600, 1628,
	1072, 726, 173, 1846, 1610, 2181, 1068, 1798, 2129, 1825,
	1241, 173, 1640, 1614, 1913, 1572, 173, 173, 1103, 1581,
	173, 1833, 1051, 173, 1201, 438, 2045, 1564, 1373, 1797,
	1440, 173, 1743, 1368, 1604, 996, 1698, 575, 115, 453,
	25, 1194, 924, 855, 1321, 1080, 1082, 594, 1052, 1686,
	1428, 1450, 1425, 1515, 1317, 1466, 435, 1460, 732, 1028,
	803, 874, 854, 1612, 800, 1633, 1032, 1550, 793, 1618,
	1537, 1059, 735, 814, 714, 486, 1482, 173, 173, 985,
	925, 923, 116, 1320, 117, 173, 593, 1518, 164, 1042,
	464, 616, 1212, 499, 790, 169, 503, 572, 712, 115,
	1041, 527, 2216, 929, 2059, 1731, 858, 2060, 1632, 1069,
	571, 173, 173, 173, 173, 1955, 1220, 571, 173, 173,
	2479, 1220, 1220, 2478, 1102, 2459, 2454, 1102, 2453, 2214,
	1654, 2450, 1654, 2430, 1923, 1102, 2429, 1669, 756, 2402,
	1669, 1922, 2397, 1662, 719, 2393, 2264, 2385, 1077, 1102,
	566, 2214, 2357, 2335, 2332, 478, 1662, 2214, 1102, 2330,
	2314, 1539, 2313, 2214, 1102, 581, 2214, 2291, 1099, 1654,
	2288, 1102, 859, 115, 1102, 25, 860, 2271, 2236, 2234,
	2213, 1662, 1654, 1654, 2214, 2194, 2174, 2152, 2149, 1102,
	1654, 1654, 1662, 2128, 1605, 2123, 2403, 1609, 564, 1609,
	563, 2055, 1966, 1933, 1894, 2056, 1654, 1895, 1102, 1849,
	1822, 1815, 1813, 1654, 1102, 1816, 1654, 2048, 1812, 740,
	744, 576, 1654, 1811, 750, 1669, 716, 1654, 940, 941,
	1605, 960, 961, 962, 970, 971, 972, 1735, 38, 1734,
	2264, 2048, 1732, 1736, 963, 1654, 1654, 1538, 1673, 39,
	1636, 943, 1654, 1669, 974, 1661, 1653, 1608, 1950, 1662,
	1654, 1609, 42, 1544, 940, 941, 1654, 1543, 132, 1570,
	970, 971, 972, 1742, 2027, 942, 1233, 1768, 1769, 1969,
	1234, 957, 1102, 729, 48, 1895, 718, 943, 719, 1701,
	974, 1684, 1046, 1444, 754, 836, 135, 134, 940, 941,
	833, 960, 961, 962, 970, 971, 972, 2217, 832, 1298,
	1221, 942, 831, 59, 963, 1221, 1221, 957, 830, 829,
	60, 943, 61, 828, 974, 132, 827, 1318, 826, 825,
	1783, 824, 823, 133, 822, 720, 948, 717, 559, 558,
	557, 126, 525, 617, 524, 942, 523, 522, 127, 63,
	173, 957, 173, 173, 134, 173, 967, 975, 521, 520,
	173, 519, 518, 517, 516, 515, 173, 118, 940, 941,
	772, 1922, 948, 776, 973, 514, 513, 512, 511, 173,
	173, 173, 173, 173, 510, 1774, 509, 494, 817, 965,
	133, 943, 967, 975, 493, 492, 958, 491, 1538, 796,
	796, 490, 807, 426, 425, 424, 948, 1463, 423, 422,
	173, 407, 406, 398, 574, 942, 572, 132, 1768, 1769,
	397, 964, 396, 173, 118, 965, 967, 975, 1226, 395,
	64, 2502, 958, 1219, 1352, 388, 387, 158, 157, 173,
	940, 941, 156, 837, 973, 1784, 134, 155, 154, 173,
	153, 152, 151, 150, 1464, 119, 66, 149, 67, 965,
	148, 147, 146, 943, 145, 144, 958, 143, 142, 959,
	141, 132, 140, 139, 792, 1688, 948, 138, 459, 137,
	817, 99, 133, 940, 941, 968, 136, 942, 760, 1073,
	126, 964, 1841, 957, 1479, 1477, 767, 127, 797, 815,
	134, 1465, 1462, 1324, 1475, 959, 943, 1473, 867, 936,
	2477, 173, 2449, 1768, 1769, 2431, 1635, 2257, 1785, 2412,
	2352, 968, 2333, 870, 2180, 2179, 1774, 2175, 2167, 2166,
	942, 2165, 922, 2161, 2160, 2159, 133, 940, 941, 959,
	2158, 2134, 2042, 2037, 126, 2036, 2035, 1977, 948, 1893,
	1897, 127, 865, 966, 1853, 968, 954, 955, 956, 969,
	943, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	118, 1436, 1768, 1769, 765, 1820, 1467, 572, 2176, 1817,
	1805, 1796, 1767, 1764, 942, 1763, 1784, 1761, 1748, 966,
	852, 948, 849, 1747, 1568, 969, 921, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 1237, 760, 958, 936,
	1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 920,
	727, 1774, 997, 966, 988, 2490, 954, 955, 956, 969,
	868, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	1071, 1004, 935, 997, 1204, 948, 1993, 1070, 1810, 2421,
	2420, 958, 2388, 2381, 1461, 2380, 2379, 2371, 564, 1785,
	563, 2369, 173, 2347, 173, 2346, 1319, 1697, 132, 2345,
	2300, 2279, 2256, 932, 933, 1696, 1667, 1437, 2265, 937,
	1774, 959, 2244, 2220, 2172, 2111, 992, 173, 173, 2109,
	2108, 2106, 2083, 2082, 2063, 2051, 1961, 134, 1937, 1884,
	1879, 1866, 1057, 1865, 817, 173, 946, 947, 949, 950,
	1851, 1106, 1000, 1664, 1821, 572, 1795, 173, 1757, 1030,
	1031, 1050, 1756, 1753, 959, 1728, 1723, 1430, 1033, 173,
	1034, 1036, 1555, 133, 1527, 173, 1471, 173, 1197, 173,
	1037, 126, 728, 173, 1203, 1055, 1049, 1100, 127, 1196,
	1040, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776,
	1026, 1025, 1024, 1071, 1866, 1023, 1022, 118, 1021, 115,
	940, 941, 1020, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 1019, 1018, 1017, 173, 173, 1045, 1067, 1016,
	1015, 1014, 817, 943, 173, 1223, 1013, 173, 1225, 1012,
	1011, 1010, 1228, 1043, 1209, 1009, 766, 587, 1008, 1075,
	1001, 989, 1047, 988, 848, 840, 811, 942, 1106, 944,
	945, 946, 947, 949, 950, 2363, 2263, 173, 2154, 2133,
	2058, 2054, 173, 1556, 1935, 1768, 1769, 173, 173, 986,
	173, 1839, 173, 792, 173, 1090, 173, 1326, 1478, 1476,
	1101, 1772, 1773, 1775, 1776, 1672, 1908, 173, 1474, 2267,
	2266, 1472, 864, 173, 173, 1088, 2260, 1038, 2061, 1924,
	1605, 1073, 1039, 944, 945, 946, 947, 949, 950, 1211,
	918, 1214, 1819, 1089, 1818, 682, 1325, 1707, 861, 173,
	1305, 1006, 1238, 1106, 1940, 940, 941, 1202, 1671, 1231,
	2284, 1632, 1994, 1739, 609, 1451, 1029, 1463, 1770, 1771,
	1772, 1773, 1775, 1776, 133, 1299, 912, 1351, 943, 1918,
	2070, 1083, 2415, 1084, 1235, 1658, 2475, 1236, 849, 1947,
	2474, 2392, 1292, 2228, 1674, 2324, 1294, 2323, 2322, 115,
	1071, 1296, 942, 1293, 170, 2321, 2098, 1322, 393, 707,
	705, 1374, 1381, 1310, 1464, 913, 408, 2096, 1340, 159,
	427, 1382, 709, 703, 2067, 433, 700, 572, 1355, 904,
	476, 170, 572, 728, 484, 1333, 2066, 489, 1330, 1752,
	1751, 2239, 1196, 1574, 1334, 508, 1335, 1574, 1336, 2094,
	1337, 1003, 1338, 1573, 1750, 173, 1749, 173, 1085, 1710,
	173, 1465, 1462, 948, 1353, 1354, 400, 1657, 1601, 1344,
	1346, 173, 564, 1597, 1364, 564, 564, 1365, 1366, 1536,
	1106, 1306, 1595, 173, 2209, 412, 1412, 173, 1044, 753,
	173, 715, 715, 1448, 173, 1372, 862, 1665, 173, 393,
	162, 431, 1083, 173, 1084, 1936, 1083, 1531, 1084, 173,
	1106, 2391, 1530, 173, 1629, 572, 1383, 1309, 1308, 2210,
	1318, 1315, 1349, 958, 1438, 393, 393, 748, 393, 1557,
	1435, 1575, 170, 757, 1350, 561, 1467, 1441, 413, 863,
	1097, 992, 473, 2101, 2102, 1445, 1890, 404, 1558, 1453,
	681, 1192, 1493, 939, 1427, 2427, 1096, 2305, 163, 430,
	1586, 1588, 1485, 1485, 1498, 1299, 1510, 1215, 1329, 2446,
	1467, 950, 1522, 1523, 1525, 1427, 1094, 2466, 1603, 1085,
	1533, 1534, 847, 1085, 1987, 1915, 1542, 1886, 898, 1593,
	1451, 1552, 1553, 1548, 1095, 1599, 959, 1877, 1916, 1434,
	465, 1984, 1312, 1881, 1432, 2474, 1591, 1582, 173, 1075,
	1093, 1596, 421, 1578, 1461, 173, 877, 1091, 1561, 1602,
	2205, 2374, 2206, 470, 2085, 899, 173, 570, 173, 466,
	173, 911, 416, 173, 1946, 173, 1776, 173, 173, 2399,
	173, 173, 1915, 2209, 1247, 817, 2202, 2492, 1985, 173,
	1646, 1027, 2208, 796, 2200, 796, 467, 2447, 2204, 1467,
	1652, 2211, 1948, 2400, 1624, 1314, 1348, 1284, 2501, 1547,
	1220, 2275, 917, 38, 2241, 1585, 469, 569, 2210, 1086,
	2329, 2092, 1699, 1700, 39, 1571, 983, 1313, 953, 951,
	952, 944, 945, 946, 947, 949, 950, 42, 2465, 1755,
	2203, 1551, 160, 429, 415, 414, 1567, 701, 701, 571,
	2141, 1409, 1634, 2448, 1634, 1423, 885, 711, 1058, 48,
	710, 702, 1081, 1467, 701, 1660, 903, 2445, 571, 389,
	1421, 115, 432, 928, 2473, 1106, 2471, 115, 2486, 2207,
	1638, 161, 428, 173, 1247, 1247, 2249, 1649, 59, 399,
	1655, 1647, 1650, 1648, 1626, 60, 815, 61, 843, 173,
	173, 173, 1659, 173, 508, 1666, 774, 508, 1656, 779,
	2306, 1297, 1062, 405, 782, 1584, 835, 1889, 401, 2205,
	393, 2206, 173, 2170, 63, 1668, 908, 468, 402, 2086,
	927, 2023, 1065, 508, 508, 393, 804, 757, 2464, 1034,
	1086, 1037, 1417, 1685, 1086, 1712, 1031, 1030, 1060, 1500,
	1418, 2208, 1419, 1407, 1410, 938, 1424, 1063, 562, 1299,
	2211, 1675, 2316, 2315, 508, 472, 1426, 417, 2298, 1677,
	1720, 1328, 568, 1061, 869, 2224, 552, 508, 878, 115,
	1679, 2493, 471, 2498, 846, 1718, 1406, 2366, 1835, 1433,
	926, 2069, 909, 844, 580, 1304, 1862, 1858, 1689, 1319,
	1316, 1680, 1583, 508, 1221, 64, 853, 418, 858, 572,
	1691, 1693, 2227, 1678, 1695, 879, 928, 2484, 876, 2226,
	1847, 1627, 1741, 1210, 2171, 390, 2024, 1199, 1062, 1983,
	119, 66, 2025, 67, 1064, 1360, 2408, 419, 2207, 420,
	1302, 174, 552, 2382, 1343, 910, 132, 1300, 1065, 927,
	1339, 166, 1303, 459, 886, 553, 99, 1715, 770, 769,
	580, 1713, 1711, 1420, 1549, 393, 858, 1716, 483, 2114,
	1422, 1721, 2485, 1063, 859, 134, 2223, 2251, 860, 1727,
	2299, 1868, 1408, 1867, 572, 629, 2497, 1848, 462, 1705,
	173, 1106, 391, 2487, 1823, 1836, 173, 173, 1546, 1829,
	173, 1738, 1545, 858, 1834, 173, 569, 1361, 173, 926,
	778, 133, 481, 2104, 475, 2242, 173, 1830, 1726, 126,
	2225, 553, 173, 173, 173, 1729, 127, 789, 173, 2296,
	1888, 173, 859, 2182, 787, 465, 860, 173, 173, 173,
	173, 173, 2046, 1745, 1746, 118, 173, 1843, 173, 1470,
	1064, 699, 173, 2278, 2297, 2169, 554, 1842, 470, 1828,
	173, 858, 2100, 3, 466, 1859, 1802, 1803, 1804, 1852,
	173, 1799, 173, 1960, 173, 907, 1891, 173, 1717, 1762,
	1722, 173, 1838, 458, 33, 1719, 173, 1824, 173, 1469,
	1863, 467, 1670, 1794, 1900, 173, 684, 1896, 1607, 1898,
	896, 457, 32, 894, 892, 1807, 456, 29, 173, 817,
	1600, 469, 890, 888, 572, 461, 489, 1854, 715, 755,
	817, 173, 554, 882, 1863, 1594, 785, 859, 916, 758,
	759, 860, 1878, 2441, 555, 462, 915, 1876, 1883, 455,
	76, 393, 393, 841, 1800, 1926, 1927, 1341, 1928, 1929,
	1332, 902, 1932, 1920, 1007, 2405, 173, 2198, 2090, 170,
	2088, 2068, 1899, 1941, 1904, 1902, 556, 1630, 480, 1058,
	474, 393, 683, 1934, 1911, 704, 706, 1917, 454, 75,
	788, 1623, 465, 1208, 451, 21, 1925, 786, 1827, 393,
	1230, 393, 680, 393, 1831, 1832, 906, 1216, 1837, 738,
	555, 452, 22, 450, 27, 470, 173, 1931, 578, 1229,
	552, 466, 1963, 1979, 1980, 1981, 1943, 1944, 1945, 33,
	1942, 895, 468, 1062, 893, 891, 1278, 1227, 580, 1949,
	1224, 1951, 556, 889, 887, 1953, 1363, 32, 467, 508,
	170, 1222, 29, 1065, 881, 449, 19, 784, 170, 447,
	18, 508, 1098, 448, 17, 1092, 442, 14, 469, 1060,
	1087, 579, 1970, 1974, 443, 15, 1906, 1232, 1063, 901,
	1374, 1998, 1973, 2340, 1703, 76, 930, 471, 2475, 1374,
	2003, 508, 441, 13, 1061, 2262, 508, 173, 1997, 553,
	1995, 170, 508, 173, 508, 2000, 508, 2002, 508, 2261,
	508, 1323, 173, 173, 2130, 2030, 1986, 1988, 1989, 446,
	11, 1342, 2034, 460, 75, 723, 1967, 508, 508, 2122,
	21, 2064, 626, 440, 9, 1501, 1278, 1278, 2031, 2342,
	1590, 2376, 2057, 1768, 1769, 724, 1704, 22, 1574, 27,
	2217, 2081, 2080, 508, 1589, 1064, 173, 2044, 173, 931,
	2062, 2099, 880, 2079, 2050, 173, 2049, 1598, 817, 115,
	2047, 1574, 445, 7, 940, 941, 2354, 1587, 2110, 468,
	2089, 2328, 2091, 173, 173, 2107, 2183, 934, 2124, 818,
	2065, 19, 482, 2028, 2072, 18, 1592, 2116, 585, 17,
	554, 173, 14, 2093, 2038, 2404, 940, 941, 2127, 2115,
	15, 173, 444, 6, 439, 5, 1106, 2247, 725, 2105,
	1637, 942, 1625, 1622, 1535, 1295, 2482, 1239, 13, 943,
	2143, 2496, 2290, 1247, 471, 2118, 1768, 1769, 2188, 2119,
	2132, 1277, 2043, 2126, 2117, 2125, 940, 941, 2120, 1682,
	1681, 1774, 2131, 942, 173, 11, 1990, 1682, 1938, 489,
	2148, 715, 1844, 1814, 757, 1683, 1532, 1247, 1529, 9,
	1528, 1459, 994, 2156, 1982, 393, 577, 2095, 555, 1901,
	1004, 818, 2097, 1002, 2144, 914, 905, 1566, 900, 897,
	883, 393, 845, 560, 393, 2053, 2304, 463, 1579, 1331,
	884, 1840, 393, 1554, 2398, 2162, 1754, 393, 7, 173,
	556, 1784, 173, 393, 2359, 2274, 1247, 1606, 2168, 1468,
	1005, 52, 1106, 173, 173, 2077, 603, 173, 173, 173,
	2199, 2186, 2071, 1617, 1616, 1109, 1307, 625, 1484, 1375,
	698, 1277, 1277, 2193, 173, 627, 1244, 628, 6, 173,
	5, 173, 1245, 173, 173, 173, 1035, 173, 615, 173,
	1242, 817, 2192, 2222, 812, 2185, 2197, 2081, 2080, 173,
	173, 2187, 2218, 2189, 1641, 1311, 817, 1247, 2221, 2079,
	1431, 1449, 1827, 1737, 1785, 998, 595, 607, 2245, 606,
	2190, 2081, 2080, 2238, 1446, 839, 2081, 2080, 1845, 1914,
	2255, 1359, 2243, 2079, 1694, 2253, 1356, 2248, 2079, 1910,
	2087, 403, 1613, 1247, 1247, 1765, 810, 2252, 1507, 757,
	2268, 1499, 1247, 1247, 2246, 1495, 919, 2254, 1056, 984,
	393, 1642, 1645, 866, 508, 1921, 2273, 508, 1663, 508,
	819, 393, 393, 1048, 1651, 757, 1367, 722, 721, 2259,
	2499, 2500, 2240, 1579, 1301, 1247, 1676, 977, 976, 173,
	708, 173, 2368, 1106, 173, 857, 856, 1200, 761, 763,
	1861, 2280, 173, 2258, 2491, 2375, 2084, 2414, 1106, 1770,
	1771, 1772, 1773, 1775, 1776, 131, 128, 130, 1887, 79,
	31, 2308, 2287, 30, 2310, 98, 2292, 97, 2289, 2081,
	2080, 96, 95, 94, 93, 818, 92, 2184, 1196, 91,
	173, 2079, 1107, 817, 90, 89, 2307, 173, 88, 87,
	86, 85, 84, 83, 2326, 173, 173, 817, 817, 2081,
	2080, 2294, 819, 82, 81, 504, 2341, 2319, 2320, 501,
	2331, 2079, 2338, 1501, 1501, 173, 2309, 1687, 2325, 2318,
	173, 2348, 838, 2353, 2337, 78, 2349, 173, 842, 77,
	2339, 28, 24, 393, 393, 393, 102, 393, 23, 2370,
	2350, 2351, 2343, 74, 73, 26, 16, 10, 2356, 20,
	599, 2286, 173, 173, 2365, 585, 393, 2364, 57, 2362,
	173, 2373, 58, 818, 56, 55, 54, 2334, 817, 2386,
	2384, 12, 50, 173, 49, 2387, 2372, 817, 817, 47,
	46, 45, 44, 1768, 1769, 1247, 2390, 8, 2312, 1107,
	1501, 1501, 1501, 101, 392, 41, 40, 2389, 100, 1057,
	173, 113, 173, 110, 572, 173, 1246, 1106, 112, 2395,
	2396, 109, 111, 114, 106, 107, 108, 105, 2411, 104,
	2422, 2410, 37, 2424, 36, 2423, 35, 34, 2, 1,
	2428, 0, 0, 0, 173, 0, 978, 979, 980, 981,
	982, 0, 2426, 2081, 2080, 0, 991, 2440, 2439, 0,
	0, 173, 173, 2438, 2425, 2079, 999, 0, 173, 2458,
	0, 2451, 0, 0, 1107, 0, 0, 2463, 2455, 2460,
	2456, 2457, 173, 2461, 2462, 2416, 0, 0, 0, 0,
	0, 0, 0, 2472, 2470, 733, 2476, 0, 0, 0,
	0, 1774, 0, 0, 0, 0, 0, 2481, 0, 2480,
	0, 0, 0, 0, 0, 0, 1246, 1246, 0, 0,
	2489, 742, 746, 2488, 752, 2495, 2494, 1280, 0, 0,
	0, 0, 2401, 0, 393, 0, 819, 0, 0, 0,
	393, 393, 173, 1108, 393, 2504, 0, 0, 0, 1566,
	0, 0, 1566, 0, 0, 1278, 0, 2417, 2418, 2419,
	1850, 1784, 2503, 0, 0, 0, 393, 1856, 1857, 0,
	0, 0, 1579, 0, 0, 1864, 0, 0, 0, 1053,
	1053, 1869, 1870, 1872, 1874, 1875, 585, 0, 0, 1278,
	393, 0, 1882, 0, 0, 0, 1885, 0, 0, 0,
	0, 1107, 0, 1279, 393, 0, 1247, 0, 0, 1501,
	1501, 0, 0, 0, 1208, 0, 1208, 0, 508, 0,
	0, 393, 0, 0, 819, 1909, 0, 1280, 1280, 0,
	393, 1107, 1919, 0, 1785, 0, 0, 0, 1278, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 1687, 0, 0, 0, 1768, 1769, 0, 0,
	0, 0, 1247, 0, 0, 1687, 0, 0, 1501, 1501,
	1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
	1501, 1501, 1501, 1501, 1501, 1501, 1501, 0, 1501, 0,
	1768, 1769, 0, 1786, 1787, 1788, 0, 0, 0, 1278,
	393, 0, 0, 1279, 1279, 0, 2146, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	585, 585, 0, 0, 0, 1108, 0, 1777, 1778, 1770,
	1771, 1772, 1773, 1775, 1776, 1278, 1278, 0, 0, 0,
	0, 0, 0, 1783, 1278, 1278, 0, 0, 0, 39,
	1992, 0, 0, 1243, 0, 0, 0, 0, 0, 0,
	1277, 0, 42, 0, 1774, 0, 818, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 1278, 0, 0,
	0, 0, 0, 0, 1357, 0, 1362, 0, 0, 0,
	0, 752, 1369, 0, 1277, 0, 0, 0, 1774, 0,
	0, 0, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1784, 1411, 0, 1413, 1414, 1415,
	1416, 393, 0, 0, 0, 0, 1789, 1566, 0, 0,
	0, 0, 0, 1277, 1439, 0, 757, 1566, 0, 63,
	0, 991, 1108, 1243, 1243, 0, 1107, 0, 1784, 0,
	0, 2076, 0, 0, 0, 1724, 1725, 604, 71, 0,
	1480, 1481, 0, 0, 1497, 0, 1509, 1511, 1516, 1519,
	1520, 1521, 1108, 0, 0, 0, 0, 0, 0, 0,
	1579, 0, 1208, 0, 0, 0, 0, 1785, 0, 2112,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 393, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 1785, 0, 0, 0, 2138, 0, 1278, 0, 0,
	1277, 1277, 1791, 1792, 1793, 2140, 0, 0, 0, 1277,
	1277, 0, 0, 0, 0, 119, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 459, 0,
	0, 99, 1277, 565, 0, 0, 573, 0, 2163, 0,
	0, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 0, 0,
	134, 0, 734, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 1780, 1781,
	1782, 0, 0, 1779, 1777, 1778, 1770, 1771, 1772, 1773,
	1775, 1776, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 393, 126, 0, 757, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 1566, 757, 0,
	0, 2195, 2196, 1579, 0, 0, 0, 1501, 0, 0,
	118, 0, 1107, 0, 0, 0, 0, 2076, 757, 0,
	0, 0, 0, 2229, 0, 2230, 0, 393, 2232, 2233,
	0, 393, 0, 2237, 0, 0, 0, 733, 1078, 0,
	0, 2076, 0, 757, 1613, 0, 2076, 1108, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 941, 1277, 0, 0, 746, 0, 1213, 1278, 1213,
	0, 1958, 1959, 0, 0, 1246, 0, 0, 0, 0,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 1246,
	818, 0, 0, 1579, 0, 2293, 0, 0, 2295, 0,
	0, 818, 0, 0, 1278, 0, 393, 0, 0, 2076,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 0,
	2026, 0, 0, 0, 2327, 0, 0, 0, 1246, 2076,
	0, 0, 0, 0, 393, 0, 0, 0, 948, 0,
	0, 757, 0, 0, 0, 1278, 0, 0, 0, 2138,
	2138, 0, 0, 0, 1708, 1709, 1280, 0, 0, 0,
	1714, 0, 0, 0, 0, 0, 0, 1768, 1769, 2361,
	1786, 1787, 1788, 0, 1566, 0, 0, 0, 0, 0,
	0, 1208, 0, 2145, 0, 0, 0, 0, 0, 1246,
	1280, 0, 1733, 940, 941, 573, 0, 0, 958, 1740,
	0, 0, 1744, 0, 0, 0, 2377, 2378, 0, 0,
	0, 0, 0, 1108, 393, 0, 943, 0, 0, 1758,
	1783, 0, 0, 0, 0, 1246, 1246, 2394, 0, 0,
	0, 0, 1279, 0, 1246, 1246, 0, 0, 0, 1280,
	942, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 2409, 0, 757, 0, 0, 393,
	1516, 1516, 1516, 0, 0, 0, 1279, 1246, 0, 0,
	0, 959, 0, 2076, 0, 1774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 2361, 0,
	0, 585, 0, 0, 0, 0, 0, 0, 0, 1277,
	1280, 948, 0, 0, 0, 757, 757, 0, 0, 0,
	0, 733, 393, 1789, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2469, 733, 0, 818,
	1569, 819, 0, 565, 0, 1784, 1280, 1280, 746, 0,
	0, 0, 819, 746, 0, 1280, 1280, 0, 0, 752,
	1277, 0, 0, 0, 987, 0, 990, 0, 0, 0,
	0, 958, 0, 995, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 0, 0, 1279, 1107, 1280, 0,
	1912, 0, 1243, 0, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1930, 0, 0, 0, 0, 0, 1785, 0,
	0, 0, 1279, 1279, 0, 0, 1243, 0, 0, 585,
	585, 1279, 1279, 0, 0, 0, 0, 1246, 0, 0,
	0, 0, 585, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1952, 0, 0, 0, 0, 1369,
	0, 0, 0, 0, 1279, 1956, 0, 0, 1957, 0,
	0, 0, 0, 0, 0, 1243, 1643, 0, 0, 0,
	1962, 0, 0, 0, 0, 0, 0, 752, 752, 1971,
	0, 0, 0, 1107, 0, 0, 0, 1975, 0, 71,
	1930, 0, 0, 0, 1074, 1780, 1781, 1782, 0, 2277,
	1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 0,
	1999, 0, 0, 0, 2001, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 1243, 0, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 818, 1280, 0,
	2301, 0, 0, 0, 0, 0, 0, 2032, 2033, 0,
	0, 0, 0, 0, 0, 0, 2039, 2040, 2041, 0,
	0, 0, 1243, 1243, 0, 0, 0, 0, 0, 0,
	0, 1243, 1243, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 2052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1690,
	752, 1692, 0, 746, 1243, 1066, 0, 0, 2355, 0,
	0, 0, 0, 2073, 1279, 0, 0, 0, 0, 0,
	0, 38, 1706, 0, 1107, 0, 0, 0, 1108, 0,
	0, 0, 39, 0, 0, 0, 0, 0, 1246, 1107,
	0, 0, 0, 0, 0, 42, 0, 0, 1768, 1769,
	0, 1786, 1787, 1788, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 1053, 1965, 0, 0, 48, 0, 0,
	0, 0, 585, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 818, 818,
	565, 565, 0, 0, 1246, 0, 59, 0, 0, 0,
	0, 1783, 0, 60, 0, 61, 0, 0, 2147, 0,
	0, 0, 2150, 2151, 0, 0, 0, 2153, 0, 0,
	0, 0, 0, 0, 2155, 0, 2157, 0, 0, 0,
	0, 0, 63, 1429, 1108, 0, 0, 0, 0, 0,
	0, 0, 2164, 0, 0, 1246, 573, 0, 0, 1280,
	0, 990, 0, 0, 0, 0, 1774, 0, 0, 818,
	0, 0, 0, 0, 1243, 0, 0, 0, 818, 818,
	0, 0, 0, 819, 0, 2173, 940, 941, 0, 960,
	961, 962, 970, 971, 972, 0, 0, 0, 819, 0,
	733, 0, 963, 0, 1789, 0, 733, 733, 1107, 943,
	733, 0, 974, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 1784, 0, 734, 0,
	0, 0, 1855, 942, 0, 1279, 2219, 0, 0, 957,
	0, 0, 0, 0, 1074, 0, 0, 0, 119, 66,
	0, 67, 0, 0, 0, 0, 1880, 71, 0, 0,
	0, 0, 0, 71, 132, 0, 1280, 0, 0, 0,
	1892, 459, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1108, 0, 1903, 0, 0,
	0, 1279, 0, 134, 948, 0, 1195, 0, 0, 1785,
	1108, 0, 0, 2269, 2270, 1195, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 975, 0, 0, 0, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 133,
	0, 0, 973, 0, 2282, 819, 963, 126, 0, 0,
	2285, 0, 1279, 943, 127, 0, 974, 965, 0, 819,
	819, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 1954, 942, 0, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 964,
	71, 0, 71, 0, 2317, 1243, 1780, 1781, 1782, 0,
	0, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776,
	0, 71, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 959, 948, 819,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1243, 0, 968, 0, 0, 0, 0, 967, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 2367, 1108,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 1243, 0, 0, 1768, 1769, 733, 1786, 1787,
	1788, 0, 0, 585, 0, 0, 0, 0, 0, 71,
	0, 966, 0, 964, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 1768, 1769,
	0, 1786, 1787, 1788, 0, 0, 1809, 0, 0, 0,
	0, 0, 0, 0, 1964, 0, 0, 0, 1783, 0,
	0, 0, 0, 0, 0, 0, 0, 2437, 2437, 940,
	941, 959, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 2452, 0, 963, 0, 968, 1429, 0,
	0, 1783, 943, 1643, 733, 974, 0, 0, 0, 0,
	0, 0, 2437, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 1774, 0, 0, 942, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1790, 0, 0, 0, 0, 0,
	1768, 1769, 0, 1786, 1787, 1788, 1774, 0, 0, 0,
	2437, 1789, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 1784, 0, 0, 0, 948, 0, 0,
	1808, 0, 0, 990, 1789, 0, 0, 0, 0, 0,
	0, 0, 0, 1783, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 0, 0, 0, 1784, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 734, 0, 733,
	38, 0, 0, 734, 734, 0, 0, 734, 0, 0,
	965, 39, 121, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 42, 0, 1785, 0, 1774, 0,
	0, 436, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 964, 2231, 43, 0, 48, 2235, 0, 0,
	71, 0, 38, 0, 0, 0, 71, 0, 0, 1785,
	0, 0, 0, 39, 0, 0, 1789, 51, 0, 0,
	0, 53, 0, 0, 0, 59, 42, 0, 124, 0,
	71, 0, 60, 71, 61, 0, 0, 0, 1784, 0,
	959, 0, 0, 573, 0, 0, 0, 0, 48, 0,
	0, 0, 62, 0, 0, 0, 968, 0, 0, 0,
	0, 63, 0, 1780, 1781, 1782, 0, 0, 1779, 1777,
	1778, 1770, 1771, 1772, 1773, 1775, 1776, 59, 0, 0,
	0, 0, 0, 0, 60, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1780, 1781, 1782, 0,
	0, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776,
	0, 1785, 2302, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 64, 0, 0, 0, 0, 0, 65, 1760,
	2336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 119, 66, 0,
	67, 0, 68, 0, 125, 0, 0, 0, 0, 69,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 99, 64, 0, 0, 0, 1780, 1781,
	1782, 0, 122, 1779, 1777, 1778, 1770, 1771, 1772, 1773,
	1775, 1776, 134, 0, 0, 0, 0, 0, 0, 119,
	66, 0, 67, 0, 0, 0, 0, 0, 0, 71,
	2383, 103, 0, 0, 0, 132, 0, 0, 0, 0,
	120, 0, 459, 0, 734, 99, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 127, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2413, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 4, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 127, 0, 1458, 0, 623,
	612, 613, 610, 611, 602, 0, 0, 0, 1643, 0,
	0, 734, 0, 0, 437, 175, 176, 1455, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 332, 655, 334, 656, 181, 657, 658, 0, 182,
	338, 339, 183, 184, 608, 639, 659, 660, 342, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	1456, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 354, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 221, 734, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 653, 691, 230, 692, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	693, 239, 240, 242, 241, 591, 0, 620, 649, 243,
	673, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 694, 249, 695, 643, 250, 251, 252, 253,
	254, 71, 255, 644, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 674, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 696, 278, 279, 597, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 637, 292, 281,
	282, 293, 697, 294, 675, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 676, 299, 300, 645, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	677, 678, 0, 0, 311, 312, 646, 647, 618, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 638,
	321, 0, 384, 322, 323, 324, 385, 679, 1454, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	592, 0, 0, 0, 0, 71, 590, 0, 0, 0,
	0, 588, 589, 1457, 0, 0, 0, 0, 2344, 0,
	598, 1452, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 1110, 177, 1111, 1112, 1113, 1114, 331, 1115,
	1116, 1117, 1118, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 1119, 182, 338, 339, 183, 184, 1120,
	1121, 340, 341, 342, 1122, 185, 343, 1123, 821, 1124,
	186, 187, 188, 990, 189, 1125, 190, 191, 192, 1126,
	685, 193, 194, 195, 1127, 1128, 1130, 1129, 1131, 1132,
	1133, 196, 197, 394, 198, 344, 199, 345, 346, 1134,
	200, 1135, 201, 1136, 202, 1137, 1138, 203, 204, 1139,
	205, 1140, 0, 1141, 347, 206, 207, 208, 348, 349,
	1142, 1143, 1144, 209, 210, 350, 351, 352, 0, 211,
	1145, 212, 1146, 1147, 686, 1148, 213, 353, 1149, 354,
	1150, 0, 214, 215, 216, 217, 355, 356, 688, 1151,
	221, 1152, 218, 1153, 687, 219, 357, 220, 358, 359,
	360, 361, 362, 1154, 363, 1155, 689, 222, 223, 224,
	690, 225, 226, 227, 1156, 229, 228, 1157, 364, 691,
	230, 692, 1158, 231, 232, 1159, 1160, 233, 0, 234,
	235, 236, 238, 365, 237, 693, 239, 240, 242, 241,
	1161, 1162, 1163, 366, 243, 367, 244, 245, 1164, 246,
	1165, 1166, 247, 1167, 1168, 248, 368, 694, 249, 695,
	369, 250, 251, 252, 253, 254, 1169, 255, 370, 256,
	371, 257, 1170, 258, 259, 260, 261, 262, 372, 263,
	264, 1171, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 1172, 277, 696, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 1173, 289, 374, 288,
	290, 291, 1174, 292, 281, 282, 293, 697, 294, 375,
	376, 295, 1175, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 1176, 303, 1177, 304, 305, 306, 307,
	308, 309, 310, 1178, 379, 380, 381, 1179, 1180, 311,
	312, 382, 383, 1181, 313, 314, 315, 316, 1182, 1183,
	317, 318, 319, 320, 1184, 321, 1185, 384, 322, 323,
	324, 385, 386, 1186, 1187, 325, 1188, 1189, 1190, 1191,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 1559, 0, 0, 0, 0, 0, 0,
	0, 0, 1560, 175, 176, 1110, 177, 1111, 1112, 1113,
	1114, 331, 1115, 1116, 1117, 1118, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 1119, 182, 338, 339,
	183, 184, 1120, 1121, 340, 341, 342, 1122, 185, 343,
	1123, 821, 1124, 186, 187, 188, 0, 189, 1125, 190,
	191, 192, 1126, 685, 193, 194, 195, 1127, 1128, 1130,
	1129, 1131, 1132, 1133, 196, 197, 394, 198, 344, 199,
	345, 346, 1134, 200, 1135, 201, 1136, 202, 1137, 1138,
	203, 204, 1139, 205, 1140, 0, 1141, 347, 206, 207,
	208, 348, 349, 1142, 1143, 1144, 209, 210, 350, 351,
	352, 0, 211, 1145, 212, 1146, 1147, 686, 1148, 213,
	353, 1149, 354, 1150, 0, 214, 215, 216, 217, 355,
	356, 688, 1151, 221, 1152, 218, 1153, 687, 219, 357,
	220, 358, 359, 360, 361, 362, 1154, 363, 1155, 689,
	222, 223, 224, 690, 225, 226, 227, 1156, 229, 228,
	1157, 364, 691, 230, 692, 1158, 231, 232, 1159, 1160,
	233, 0, 234, 235, 236, 238, 365, 237, 693, 239,
	240, 242, 241, 1161, 1162, 1163, 366, 243, 367, 244,
	245, 1164, 246, 1165, 1166, 247, 1167, 1168, 248, 368,
	694, 249, 695, 369, 250, 251, 252, 253, 254, 1169,
	255, 370, 256, 371, 257, 1170, 258, 259, 260, 261,
	262, 372, 263, 264, 1171, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 1172, 277, 696,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 1173,
	289, 374, 288, 290, 291, 1174, 292, 281, 282, 293,
	697, 294, 375, 376, 295, 1175, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 1176, 303, 1177, 304,
	305, 306, 307, 308, 309, 310, 1178, 379, 380, 381,
	1179, 1180, 311, 312, 382, 383, 1181, 313, 314, 315,
	316, 1182, 1183, 317, 318, 319, 320, 1184, 321, 1185,
	384, 322, 323, 324, 385, 386, 1186, 1187, 325, 1188,
	1189, 1190, 1191, 326, 327, 328, 329, 330, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2191, 175, 176, 1110,
	177, 1111, 1112, 1113, 1114, 331, 1115, 1116, 1117, 1118,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	1119, 182, 338, 339, 183, 184, 1120, 1121, 340, 341,
	342, 1122, 185, 343, 1123, 821, 1124, 186, 187, 188,
	0, 189, 1125, 190, 191, 192, 1126, 685, 193, 194,
	195, 1127, 1128, 1130, 1129, 1131, 1132, 1133, 196, 197,
	394, 198, 344, 199, 345, 346, 1134, 200, 1135, 201,
	1136, 202, 1137, 1138, 203, 204, 1139, 205, 1140, 0,
	1141, 347, 206, 207, 208, 348, 349, 1142, 1143, 1144,
	209, 210, 350, 351, 352, 0, 211, 1145, 212, 1146,
	1147, 686, 1148, 213, 353, 1149, 354, 1150, 0, 214,
	215, 216, 217, 355, 356, 688, 1151, 221, 1152, 218,
	1153, 687, 219, 357, 220, 358, 359, 360, 361, 362,
	1154, 363, 1155, 689, 222, 223, 224, 690, 225, 226,
	227, 1156, 229, 228, 1157, 364, 691, 230, 692, 1158,
	231, 232, 1159, 1160, 233, 0, 234, 235, 236, 238,
	365, 237, 693, 239, 240, 242, 241, 1161, 1162, 1163,
	366, 243, 367, 244, 245, 1164, 246, 1165, 1166, 247,
	1167, 1168, 248, 368, 694, 249, 695, 369, 250, 251,
	252, 253, 254, 1169, 255, 370, 256, 371, 257, 1170,
	258, 259, 260, 261, 262, 372, 263, 264, 1171, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 1172, 277, 696, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 1173, 289, 374, 288, 290, 291, 1174,
	292, 281, 282, 293, 697, 294, 375, 376, 295, 1175,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	1176, 303, 1177, 304, 305, 306, 307, 308, 309, 310,
	1178, 379, 380, 381, 1179, 1180, 311, 312, 382, 383,
	1181, 313, 314, 315, 316, 1182, 1183, 317, 318, 319,
	320, 1184, 321, 1185, 384, 322, 323, 324, 385, 386,
	1186, 1187, 325, 1188, 1189, 1190, 1191, 326, 327, 328,
	329, 330, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 175, 176,
	1110, 177, 1111, 1112, 1113, 1114, 331, 1115, 1116, 1117,
	1118, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 1119, 182, 338, 339, 183, 184, 1120, 1121, 340,
	341, 342, 1122, 185, 343, 1123, 821, 1124, 186, 187,
	188, 0, 189, 1125, 190, 191, 192, 1126, 685, 193,
	194, 195, 1127, 1128, 1130, 1129, 1131, 1132, 1133, 196,
	197, 394, 198, 344, 199, 345, 346, 1134, 200, 1135,
	201, 1136, 202, 1137, 1138, 203, 204, 1139, 205, 1140,
	0, 1141, 347, 206, 207, 208, 348, 349, 1142, 1143,
	1144, 209, 210, 350, 351, 352, 0, 211, 1145, 212,
	1146, 1147, 686, 1148, 213, 353, 1149, 354, 1150, 0,
	214, 215, 216, 217, 355, 356, 688, 1151, 221, 1152,
	218, 1153, 687, 219, 357, 220, 358, 359, 360, 361,
	362, 1154, 363, 1155, 689, 222, 223, 224, 690, 225,
	226, 227, 1156, 229, 228, 1157, 364, 691, 230, 692,
	1158, 231, 232, 1159, 1160, 233, 0, 234, 235, 236,
	238, 365, 237, 693, 239, 240, 242, 241, 1161, 1162,
	1163, 366, 243, 367, 244, 245, 1164, 246, 1165, 1166,
	247, 1167, 1168, 248, 368, 694, 249, 695, 369, 250,
	251, 252, 253, 254, 1169, 255, 370, 256, 371, 257,
	1170, 258, 259, 260, 261, 262, 372, 263, 264, 1171,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 1172, 277, 696, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 1173, 289, 374, 288, 290, 291,
	1174, 292, 281, 282, 293, 697, 294, 375, 376, 295,
	1175, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 1176, 303, 1177, 304, 305, 306, 307, 308, 309,
	310, 1178, 379, 380, 381, 1179, 1180, 311, 312, 382,
	383, 1181, 313, 314, 315, 316, 1182, 1183, 317, 318,
	319, 320, 1184, 321, 1185, 384, 322, 323, 324, 385,
	386, 1186, 1187, 325, 1188, 1189, 1190, 1191, 326, 327,
	328, 329, 330, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 332, 655, 334, 656, 181,
	657, 658, 0, 182, 338, 339, 183, 184, 608, 639,
	659, 660, 342, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 586, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 354, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 693, 239, 240, 242, 241, 591,
	0, 620, 649, 243, 673, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 694, 249, 695, 643,
	250, 251, 252, 253, 254, 0, 255, 644, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 674, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 696, 278, 279, 597, 280,
	0, 284, 285, 286, 287, 132, 289, 374, 288, 290,
	291, 637, 292, 281, 282, 293, 697, 294, 675, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 676, 299,
	300, 645, 0, 303, 134, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 677, 678, 0, 0, 311, 312,
	646, 647, 618, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 638, 321, 0, 384, 322, 323, 324,
	820, 679, 0, 0, 325, 0, 0, 0, 126, 326,
	327, 328, 329, 330, 592, 127, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 574,
	601, 623, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 332, 655, 334, 656, 181, 657, 658,
	0, 182, 338, 339, 183, 184, 608, 639, 659, 660,
	342, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 354, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 693, 239, 240, 242, 241, 591, 0, 620,
	649, 243, 673, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 694, 249, 695, 643, 250, 251,
	252, 253, 254, 0, 255, 644, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 674, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 696, 278, 279, 597, 280, 0, 284,
	285, 286, 287, 132, 289, 374, 288, 290, 291, 637,
	292, 281, 282, 293, 697, 294, 675, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 676, 299, 300, 645,
	0, 303, 134, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 677, 678, 0, 0, 311, 312, 646, 647,
	618, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 638, 321, 0, 384, 322, 323, 324, 820, 679,
	0, 0, 325, 0, 0, 0, 126, 326, 327, 328,
	329, 330, 592, 127, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 623, 612, 613, 610, 611,
	602, 0, 993, 0, 0, 0, 0, 0, 601, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 332, 655, 334,
	656, 181, 657, 658, 0, 182, 338, 339, 183, 184,
	608, 639, 659, 660, 342, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	354, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 693, 239, 240, 242,
	241, 591, 0, 620, 649, 243, 673, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 694, 249,
	695, 643, 250, 251, 252, 253, 254, 0, 255, 644,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 674,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 696, 278, 279,
	597, 280, 0, 284, 285, 286, 287, 132, 289, 374,
	288, 290, 291, 637, 292, 281, 282, 293, 697, 294,
	675, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	676, 299, 300, 645, 0, 303, 134, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 677, 678, 0, 0,
	311, 312, 646, 647, 618, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 638, 321, 0, 384, 322,
	323, 324, 820, 679, 0, 0, 325, 0, 0, 0,
	126, 326, 327, 328, 329, 330, 592, 127, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 623,
	612, 613, 610, 611, 602, 0, 993, 0, 0, 0,
	0, 0, 601, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 332, 655, 334, 656, 181, 657, 658, 1512, 182,
	338, 339, 183, 184, 608, 639, 659, 660, 342, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 1517, 686,
	0, 213, 652, 0, 354, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 221, 0, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 1513, 653, 691, 230, 692, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	693, 239, 240, 242, 241, 591, 0, 620, 649, 243,
	673, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 694, 249, 695, 643, 250, 251, 252, 253,
	254, 0, 255, 644, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 674, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 696, 278, 279, 597, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 637, 292, 281,
	282, 293, 697, 294, 675, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 676, 299, 300, 645, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	677, 678, 0, 1514, 311, 312, 646, 647, 618, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 638,
	321, 0, 384, 322, 323, 324, 385, 679, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 582, 601, 623, 612, 613,
	610, 611, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 332,
	655, 334, 656, 181, 657, 658, 0, 182, 338, 339,
	183, 184, 608, 639, 659, 660, 342, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 586, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 354, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 221, 0, 218, 0, 687, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 653, 691, 230, 692, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 693, 239,
	240, 242, 241, 591, 0, 620, 649, 243, 673, 244,
	245, 0, 246, 584, 0, 247, 0, 0, 248, 368,
	694, 249, 695, 643, 250, 251, 252, 253, 254, 0,
	255, 644, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 674, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 696,
	278, 279, 597, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 637, 292, 281, 282, 293,
	697, 294, 675, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 676, 299, 300, 645, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 677, 678,
	0, 0, 311, 312, 646, 647, 618, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 638, 321, 0,
	384, 322, 323, 324, 385, 679, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 623, 612, 613, 610, 611, 602, 0, 598, 0,
	0, 0, 0, 0, 601, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 332, 655, 334, 656, 181, 657, 658,
	0, 182, 338, 339, 183, 184, 608, 639, 659, 660,
	342, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 354, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 693, 239, 240, 242, 241, 591, 2121, 620,
	649, 243, 673, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 694, 249, 695, 643, 250, 251,
	252, 253, 254, 0, 255, 644, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 674, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 696, 278, 279, 597, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 637,
	292, 281, 282, 293, 697, 294, 675, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 676, 299, 300, 645,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 677, 678, 0, 0, 311, 312, 646, 647,
	618, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 638, 321, 0, 384, 322, 323, 324, 385, 679,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 1054, 623, 612, 613, 610,
	611, 602, 598, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	640, 605, 0, 0, 0, 178, 179, 180, 332, 655,
	334, 656, 181, 657, 658, 0, 182, 338, 339, 183,
	184, 608, 639, 659, 660, 342, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 652,
	0, 354, 0, 0, 214, 215, 216, 217, 648, 650,
	688, 0, 221, 1371, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 693, 239, 240,
	242, 241, 591, 0, 620, 649, 243, 673, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 694,
	249, 695, 643, 250, 251, 252, 253, 254, 0, 255,
	644, 256, 371, 257, 1370, 258, 259, 260, 261, 262,
	674, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 696, 278,
	279, 597, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 637, 292, 281, 282, 293, 697,
	294, 675, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 676, 299, 300, 645, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 677, 678, 0,
	0, 311, 312, 646, 647, 618, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 638, 321, 0, 384,
	322, 323, 324, 385, 679, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 592, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	623, 612, 613, 610, 611, 602, 0, 598, 0, 0,
	0, 0, 0, 601, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 332, 655, 334, 656, 181, 657, 658, 0,
	182, 338, 339, 183, 184, 608, 639, 659, 660, 342,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 586, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 652, 0, 354, 0, 0, 214, 215,
	216, 217, 648, 650, 688, 0, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 693, 239, 240, 242, 241, 591, 0, 620, 649,
	243, 673, 244, 245, 0, 246, 584, 0, 247, 0,
	0, 248, 368, 694, 249, 695, 643, 250, 251, 252,
	253, 254, 0, 255, 644, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 674, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 696, 278, 279, 597, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 637, 292,
	281, 282, 293, 697, 294, 675, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 676, 299, 300, 645, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 677, 678, 0, 0, 311, 312, 646, 647, 618,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	638, 321, 0, 384, 322, 323, 324, 385, 679, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 592, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 623, 612, 613, 610, 611, 602,
	0, 598, 0, 0, 0, 0, 0, 601, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 640, 605,
	0, 0, 0, 178, 179, 180, 332, 655, 334, 656,
	181, 657, 658, 0, 182, 338, 339, 183, 184, 608,
	639, 659, 660, 342, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 0,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 686, 0, 213, 652, 0, 354,
	0, 0, 214, 215, 216, 217, 648, 650, 688, 0,
	221, 0, 218, 0, 687, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 0, 653, 691,
	230, 692, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 693, 239, 240, 242, 241,
	591, 0, 620, 649, 243, 673, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 694, 249, 695,
	643, 250, 251, 252, 253, 254, 0, 255, 644, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 674, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 696, 278, 279, 597,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 637, 292, 281, 282, 293, 697, 294, 675,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 676,
	299, 300, 645, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 677, 678, 0, 0, 311,
	312, 646, 647, 618, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 638, 321, 0, 384, 322, 323,
	324, 385, 679, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 592, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 0, 0,
	0, 0, 0, 997, 1447, 598, 0, 0, 0, 0,
	0, 601, 623, 612, 613, 610, 611, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 640, 605, 0, 0,
	0, 178, 179, 180, 332, 655, 334, 656, 181, 657,
	658, 0, 182, 338, 339, 183, 184, 608, 639, 659,
	660, 342, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 586, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 0,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 686, 0, 213, 652, 0, 354, 0, 0,
	214, 215, 216, 217, 648, 650, 688, 0, 221, 0,
	218, 0, 687, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 653, 691, 230, 692,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 693, 239, 240, 242, 241, 591, 0,
	620, 649, 243, 673, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 694, 249, 695, 643, 250,
	251, 252, 253, 254, 0, 255, 644, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 674, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 696, 278, 279, 597, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	637, 292, 281, 282, 293, 697, 294, 675, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 676, 299, 300,
	645, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 677, 678, 0, 0, 311, 312, 646,
	647, 618, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 638, 321, 0, 384, 322, 323, 324, 385,
	679, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 592, 0, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 623, 612, 613, 610,
	611, 602, 0, 598, 0, 0, 0, 0, 0, 601,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	640, 605, 0, 0, 0, 178, 179, 180, 332, 655,
	334, 656, 181, 657, 658, 0, 182, 338, 339, 183,
	184, 608, 639, 659, 660, 342, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 652,
	0, 354, 0, 0, 214, 215, 216, 217, 648, 650,
	688, 0, 221, 0, 218, 0, 687, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	653, 691, 230, 692, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 693, 239, 240,
	242, 241, 591, 0, 620, 649, 243, 673, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 694,
	249, 695, 643, 250, 251, 252, 253, 254, 0, 255,
	644, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	674, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 696, 278,
	279, 597, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 637, 292, 281, 282, 293, 697,
	294, 675, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 676, 299, 300, 645, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 677, 678, 0,
	0, 311, 312, 646, 647, 618, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 638, 321, 0, 384,
	322, 323, 324, 385, 679, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 592, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	623, 612, 613, 610, 611, 602, 0, 598, 2029, 0,
	0, 0, 0, 601, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 332, 655, 334, 656, 181, 657, 658, 0,
	182, 338, 339, 183, 184, 608, 639, 659, 660, 342,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 652, 0, 354, 0, 0, 214, 215,
	216, 217, 648, 650, 688, 0, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 693, 239, 240, 242, 241, 591, 0, 620, 649,
	243, 673, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 694, 249, 695, 643, 250, 251, 252,
	253, 254, 0, 255, 644, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 674, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 696, 278, 279, 597, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 637, 292,
	281, 282, 293, 697, 294, 675, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 676, 299, 300, 645, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 677, 678, 0, 0, 311, 312, 646, 647, 618,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	638, 321, 0, 384, 322, 323, 324, 385, 679, 1978,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 592, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 623, 612, 613, 610, 611, 602,
	0, 598, 0, 0, 0, 0, 0, 601, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 640, 605,
	0, 0, 0, 178, 179, 180, 332, 655, 334, 656,
	181, 657, 658, 0, 182, 338, 339, 183, 184, 608,
	639, 659, 660, 342, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 0,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 686, 0, 213, 652, 0, 354,
	0, 0, 214, 215, 216, 217, 648, 650, 688, 0,
	221, 0, 218, 0, 687, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 0, 653, 691,
	230, 692, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 693, 239, 240, 242, 241,
	591, 0, 620, 649, 243, 673, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 694, 249, 695,
	643, 250, 251, 252, 253, 254, 0, 255, 644, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 674, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 696, 278, 279, 597,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 637, 292, 281, 282, 293, 697, 294, 675,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 676,
	299, 300, 645, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 677, 678, 0, 0, 311,
	312, 646, 647, 618, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 638, 321, 0, 384, 322, 323,
	324, 385, 679, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 592, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 623, 612,
	613, 610, 611, 602, 0, 598, 1968, 0, 0, 0,
	0, 601, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 640, 605, 0, 0, 0, 178, 179, 180,
	332, 655, 334, 656, 181, 657, 658, 0, 182, 338,
	339, 183, 184, 608, 639, 659, 660, 342, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 632,
	633, 635, 0, 634, 636, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 596, 206,
	207, 208, 641, 642, 619, 0, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 686, 0,
	213, 652, 0, 354, 0, 0, 214, 215, 216, 217,
	648, 650, 688, 0, 221, 0, 218, 0, 687, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 653, 691, 230, 692, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 693,
	239, 240, 242, 241, 591, 0, 620, 649, 243, 673,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 694, 249, 695, 643, 250, 251, 252, 253, 254,
	0, 255, 644, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 674, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	696, 278, 279, 597, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 637, 292, 281, 282,
	293, 697, 294, 675, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 676, 299, 300, 645, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 677,
	678, 0, 0, 311, 312, 646, 647, 618, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 638, 321,
	0, 384, 322, 323, 324, 385, 679, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 592,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	588, 589, 1054, 623, 612, 613, 610, 611, 602, 598,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 332, 655, 334, 656, 181,
	657, 658, 0, 182, 338, 339, 183, 184, 608, 639,
	659, 660, 342, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 1517, 686, 0, 213, 652, 0, 354, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 693, 239, 240, 242, 241, 591,
	0, 620, 649, 243, 673, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 694, 249, 695, 643,
	250, 251, 252, 253, 254, 0, 255, 644, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 674, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 696, 278, 279, 597, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 637, 292, 281, 282, 293, 697, 294, 675, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 676, 299,
	300, 645, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 677, 678, 0, 0, 311, 312,
	646, 647, 618, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 638, 321, 0, 384, 322, 323, 324,
	385, 679, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 1562,
	601, 623, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 332, 655, 334, 656, 181, 657, 658,
	0, 182, 338, 339, 183, 184, 608, 639, 659, 660,
	342, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 354, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 693, 239, 240, 242, 241, 591, 0, 620,
	649, 243, 673, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 694, 249, 695, 643, 250, 251,
	252, 253, 254, 0, 255, 644, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 674, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 696, 278, 279, 597, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 637,
	292, 281, 282, 293, 697, 294, 675, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 676, 299, 300, 645,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 677, 678, 0, 0, 311, 312, 646, 647,
	618, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 638, 321, 0, 384, 322, 323, 324, 385, 679,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 1526, 601, 623,
	612, 613, 610, 611, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 332, 655, 334, 656, 181, 657, 658, 0, 182,
	338, 339, 183, 184, 608, 639, 659, 660, 342, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 354, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 221, 0, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 653, 691, 230, 692, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	693, 239, 240, 242, 241, 591, 0, 620, 649, 243,
	673, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 694, 249, 695, 643, 250, 251, 252, 253,
	254, 0, 255, 644, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 674, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 696, 278, 279, 597, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 637, 292, 281,
	282, 293, 697, 294, 675, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 676, 299, 300, 645, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	677, 678, 0, 0, 311, 312, 646, 647, 618, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 638,
	321, 0, 384, 322, 323, 324, 385, 679, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 1524, 601, 623, 612, 613,
	610, 611, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 332,
	655, 334, 656, 181, 657, 658, 0, 182, 338, 339,
	183, 184, 608, 639, 659, 660, 342, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 354, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 221, 0, 218, 0, 687, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 653, 691, 230, 692, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 693, 239,
	240, 242, 241, 591, 0, 620, 649, 243, 673, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	694, 249, 695, 643, 250, 251, 252, 253, 254, 0,
	255, 644, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 674, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 696,
	278, 279, 597, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 637, 292, 281, 282, 293,
	697, 294, 675, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 676, 299, 300, 645, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 677, 678,
	0, 0, 311, 312, 646, 647, 618, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 638, 321, 0,
	384, 322, 323, 324, 385, 679, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 1508, 601, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 332, 655, 334,
	656, 181, 657, 658, 0, 182, 338, 339, 183, 184,
	608, 639, 659, 660, 342, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	354, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 693, 239, 240, 242,
	241, 591, 0, 620, 649, 243, 673, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 694, 249,
	695, 643, 250, 251, 252, 253, 254, 0, 255, 644,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 674,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 696, 278, 279,
	597, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 637, 292, 281, 282, 293, 697, 294,
	675, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	676, 299, 300, 645, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 677, 678, 0, 0,
	311, 312, 646, 647, 618, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 638, 321, 0, 384, 322,
	323, 324, 385, 679, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 1496, 601, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 332, 655, 334, 656, 181,
	657, 658, 0, 182, 338, 339, 183, 184, 608, 639,
	659, 660, 342, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 354, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 693, 239, 240, 242, 241, 591,
	0, 620, 649, 243, 673, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 694, 249, 695, 643,
	250, 251, 252, 253, 254, 0, 255, 644, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 674, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 696, 278, 279, 597, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 637, 292, 281, 282, 293, 697, 294, 675, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 676, 299,
	300, 645, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 677, 678, 0, 0, 311, 312,
	646, 647, 618, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 638, 321, 0, 384, 322, 323, 324,
	385, 679, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 1494,
	601, 1486, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 332, 655, 334, 656, 181, 657, 658,
	0, 182, 338, 339, 183, 184, 608, 639, 659, 660,
	342, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 1489, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 354, 0, 0, 214,
	1490, 216, 217, 648, 650, 688, 0, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 232, 0, 0, 233, 0, 234, 1491, 1488, 238,
	365, 237, 693, 239, 240, 242, 241, 591, 0, 620,
	649, 243, 673, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 694, 249, 695, 643, 250, 251,
	252, 253, 254, 0, 255, 644, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 674, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 696, 278, 279, 597, 280, 0, 284,
	285, 286, 1492, 0, 289, 374, 288, 290, 291, 637,
	292, 281, 282, 293, 697, 294, 675, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 676, 299, 300, 645,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 677, 678, 0, 0, 311, 312, 646, 647,
	618, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 638, 321, 0, 384, 322, 323, 324, 385, 679,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	1487, 330, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 1483, 601, 1486,
	612, 613, 610, 611, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 332, 655, 334, 656, 181, 657, 658, 0, 182,
	338, 339, 183, 184, 608, 639, 659, 660, 342, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 1489, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 354, 0, 0, 214, 1490, 216,
	217, 648, 650, 688, 0, 221, 0, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 653, 691, 230, 692, 0, 231, 232,
	0, 0, 233, 0, 234, 1491, 1488, 238, 365, 237,
	693, 239, 240, 242, 241, 591, 0, 620, 649, 243,
	673, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 694, 249, 695, 643, 250, 251, 252, 253,
	254, 0, 255, 644, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 674, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 696, 278, 279, 597, 280, 0, 284, 285, 286,
	1492, 0, 289, 374, 288, 290, 291, 637, 292, 281,
	282, 293, 697, 294, 675, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 676, 299, 300, 645, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	677, 678, 0, 0, 311, 312, 646, 647, 618, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 638,
	321, 0, 384, 322, 323, 324, 385, 679, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 1487, 330,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 623, 612, 613, 610, 611, 602, 0,
	598, 0, 0, 0, 0, 0, 601, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 332, 655, 334, 656, 181,
	657, 658, 0, 182, 338, 339, 183, 184, 608, 639,
	659, 660, 342, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 354, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 693, 239, 240, 242, 241, 591,
	0, 620, 649, 243, 673, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 694, 249, 695, 643,
	250, 251, 252, 253, 254, 0, 255, 644, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 674, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 696, 278, 279, 597, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 637, 292, 281, 282, 293, 697, 294, 675, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 676, 299,
	300, 645, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 677, 678, 0, 0, 311, 312,
	646, 647, 618, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 638, 321, 0, 384, 322, 323, 324,
	385, 679, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 623, 612, 613,
	610, 611, 602, 0, 598, 1442, 0, 0, 0, 0,
	601, 0, 0, 175, 176, 1358, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 332,
	655, 334, 656, 181, 657, 658, 0, 182, 338, 339,
	183, 184, 608, 639, 659, 660, 342, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 354, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 221, 0, 218, 0, 687, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 653, 691, 230, 692, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 693, 239,
	240, 242, 241, 591, 0, 620, 649, 243, 673, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	694, 249, 695, 643, 250, 251, 252, 253, 254, 0,
	255, 644, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 674, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 696,
	278, 279, 597, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 637, 292, 281, 282, 293,
	697, 294, 675, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 676, 299, 300, 645, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 677, 678,
	0, 0, 311, 312, 646, 647, 618, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 638, 321, 0,
	384, 322, 323, 324, 385, 679, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 764, 601, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 332, 655, 334,
	656, 181, 657, 658, 0, 182, 338, 339, 183, 184,
	608, 639, 659, 660, 342, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	354, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 693, 239, 240, 242,
	241, 591, 0, 620, 649, 243, 673, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 694, 249,
	695, 643, 250, 251, 252, 253, 254, 0, 255, 644,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 674,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 696, 278, 279,
	597, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 637, 292, 281, 282, 293, 697, 294,
	675, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	676, 299, 300, 645, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 677, 678, 0, 0,
	311, 312, 646, 647, 618, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 638, 321, 0, 384, 322,
	323, 324, 385, 679, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 762, 601, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 332, 655, 334, 656, 181,
	657, 658, 0, 182, 338, 339, 183, 184, 608, 639,
	659, 660, 342, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 686, 0, 213, 652, 0, 354, 0,
	0, 214, 215, 216, 217, 648, 650, 688, 0, 221,
	0, 218, 0, 687, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 689, 222, 223, 224, 690,
	225, 226, 227, 0, 229, 228, 0, 653, 691, 230,
	692, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 693, 239, 240, 242, 241, 591,
	0, 620, 649, 243, 673, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 694, 249, 695, 643,
	250, 251, 252, 253, 254, 0, 255, 644, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 674, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 696, 278, 279, 597, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 637, 292, 281, 282, 293, 697, 294, 675, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 676, 299,
	300, 645, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 677, 678, 0, 0, 311, 312,
	646, 647, 618, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 638, 321, 0, 384, 322, 323, 324,
	385, 679, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 623, 612, 613,
	610, 611, 602, 0, 598, 0, 0, 0, 0, 0,
	601, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 332,
	655, 334, 656, 181, 657, 658, 0, 182, 338, 339,
	183, 184, 608, 639, 659, 660, 342, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 2436, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 686, 0, 213,
	652, 0, 354, 0, 0, 214, 215, 216, 217, 648,
	650, 688, 0, 221, 0, 218, 0, 687, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 689,
	222, 223, 224, 690, 225, 226, 227, 0, 229, 228,
	0, 653, 691, 230, 692, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 693, 239,
	240, 242, 241, 591, 0, 620, 649, 243, 673, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	694, 249, 695, 643, 250, 251, 252, 253, 254, 0,
	255, 644, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 674, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 696,
	278, 279, 597, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 637, 292, 281, 282, 293,
	697, 294, 675, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 676, 299, 300, 645, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 677, 678,
	0, 0, 311, 312, 646, 647, 618, 313, 314, 2435,
	316, 0, 0, 317, 318, 319, 320, 638, 321, 0,
	384, 322, 323, 324, 385, 679, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 623, 612, 613, 610, 611, 602, 0, 598, 0,
	0, 0, 0, 0, 601, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 332, 655, 334, 656, 181, 657, 658,
	0, 182, 338, 339, 183, 184, 608, 639, 659, 660,
	342, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 354, 0, 0, 214,
	215, 216, 217, 648, 650, 688, 0, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 689, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 692, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 693, 239, 240, 242, 241, 591, 0, 620,
	649, 243, 673, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 694, 249, 695, 643, 250, 251,
	252, 253, 254, 0, 255, 644, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 674, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 696, 278, 279, 597, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 637,
	292, 281, 282, 293, 697, 294, 675, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 676, 299, 300, 645,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 677, 678, 0, 0, 311, 312, 646, 647,
	618, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 638, 321, 0, 384, 322, 323, 324, 385, 679,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 623, 612, 613, 610, 611,
	602, 0, 598, 0, 0, 0, 0, 0, 601, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 2434, 655, 334,
	656, 181, 657, 658, 0, 182, 338, 339, 183, 184,
	608, 639, 659, 660, 342, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 2436, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 652, 0,
	354, 0, 0, 214, 215, 216, 217, 648, 650, 688,
	0, 221, 0, 218, 0, 687, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 653,
	691, 230, 692, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 693, 239, 240, 242,
	241, 591, 0, 620, 649, 243, 673, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 694, 249,
	695, 643, 250, 251, 252, 253, 254, 0, 255, 644,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 674,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 696, 278, 279,
	597, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 637, 292, 281, 282, 293, 697, 294,
	675, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	676, 299, 300, 645, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 677, 678, 0, 0,
	311, 312, 646, 647, 618, 313, 314, 2435, 316, 0,
	0, 317, 318, 319, 320, 638, 321, 0, 384, 322,
	323, 324, 385, 679, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 623,
	612, 613, 610, 611, 602, 0, 598, 0, 0, 0,
	0, 0, 601, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 332, 655, 334, 656, 181, 657, 658, 0, 182,
	338, 339, 183, 184, 608, 639, 659, 660, 342, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 686,
	0, 213, 652, 0, 354, 0, 0, 214, 215, 216,
	217, 648, 650, 688, 0, 221, 0, 218, 0, 687,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 689, 222, 223, 224, 690, 225, 226, 227, 0,
	229, 228, 0, 653, 691, 230, 692, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	693, 239, 240, 242, 241, 0, 0, 620, 649, 243,
	673, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 694, 249, 695, 643, 250, 251, 252, 253,
	254, 0, 255, 644, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 674, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 696, 278, 279, 1506, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 637, 292, 281,
	282, 293, 697, 294, 675, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 676, 299, 300, 645, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	677, 678, 0, 0, 311, 312, 646, 647, 618, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 638,
	321, 0, 384, 322, 323, 324, 385, 679, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	623, 612, 613, 610, 611, 602, 1504, 0, 0, 0,
	0, 1502, 1503, 0, 0, 0, 175, 176, 0, 177,
	1505, 0, 0, 0, 640, 605, 601, 0, 0, 178,
	179, 180, 332, 655, 334, 656, 181, 657, 658, 0,
	182, 338, 339, 183, 184, 0, 639, 659, 660, 342,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 641, 642, 619, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	686, 0, 213, 652, 0, 354, 0, 0, 214, 215,
	216, 217, 648, 650, 688, 0, 221, 0, 218, 0,
	687, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 689, 222, 223, 224, 690, 225, 226, 227,
	0, 229, 228, 0, 653, 691, 230, 692, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 693, 239, 240, 242, 241, 0, 0, 620, 649,
	243, 673, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 694, 249, 695, 643, 250, 251, 252,
	253, 254, 0, 255, 644, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 674, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 696, 278, 279, 1506, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 637, 292,
	281, 282, 293, 697, 294, 675, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 676, 299, 300, 645, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 677, 678, 0, 0, 311, 312, 646, 647, 618,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	638, 321, 0, 384, 322, 323, 324, 385, 679, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 623, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 1505, 0, 0, 0, 640, 605, 601, 0, 0,
	178, 179, 180, 0, 655, 334, 656, 181, 657, 658,
	0, 182, 338, 339, 183, 184, 608, 639, 659, 660,
	342, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	2436, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 686, 0, 213, 652, 0, 354, 0, 0, 214,
	215, 216, 217, 648, 650, 0, 0, 221, 0, 218,
	0, 687, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 0, 222, 223, 224, 690, 225, 226,
	227, 0, 229, 228, 0, 653, 691, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 693, 239, 240, 242, 241, 591, 0, 620,
	649, 243, 673, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 694, 249, 695, 643, 250, 251,
	252, 253, 254, 0, 255, 644, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 674, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 696, 278, 279, 597, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 637,
	292, 281, 282, 293, 0, 294, 675, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 676, 299, 300, 645,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 677, 678, 0, 0, 311, 312, 646, 647,
	618, 313, 314, 2435, 316, 0, 0, 317, 318, 319,
	320, 638, 321, 0, 384, 322, 323, 324, 385, 679,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 175, 176,
	0, 177, 598, 0, 0, 0, 640, 0, 601, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 639, 340,
	341, 342, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 641, 642, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 686, 0, 213, 652, 0, 354, 0, 0,
	214, 215, 216, 217, 648, 650, 688, 0, 221, 0,
	218, 0, 687, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 653, 691, 230, 692,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 693, 239, 240, 242, 241, 0, 0,
	0, 649, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 694, 249, 695, 643, 250,
	251, 252, 253, 254, 0, 255, 644, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 696, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	637, 292, 281, 282, 293, 697, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	645, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 646,
	647, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 638, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 0, 325, 813, 0, 816, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 2078, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	821, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 355, 356,
	688, 0, 221, 0, 218, 0, 687, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	364, 691, 230, 692, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 693, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 694,
	249, 695, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 696, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 132, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 697,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 134, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 820, 386, 0, 0, 325, 574, 0,
	172, 126, 326, 327, 328, 329, 330, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 118, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 0, 214, 215,
	216, 217, 355, 356, 0, 0, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 737, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 132, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 134, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 820, 386, 0,
	0, 325, 0, 172, 0, 126, 326, 327, 328, 329,
	330, 0, 127, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 731,
	0, 1076, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	0, 214, 215, 216, 217, 355, 356, 0, 0, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	737, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 132, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 134, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	820, 386, 0, 0, 325, 574, 0, 172, 126, 326,
	327, 328, 329, 330, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 731, 0, 1076, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 355,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 132,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 134, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 820, 386, 0, 0, 325, 1826,
	0, 172, 126, 326, 327, 328, 329, 330, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 118, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 0, 214,
	215, 216, 217, 355, 356, 0, 0, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 737, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 730, 0, 172, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	731, 0, 736, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 355, 356, 0,
	0, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 737, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 172, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 731, 0, 736, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 737, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 0, 325,
	0, 172, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 731, 0, 736,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 0, 214,
	215, 216, 217, 355, 356, 0, 0, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 0, 172, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 1193, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 355, 356, 0,
	0, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 172, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 1644, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 0, 325,
	0, 172, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 1993,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 0, 214,
	215, 216, 217, 355, 356, 0, 0, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 623, 612, 613, 610, 611, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 1079, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 655, 334, 656, 181, 657,
	658, 0, 182, 338, 339, 183, 184, 0, 0, 659,
	660, 342, 0, 185, 343, 0, 821, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 661, 199, 662, 663, 0, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 619, 0,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 686, 0, 213, 353, 0, 354, 0, 0,
	214, 215, 216, 217, 355, 356, 688, 0, 221, 0,
	218, 0, 687, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 689, 222, 223, 224, 690, 225,
	226, 227, 0, 229, 228, 0, 364, 691, 230, 692,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 693, 239, 240, 242, 241, 0, 0,
	620, 366, 243, 673, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 694, 249, 695, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 674, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 696, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 697, 294, 675, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 676, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 677, 678, 0, 0, 311, 312, 382,
	383, 618, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	679, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 871, 0, 816, 875, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 821,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 686, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 355, 356, 688,
	0, 221, 0, 218, 0, 687, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 689, 222, 223,
	224, 690, 225, 226, 227, 0, 229, 228, 0, 364,
	691, 230, 692, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 693, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 694, 249,
	695, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 696, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 697, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 479, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 168, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 355,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 167, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 165, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 171, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 168, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 0, 214, 215, 216,
	217, 355, 356, 0, 0, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	167, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 816, 875,
	325, 0, 0, 873, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 171, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 821, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 686, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 688, 0, 221, 0, 218, 0, 687, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	689, 222, 223, 224, 690, 225, 226, 227, 0, 229,
	228, 0, 364, 691, 230, 692, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 693,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 694, 249, 695, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	696, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 697, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 168, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 355,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 167, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 816, 875, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 171, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	821, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 686, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 355, 356,
	688, 0, 221, 0, 218, 0, 687, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 689, 222,
	223, 224, 690, 225, 226, 227, 0, 229, 228, 0,
	364, 691, 230, 692, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 693, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 694,
	249, 695, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 696, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 697,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 355, 356, 0,
	0, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 816, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 171,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 821, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 686, 0, 213, 353, 0, 354,
	0, 0, 214, 215, 216, 217, 355, 356, 688, 0,
	221, 0, 218, 0, 687, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 689, 222, 223, 224,
	690, 225, 226, 227, 0, 229, 228, 0, 364, 691,
	230, 692, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 693, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 694, 249, 695,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 696, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 697, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 1582, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 1580, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	1621, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 1585, 0, 0, 0, 213, 353, 0, 354, 0,
	0, 214, 215, 216, 217, 355, 356, 0, 0, 221,
	1619, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 1584, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 1620, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 172, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 1582, 185, 343, 0, 0, 1577, 186, 187,
	188, 0, 189, 1580, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	1585, 0, 0, 0, 213, 353, 0, 354, 0, 0,
	214, 215, 216, 217, 1576, 356, 0, 0, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	1584, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 1583, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 791, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 0, 214, 215, 216, 217, 355, 356, 0, 0,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 737, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 743, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 745, 356,
	0, 0, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 737, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 739, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	741, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 737, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 411, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 410, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 0, 214, 215,
	216, 217, 355, 356, 0, 0, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 409, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 1565, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 0, 214, 215, 216,
	217, 355, 356, 0, 0, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 172, 2139,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 2139, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 355,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 2136, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 172, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 355, 356,
	0, 0, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 737, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 1347, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 1345, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 0, 214, 215,
	216, 217, 355, 356, 0, 0, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 1327, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 0, 214, 215, 216,
	217, 355, 356, 0, 0, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 505,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	850, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 0, 214,
	215, 216, 217, 355, 356, 0, 0, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 507, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 502, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 1207, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	0, 214, 215, 216, 217, 1206, 356, 0, 0, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 505, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 850, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 355, 356, 0,
	0, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 507, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 502, 380, 381, 0, 0,
	311, 851, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 505, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 496, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 355,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 507, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 834, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 502, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 809, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 0, 214, 215, 216,
	217, 808, 356, 0, 0, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 806,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 0, 214,
	215, 216, 217, 805, 356, 0, 0, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 802, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	0, 214, 215, 216, 217, 801, 356, 0, 0, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 799, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 798, 356, 0,
	0, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 795, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 794,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 172, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 175, 176, 783, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 355, 356,
	0, 0, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 781, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	780, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 777, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 0, 214, 215,
	216, 217, 355, 356, 0, 0, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	775, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 0,
	214, 215, 216, 217, 355, 356, 0, 0, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 771, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 0, 214, 215, 216, 217, 773, 356, 0, 0,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 749, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 751, 356,
	0, 0, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 747, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 505, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 496, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 0, 214, 215,
	216, 217, 355, 356, 0, 0, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	495, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	507, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 497, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 498, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	502, 380, 381, 0, 0, 311, 500, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	487, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 0,
	214, 215, 216, 217, 355, 356, 0, 0, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	488, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 485, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 0, 214, 215, 216, 217, 355, 356, 0, 0,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 477, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 355, 356,
	0, 0, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 434, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 0, 214, 215, 216, 217,
	355, 356, 0, 0, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 0, 214, 215, 216, 217, 355,
	356, 0, 0, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 172, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 0, 214, 215, 216, 217, 1873, 356,
	0, 0, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 0, 214, 215, 216, 217, 1871, 356, 0,
	0, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 172, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 0, 214, 215, 216, 217, 1860, 356, 0, 0,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	0, 214, 215, 216, 217, 355, 356, 0, 0, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 488, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 172, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 1217, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 0,
	214, 215, 216, 217, 355, 356, 0, 0, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 0, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 0, 214,
	215, 216, 217, 355, 356, 0, 0, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 713, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	172, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 0, 214, 215,
	216, 217, 355, 356, 0, 0, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 0,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 0, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 0, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 942, 0,
	0, 0, 943, 0, 957, 974, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 942, 0, 0, 0,
	943, 0, 957, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 942, 0, 0, 0, 963, 948,
	957, 0, 0, 0, 0, 943, 0, 0, 974, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 967,
	975, 0, 0, 0, 0, 0, 963, 948, 0, 942,
	0, 0, 0, 943, 0, 957, 974, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 965, 0, 0, 948, 0, 942, 0, 958,
	0, 0, 0, 957, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	965, 0, 0, 0, 964, 0, 0, 958, 0, 0,
	948, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	967, 975, 964, 0, 0, 958, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 967, 975,
	964, 0, 0, 965, 0, 0, 0, 0, 968, 0,
	958, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 964, 968, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 959, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 2406, 0, 968,
	0, 0, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 959, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 0, 0, 0, 2358, 0, 968, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 2311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	954, 955, 956, 969, 0, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 0, 0, 0, 0, 2281, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 940, 941, 2276, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 942, 0, 0, 0, 943, 0, 957, 974, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 942,
	0, 0, 0, 943, 0, 957, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 942, 0, 0,
	0, 963, 948, 957, 0, 0, 0, 0, 943, 0,
	0, 974, 0, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 967, 975, 0, 0, 0, 0, 0, 963,
	948, 0, 942, 0, 0, 0, 943, 0, 957, 974,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 965, 0, 0, 948, 0,
	942, 0, 958, 0, 0, 0, 957, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 975,
	0, 0, 0, 965, 0, 0, 0, 964, 0, 0,
	958, 0, 0, 948, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 967, 975, 964, 0, 0, 958, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 967, 975, 964, 0, 0, 965, 0, 0, 0,
	0, 968, 0, 958, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 964, 968,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 954, 955, 956, 969, 959, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	2272, 0, 968, 0, 0, 0, 0, 966, 0, 0,
	954, 955, 956, 969, 959, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 0, 0, 0, 0, 2212, 0,
	968, 0, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 0, 0, 2178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 954, 955, 956, 969, 0, 953, 951,
	952, 944, 945, 946, 947, 949, 950, 0, 0, 0,
	0, 2177, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 940, 941, 2142,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 974, 0, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 942, 0, 0, 0, 943, 0,
	957, 974, 0, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 942, 0, 0, 0, 943, 0, 957, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	942, 0, 0, 0, 963, 948, 957, 0, 0, 0,
	0, 943, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	0, 0, 0, 948, 0, 942, 0, 0, 0, 0,
	0, 957, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 975, 0, 0, 0, 965, 0,
	0, 948, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 965, 0, 0, 0,
	964, 0, 0, 958, 0, 0, 948, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 967, 975, 964, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 965,
	0, 0, 0, 0, 968, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 959,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 1996, 0, 968, 0, 0, 0, 0,
	966, 0, 0, 954, 955, 956, 969, 0, 953, 951,
	952, 944, 945, 946, 947, 949, 950, 0, 0, 0,
	0, 1972, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	940, 941, 1730, 960, 961, 962, 970, 971, 972, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 943, 0, 0, 974, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 942, 0, 0,
	0, 943, 0, 957, 974, 0, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 942, 0, 0, 1703, 0,
	943, 957, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 948, 2468,
	957, 0, 0, 1541, 0, 0, 0, 0, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 967, 975,
	0, 0, 0, 0, 0, 963, 948, 0, 1800, 1540,
	1704, 1799, 943, 0, 0, 974, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 975, 0, 0,
	0, 965, 0, 0, 0, 948, 942, 0, 958, 0,
	0, 0, 957, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 965,
	0, 0, 0, 964, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 2467,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 964, 0, 0, 0, 958, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 967, 975, 0,
	964, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 968, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	959, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 42, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 966, 0, 48, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 942, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 940, 941, 59, 960, 961, 962, 970,
	971, 972, 60, 0, 61, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 948, 0, 940, 941, 957, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 967, 975, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 965, 0, 957, 0, 0,
	0, 948, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 0, 964, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 66, 973,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 948, 132, 965, 0, 0, 1806, 0, 0,
	459, 958, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 975, 0, 959, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 964, 0, 0, 0,
	973, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 127, 959, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 118, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 1976, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 968, 0, 0, 963, 0, 0, 0, 1801, 0,
	0, 943, 0, 0, 974, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 942, 0, 0, 0, 0,
	0, 957, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 974, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 957, 948, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 967, 975, 1759, 0,
	0, 943, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 965,
	948, 957, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 948, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 975, 0, 959,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 968, 0, 0, 1766, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 1768, 1769, 0, 1786, 1787, 1788, 0,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 0, 0, 0, 0, 940, 941, 959,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 968, 1783, 0, 0, 0,
	943, 0, 0, 974, 0, 0, 0, 966, 0, 0,
	954, 955, 956, 969, 0, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 942, 0, 0, 0, 0, 0,
	957, 0, 0, 940, 941, 0, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 1774, 0, 0, 0, 0, 943, 0, 0, 974,
	0, 0, 0, 966, 0, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	942, 0, 0, 0, 0, 948, 957, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	943, 1784, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 942, 0, 0, 0, 965, 0,
	957, 948, 0, 0, 0, 958, 0, 943, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 0, 0, 0, 0,
	964, 942, 0, 0, 0, 0, 0, 957, 0, 973,
	0, 0, 0, 0, 1785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 948, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 948, 973, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 967, 975, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1780, 1781, 1782, 959, 0, 1779, 1777, 1778, 1770,
	1771, 1772, 1773, 1775, 1776, 965, 0, 0, 0, 0,
	968, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 959, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 1266, 1256,
	1285, 1248, 1276, 1275, 0, 0, 1250, 1249, 0, 0,
	0, 0, 1287, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 1273, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 1271, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 1270, 1268, 1269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1256, 1285, 1248, 1276, 1275, 0, 0, 1250, 1249, 0,
	0, 0, 0, 1287, 1286, 0, 0, 1259, 1258, 1260,
	1261, 1262, 1263, 1264, 0, 1284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 0, 1273,
	1272, 0, 0, 0, 1252, 0, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 1274, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 1270, 1268, 1269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 0, 552, 0, 1267,
	0, 0, 0, 1378, 1376, 1377, 1380, 1379, 1259, 1258,
	1260, 1261, 1262, 1263, 1264, 531, 1284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 529, 0, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 1254, 0, 0, 0, 1252, 0, 0, 530, 0,
	1289, 0, 0, 532, 0, 0, 0, 1274, 538, 539,
	0, 1257, 548, 1251, 0, 0, 1282, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	1267, 0, 0, 1288, 0, 0, 0, 0, 0, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 534,
	1253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1254, 0, 535, 536, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 0, 1251, 537, 544, 1282, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 554, 0, 1255,
	0, 0, 0, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 528, 545, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 0, 550, 0, 0, 0, 556, 0, 0,
	0, 0, 543, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 549,
}
var sqlPact = [...]int{

	4347, -1000, -13, -1000, -1000, -1000, 178, -1000, -1000, -1000,
	171, 169, 165, -1000, 164, 162, 160, 159, 157, 156,
	154, 153, 152, 149, 145, -1000, 144, -1000, -1000, -1000,
	-1000, 143, 142, 140, 139, 134, 130, 129, 1007, 22455,
	128, 127, 1317, 35293, 121, 114, 112, 105, 1054, 104,
	103, 25976, 983, 1200, 101, 100, 97, 96, 95, 1008,
	34974, 4399, 1663, 1130, 1562, 34652, 22133, 1560, 1516, 34330,
	-1000, -1000, 34008, 93, 89, 87, 86, 79, -1000, -1000,
	33686, 78, 76, 70, 69, 68, 67, 57, 56, 55,
	54, 53, 51, 50, 39, -1000, 38, 36, 34, 40933,
	32, 31, 30, 1123, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 119, -1000, 1114, 462, 1756,
	7853, 1014, 1011, 998, 997, 1010, 37207, 35293, 29, -22,
	27, -1000, 1863, 668, 19531, 4347, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25654, 25332, 33364, 33042, 782, -1000, -16, 23731, 35293, -1000,
	181, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15219, 14861, 501, 181, -1000, -1000, -1000, -1000, -1000, 32720,
	-1000, 32398, 32076, 1419, 31754, -1000, -1000, -1000, -1000, 31432,
	-1000, -1000, 1674, 1582, 1575, 25010, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31113, 30791,
	30469, 30147, 29825, 511, -1000, -1000, -1000, 17912, -1000, -1000,
	-1000, -1000, 26, -1000, 24, -1000, 23, 21, 20, 18,
	-1000, 15, 11, -1000, 10, 4, -1000, 0, -8, 29503,
	1166, -1000, -1000, -15, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35293, -1000, 15907, -1000, 510, -1000, 1570, -1000,
	15907, -1000, 1148, -1000, -1000, -1000, -1000, -1000, 35293, -1000,
	-1000, -1000, -1000, -1000, -1000, 2030, 1170, 509, 29181, -1000,
	1454, -1000, 604, 789, -1000, -1000, -1000, 8886, 201, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1422, 21811,
	1204, 1847, 1671, 2028, 1304, 1661, 1660, 1652, 1651, 1648,
	2027, 954, 2026, 1699, 1017, 2024, 1623, 1219, 681, 2023,
	1563, 1555, -1000, -1000, -1000, -1000, 928, -1000, -1000, -1000,
	27252, -1000, -1000, 1114, -1000, -1000, -1000, 1268, 1804, 1804,
	1804, 1883, 336, 303, -1000, 119, -1000, 1488, -1000, 1141,
	-1000, -1000, -1000, -1000, -1000, 40327, -1000, -1000, 15907, 15907,
	15907, 15907, 15907, 1067, 536, -1000, 508, 506, 7151, -1000,
	-1000, 2005, -1000, -1000, -1000, 319, -1000, -1000, 15907, 181,
	-1000, -1000, -1000, -1000, 505, 2018, -1000, 686, -1000, -1000,
	-1000, 611, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1584, 503, 500, 496, -1000, 495, -1000, -1000, 494,
	491, 486, 485, 484, 479, 478, 477, 467, 463, 461,
	460, 457, 456, 455, 1021, -1000, 631, -1000, -1000, 631,
	631, -1000, 423, 423, 426, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 423, -1000, -1000, -1000, 586, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 445, 1301,
	-1000, -1000, 1301, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	781, 36569, -18, 35293, -1000, 441, -18, -1000, -1000, 437,
	-1000, 10964, 10964, -1000, -1000, -1000, -1000, -1000, 9588, 1649,
	-1000, 3668, -202, 342, 585, -1000, 18559, 21147, -1000, -1000,
	1075, 1706, 642, -1000, 970, 1701, 465, -1000, 963, -1000,
	893, 1698, -143, 22774, 23731, -16, -28, -1000, -1000, -1000,
	5787, 40327, -1000, 40327, -1000, 864, 20177, 181, -1000, -1000,
	-1000, -1000, 433, 1287, 618, -1000, 339, -1000, 28859, 618,
	1283, -1000, -1000, -1000, 27252, -1000, 35293, -1000, 35293, -1000,
	894, -1000, 36888, 123, 1687, -1000, -1000, 123, 1676, -1000,
	118, 1673, -1000, -1000, 1212, 1655, -1000, -28, 1636, -1000,
	-1000, 15907, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	668, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28537, 23093, 1121, 587, 40327, 1937,
	40802, 22774, 40327, 23093, -1000, -1000, 35293, -1000, 15907, -1000,
	1935, 1359, -1, -1000, -1000, -1000, -1000, -1000, 1327, 1313,
	739, 1103, 8886, 8886, 1778, -1000, 196, 6118, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28215, -1000, -1000, -1000,
	1156, 35293, -1000, -1000, 1580, -1000, 23093, 35293, -1000, 35293,
	-1000, 35293, -1000, 35293, -1000, 35293, -1000, -1000, -1000, -1000,
	-1000, 1240, -1000, 1577, -1000, -1000, 35293, -1000, 1324, -1000,
	-1000, -1000, 27896, 27574, -1000, 971, 839, -1000, -1000, 124,
	-1000, -1000, 1268, -1000, 1125, 1387, 14503, 1371, 15907, 119,
	-1000, -1000, 119, 119, 8542, -1000, -1000, -1000, 35293, -1000,
	40711, 40802, 6118, 812, 15907, 15907, 15907, 15907, 15907, 15907,
	15907, 15907, 15907, 15907, 15907, 15907, 15907, 15907, 15907, 15907,
	15907, 15907, 15907, 15907, 15907, 15907, 1265, 15907, 779, 15907,
	15907, 15907, 15907, 1210, 1133, 422, 1167, -1000, 1976, 1976,
	1976, 40437, 40437, 372, 536, -1000, 15907, -1000, 62, 14159,
	303, 38833, -17, 6807, -1000, -1000, -1000, 9230, 629, 40327,
	181, 4735, -1000, 2004, 871, 1526, 1471, 431, 555, 552,
	543, 542, 15907, 15907, 13815, 13457, 13099, 16595, 12741, 15907,
	7495, 15907, 15907, 15907, 15907, 12383, 12025, -1000, 429, -1000,
	-1000, -1000, -1000, 2003, -1000, -1000, 2001, -1000, 808, 803,
	1999, -1000, -1, -1000, 36569, -1000, 35293, -18, 1934, 35293,
	-1000, 88, -1000, 39329, -1000, 88, -43, -1000, 1392, 1388,
	19854, 1354, 1084, 1084, 1084, -1000, 427, 529, 585, 5110,
	11667, -1000, 26295, 1091, 203, 288, 18236, 1649, -1000, 35293,
	-41, 978, -1000, 24688, 1852, 1829, 1815, 27252, 1903, 62,
	1552, 775, 27252, 766, 1874, 62, 1537, 761, 35293, 6118,
	583, -1000, 35293, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1525, -49, -1000, -1000, 24369, 1933, 1627,
	-1000, 1040, -1000, 1932, 35293, 1144, 1281, -1000, -1000, 816,
	1613, 624, 211, 1930, 211, 20501, -1000, 35293, -1000, 35293,
	-1000, -1000, 35293, -1000, 35293, -1000, 35293, 35293, -1000, 35293,
	35293, -50, 40327, 39597, 24050, 760, -1000, 659, 24369, 2675,
	-51, -1000, 734, -1000, -1000, -1000, -1000, 371, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	426, 1021, 423, 423, 423, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 586, -1000, -1000, 631, 631, 631, -1000, -1000,
	-57, -1000, 1519, 608, -58, 684, -1, -1000, 1301, -1000,
	1192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2015, -1000, 1982, -1000, -1000, 1998,
	-19, -1000, -19, -1000, 6118, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35293, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 265, -1000, -1000, -1000, -1000, -1000, -1000, 35293, 35293,
	35293, -1000, 27252, -1000, -1000, -1000, -1000, 40327, -1000, 370,
	-1000, -1000, 40327, 1023, 1403, -1000, 1403, -21, -1000, 39267,
	1378, 35293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 603, 408, 408, 810, 810, 810, 810,
	1936, 3253, 523, 3090, 304, 304, 304, 935, 577, 577,
	304, 304, 304, 40437, 40383, 480, 15907, 15907, 752, 1112,
	422, 480, 15907, 480, 480, 480, 480, -1000, 1325, -1000,
	-1000, -1000, -1000, 1507, 421, 16595, 16595, -1000, -1000, -1000,
	7151, 16926, -1000, -1000, -1000, -1000, 420, 15907, -1000, 38868,
	-209, -64, -1000, -1000, 15907, -65, -67, -1000, -1000, 854,
	-1000, 15907, -1000, -37, 15907, 15907, 15907, 287, -1000, 282,
	-1000, 749, -1000, 747, 733, 732, -1000, 418, 1081, 417,
	413, 15907, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	40088, 4209, 281, -1000, 1506, -141, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 279, -1000, 277, -1000, 40032, -141, 276,
	4145, -1000, 16595, 16595, 16595, 7151, 411, 275, -1000, 39238,
	-141, 39978, 11309, 11309, 11309, 274, 39734, 15907, -141, 3970,
	3836, 338, -83, -88, -1000, -94, -1000, 1996, -95, 273,
	600, 598, 269, -1000, -1000, 409, -96, 624, 10964, 19207,
	6118, -1000, 624, 9588, -1000, 19854, 19854, 1238, 1385, 19854,
	-1000, -1000, -1000, -1000, 26295, 535, 585, 26295, -1000, 1995,
	1349, -97, -1000, -1000, -1000, 35293, 405, -1000, 585, 248,
	1071, 35293, 35293, 35293, -1000, -1000, 1257, 36250, 1256, 40802,
	35293, -1000, 398, 396, 1372, 1370, 35293, 35293, 35931, 35612,
	35293, 950, 62, -1000, 395, 35293, 956, 35293, 62, -1000,
	394, 35293, 940, -1000, 1445, 1171, -1000, 859, 1503, 35293,
	243, -102, -25, 40802, -1000, -1000, -1000, -1000, -1000, 35293,
	459, 35293, 62, 35293, 2014, 62, 35293, 1610, 1716, 566,
	35293, 1387, 15907, 988, -1000, 18883, 648, 35293, 931, 61,
	-1000, -1000, -1000, 579, 35293, -1000, -1000, 123, 123, -1000,
	118, 1212, -28, -1000, 15907, -1000, -1000, 35293, 22774, -103,
	-1000, -1000, 40802, -1000, 531, 741, -1000, 1991, 615, 22774,
	35293, 8886, 8886, -1000, 1396, -1000, -1000, 917, -1000, 1025,
	-1000, -1000, -1000, -1000, 8886, -1000, -52, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1023, -1000, 15907, 1990, -1000, -1000,
	-1000, 8542, -1000, -1000, -1000, 35293, -196, 15907, 480, 480,
	15907, 16595, 16595, -1000, 480, -1000, -1000, -1000, -1000, -1000,
	1500, 391, 15907, 40802, 4178, 3708, -104, -1000, 10620, -31,
	-1000, 15907, -1000, 38805, -1000, -1000, 340, 1712, -1000, 15907,
	39683, 241, 10276, -1000, 39624, -44, -44, -1000, 2009, 1298,
	1058, 994, 905, 1989, -1000, 20824, 625, 1095, 38777, 40711,
	40802, -1000, 15907, -1000, -1000, 1498, 15907, -1000, 40711, 40802,
	16595, 16595, 16595, 16595, 16595, 16595, 16595, 16595, 16595, 16595,
	16595, 16595, 16595, 16595, 16595, 16595, 16595, 16595, 16595, 1286,
	16595, 1966, 1966, 1966, -36, 9932, -1000, 1574, 1498, 15907,
	15907, 40802, 240, 239, 237, -1000, 15907, -141, 15907, 15907,
	15907, -1000, -1000, -1000, 236, -1000, 1975, -1000, -1000, -1000,
	-1000, 2675, -1000, 1464, -1000, -93, -1000, 1649, -1000, 1464,
	-1000, -1000, 1238, -1000, 390, 15907, 19854, -1000, 527, -1000,
	-105, -1000, 26295, -1000, 526, -206, -1000, 578, -1000, 585,
	389, 35293, 26295, -1000, -1000, -1000, 729, 717, 1607, -1000,
	1251, -1000, 652, -1000, 1143, 15907, 17588, 388, 387, 1116,
	-1000, 1606, 1212, 1604, 1212, -1000, -41, 974, -1000, 15907,
	-1000, 710, -1000, -1000, 15907, -1000, 699, 615, 1489, 849,
	-1000, 857, -1000, 1423, -1000, 24369, 386, 35293, 385, -1000,
	384, -1000, -1000, 380, 35293, 1353, 566, 23412, -1000, 618,
	931, -1000, 40327, -1000, 931, 8197, 1805, -111, -1000, -1000,
	-1000, 624, 20501, 19854, 9588, -113, -1000, -1000, -1000, -1000,
	40327, -52, 1783, 1783, -1000, 1973, -1000, 525, 235, -1000,
	26933, -1000, -52, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35293, 1099, 38433, -1000, 1793, 6118, 1904, 480, 3227, 2640,
	15907, 40802, 40474, -118, 15907, 15907, -1000, -119, -1000, 15907,
	524, 40327, -1000, -1000, -1000, 40327, 15907, 2008, 15907, 234,
	229, 228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	227, -1000, -1000, 37526, 15907, 225, -1000, 223, 222, 40327,
	1574, 40327, -1000, -1000, 553, 553, 875, 875, 875, 875,
	1966, 2606, 1873, 2343, 317, 317, 317, 458, 612, 612,
	317, 317, 317, 1482, 1278, 379, 4280, 15907, -120, -1000,
	-1000, -1000, 40327, 40327, 221, -1000, -1000, -1000, -141, 268,
	38405, 38370, -1000, 219, 218, 1453, 1882, -1000, 19854, 1453,
	-1000, 35293, 40327, -1000, -202, -1000, 1971, -1000, -1000, 1349,
	-1000, 5453, 26295, 35293, -121, -1000, 35293, 35293, 35293, 1603,
	-1000, 1179, -1000, 38342, -126, -1000, 300, 1833, 15907, -1000,
	-1000, 378, 17588, 35293, -1000, 1336, 1380, 678, 35293, -1000,
	35293, -1000, 35293, 35293, 35293, -127, 35293, -128, 35293, -1000,
	22774, 737, -1000, 1051, 1426, -1000, 17588, 377, 35293, 24369,
	1927, 17588, 1136, 1362, 566, 23412, -1000, 816, -1000, -1000,
	-63, -1000, 367, 62, 931, -1000, -69, -1000, 576, 1767,
	-1000, 1753, 522, -1000, -1000, -70, 373, -1000, 570, 569,
	-1000, -1000, -1000, -1000, 1793, 15907, 15907, 40474, -129, -1000,
	480, 480, -1000, 38314, -1000, 40327, -1000, 39624, -1000, -1000,
	-1000, -1000, 1048, -1000, 37970, -1000, -1000, -1000, -1000, 16595,
	1480, 366, 40802, 37942, -1000, -1000, 15907, -1000, -1000, -1000,
	-1000, 622, 15907, 15907, 1649, 622, -136, 585, -1000, -1000,
	-1000, 1965, -1000, -139, -1000, -1000, -1000, -1000, 35293, -1000,
	35293, -1000, 6118, 35293, 1468, 1226, -1000, -1000, 1369, 365,
	16595, 35293, -1000, 1079, 17588, 1793, 181, 6118, 1793, 37907,
	4735, -144, -146, 1221, -1000, 1220, 15907, -1000, 40802, 1212,
	1212, -1000, 698, 691, 690, -1000, 688, -1000, -85, 21478,
	-1000, 1877, 1059, -147, 17588, -152, 216, 62, -153, 35293,
	-1000, 566, 23412, -1000, 1716, 1727, 35293, 1814, -1000, -1000,
	364, 360, 358, -1000, 26614, 26614, 22774, 22774, -1000, 480,
	480, -1000, -1000, 214, 1095, 1872, -1000, 40293, 16595, 40802,
	-154, -1000, 37879, -1000, 35293, 40327, -141, -1000, -1000, 26295,
	521, -1000, -1000, 1020, -1000, -1000, 35293, 1247, -1000, -1000,
	15907, 4280, 356, 1423, 352, -1000, -1000, -1000, -1000, -1000,
	-1000, 1833, -37, -1000, 980, -1000, -1000, 40327, 1824, -1000,
	-1000, 35293, 35293, 351, 350, -1000, 348, 181, 1320, 35293,
	1079, -159, -1000, 1423, -1000, 1079, 347, 23412, -1000, 1353,
	790, -161, 35293, -1000, -1000, 6449, 22774, 22774, -1000, -164,
	-1000, -1000, -1000, 1003, 15907, 40293, -167, -1000, -1000, -114,
	-1000, 1915, -1000, -1000, -1000, -1000, 1601, 37851, 1307, 35293,
	-1000, 35293, 1793, 213, 35293, 656, 6118, -1000, -1000, 15907,
	15907, 15907, 345, 344, 1423, 1079, -1000, 1423, 17588, -1000,
	1362, 882, -1000, 624, -1000, -170, -173, -1000, 209, 16251,
	16251, -141, -1000, 35293, 341, 1572, -1000, 1117, 1035, 206,
	-175, -1000, -1000, 339, -1000, 15907, -1000, -178, -180, -44,
	35293, 35293, -1000, 1423, -1000, -181, -1000, 20501, -1000, 615,
	615, -1000, -1000, -1000, 17257, 1169, 918, 39210, -1000, -1000,
	-1000, 35293, -1000, 1126, 1124, 884, -1000, -1000, -1000, -1000,
	-1000, 1307, 40327, -1000, -1000, 204, -183, -186, -1000, 1079,
	-169, -1000, -1000, 1940, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1736, -1000, 669, 1280, 1280, 1117, 2008, 320, 1189,
	1423, -1000, 15563, -1000, 1951, -1000, -1000, 1344, -1000, -1000,
	1045, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 125,
	-1000, 35293, -1000, 643, -166,
}
var sqlPgo = [...]int{

	0, 2399, 2398, 1613, 1954, 2397, 2396, 2394, 2392, 2389,
	2387, 2386, 2385, 2384, 2383, 2382, 2381, 2378, 2373, 2371,
	1952, 2368, 1912, 2366, 2365, 2363, 2357, 1873, 2352, 2351,
	2350, 2349, 2344, 2342, 1859, 2341, 1832, 2336, 2335, 2334,
	2332, 2328, 1814, 2319, 75, 106, 1806, 2317, 2316, 1803,
	1799, 1795, 2315, 1753, 2314, 2313, 1751, 1734, 2308, 89,
	2306, 2302, 2301, 1728, 1689, 2299, 2295, 2279, 143, 2275,
	1656, 2274, 2273, 2263, 2262, 2261, 2260, 2259, 2258, 2255,
	2254, 2249, 2246, 2244, 2243, 2242, 2241, 2237, 2235, 151,
	2233, 2230, 1651, 1633, 2229, 2228, 26, 30, 13, 58,
	28, 134, 2827, 132, 1, 2227, 2226, 2225, 2217, 2216,
	15, 96, 95, 2215, 47, 2214, 2210, 49, 45, 16,
	21, 2207, 93, 2206, 2205, 954, 27, 2202, 2200, 125,
	2198, 24, 34, 2320, 145, 142, 110, 114, 2197, 2196,
	2194, 54, 113, 5, 2192, 2191, 2190, 2188, 2187, 17,
	82, 18, 2186, 35, 19, 2183, 2178, 120, 2175, 59,
	91, 1501, 20, 118, 137, 2173, 72, 11, 62, 2171,
	2169, 152, 31, 2168, 51, 76, 131, 2166, 64, 153,
	117, 71, 121, 126, 2165, 2161, 2158, 103, 2156, 107,
	105, 2155, 2151, 65, 2150, 92, 130, 2149, 2146, 2144,
	86, 2141, 115, 2140, 2139, 150, 139, 112, 9, 37,
	63, 6, 1509, 1508, 129, 80, 56, 53, 2138, 1817,
	1399, 857, 48, 97, 79, 57, 100, 55, 85, 141,
	38, 2135, 2134, 136, 2129, 2127, 2126, 2125, 2123, 101,
	2121, 2120, 23, 2115, 77, 39, 50, 83, 41, 198,
	122, 108, 144, 98, 2114, 84, 123, 2104, 60, 2100,
	2098, 1872, 116, 2096, 2092, 2087, 1722, 1646, 1535, 393,
	2086, 2085, 1140, 935, 2080, 2079, 78, 2078, 109, 104,
	94, 133, 146, 68, 2077, 111, 29, 2076, 43, 32,
	0, 1742, 1491, 2075, 119, 69, 2074, 2073, 2072, 2070,
	33, 3, 10, 4, 8, 7, 36, 25, 2066, 2065,
	124, 87, 74, 2061, 148, 2060, 2059, 2055, 46, 2054,
	14, 2046, 12, 2045, 2044, 22, 2, 2043, 2041, 138,
	2040, 99, 2039, 1863, 2037, 140, 2036, 2033, 1601, 42,
	102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 288, 288, 289, 289, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 163,
	163, 162, 162, 165, 165, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 257, 257, 256, 43, 43, 231, 231, 46,
	46, 188, 188, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 329, 329, 329, 333, 333, 334, 334, 335,
	335, 335, 335, 335, 335, 335, 331, 331, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 282, 280,
	280, 281, 281, 139, 139, 139, 139, 139, 140, 140,
	140, 287, 287, 287, 287, 287, 287, 286, 286, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	330, 330, 332, 332, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 210, 210, 210, 210, 143, 143,
	115, 115, 115, 144, 144, 146, 145, 209, 298, 298,
	299, 299, 299, 299, 299, 299, 300, 300, 300, 300,
	300, 300, 300, 296, 296, 297, 294, 294, 295, 295,
	295, 295, 336, 336, 208, 208, 149, 149, 303, 303,
	303, 303, 301, 301, 301, 301, 301, 304, 302, 305,
	305, 305, 305, 305, 243, 243, 243, 91, 91, 32,
	32, 121, 121, 33, 33, 29, 29, 29, 192, 192,
	153, 153, 248, 248, 248, 132, 132, 110, 110, 110,
	14, 11, 11, 11, 11, 11, 11, 19, 19, 17,
	17, 193, 193, 194, 194, 52, 52, 56, 56, 61,
	61, 90, 90, 90, 90, 90, 90, 21, 21, 21,
	21, 25, 25, 25, 25, 60, 60, 338, 338, 128,
	128, 128, 128, 129, 129, 205, 205, 206, 206, 206,
	207, 207, 207, 123, 122, 124, 124, 28, 28, 28,
	117, 117, 118, 118, 119, 119, 120, 120, 339, 339,
	49, 49, 49, 93, 93, 135, 135, 202, 202, 202,
	204, 204, 203, 203, 203, 178, 178, 178, 92, 92,
	158, 158, 167, 167, 168, 168, 254, 169, 169, 59,
	59, 102, 102, 100, 100, 100, 100, 100, 100, 101,
	101, 101, 103, 103, 103, 103, 103, 103, 103, 106,
	106, 106, 107, 107, 107, 105, 105, 311, 311, 311,
	314, 314, 310, 312, 312, 313, 313, 337, 337, 179,
	179, 179, 148, 147, 147, 151, 151, 150, 152, 152,
	247, 247, 247, 176, 176, 176, 176, 197, 197, 195,
	195, 196, 196, 198, 198, 199, 199, 199, 200, 200,
	201, 201, 175, 175, 227, 227, 104, 104, 104, 157,
	157, 157, 159, 159, 217, 217, 217, 218, 218, 216,
	216, 216, 216, 249, 249, 249, 249, 249, 249, 249,
	249, 327, 327, 327, 328, 328, 246, 246, 250, 250,
	250, 250, 250, 250, 244, 244, 244, 244, 245, 245,
	255, 255, 182, 182, 182, 182, 180, 180, 181, 181,
	251, 251, 251, 251, 177, 177, 252, 252, 252, 211,
	211, 258, 258, 258, 276, 276, 156, 156, 156, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 260, 260, 260, 260,
	262, 262, 262, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 275, 275, 275, 275, 275, 263, 263, 270, 270,
	271, 271, 272, 273, 264, 264, 265, 265, 266, 267,
	274, 274, 274, 274, 278, 278, 268, 268, 268, 268,
	268, 269, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 190, 190, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	221, 221, 221, 221, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 306, 306, 306, 306, 306,
	306, 306, 306, 308, 308, 309, 309, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 315, 315, 316,
	316, 318, 318, 319, 319, 320, 321, 321, 321, 322,
	323, 323, 317, 317, 324, 324, 324, 325, 325, 326,
	326, 326, 326, 326, 233, 233, 233, 234, 234, 235,
	241, 241, 241, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 130,
	130, 130, 130, 130, 164, 164, 230, 230, 228, 228,
	228, 232, 232, 183, 183, 277, 277, 277, 277, 277,
	277, 277, 184, 184, 184, 191, 185, 185, 186, 186,
	186, 186, 186, 186, 224, 225, 187, 187, 187, 226,
	226, 236, 240, 240, 239, 238, 238, 237, 237, 214,
	214, 215, 215, 213, 212, 172, 172, 171, 171, 170,
	170, 340, 340, 242, 242, 173, 173, 174, 166, 166,
	253, 253, 253, 253, 160, 160, 137, 137, 161, 161,
	133, 133, 136, 136, 134, 134, 134, 134, 154, 154,
	155, 155, 131, 131, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 279, 279, 279, 229, 125,
	125, 125, 126, 126, 127, 127, 284, 284, 284, 285,
	285, 285, 285, 283, 283, 283, 283, 283, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 9, 0, 1, 3, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 2, 4,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 2,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 358, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -313, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 215, 221, 241, 243, 245, 252,
	-100, -102, 239, -54, -55, -63, -64, -65, -66, -94,
	263, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 266,
	-21, -25, -60, 304, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -311, -103, -101, 355, 240,
	313, 35, 275, 61, 101, 247, 329, 336, -106, -104,
	-105, -107, 256, 321, 285, 359, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 2,
	285, 324, 83, 141, -329, 2, -161, 285, 83, -134,
	-125, 348, 4, -290, -292, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 142, 145,
	147, 140, 157, 158, 159, 161, 162, 163, 166, 165,
	170, 173, 174, 177, 179, 180, 181, 184, 182, 186,
	187, 189, 188, 194, 196, 197, 199, 202, 205, 208,
	211, 212, 213, 214, 215, 217, 219, 221, 223, 224,
	225, 226, 227, 229, 230, 232, 233, 234, 235, 236,
	239, 237, 238, 240, 241, 242, 243, 245, 247, 248,
	250, 264, 265, 276, 252, 253, 254, 255, 259, 257,
	260, 261, 263, 266, 268, 271, 274, 275, 277, 280,
	281, 278, 273, 284, 286, 287, 288, 289, 290, 291,
	292, 299, 300, 304, 305, 306, 307, 310, 311, 312,
	313, 315, 318, 319, 320, 325, 330, 331, 332, 333,
	334, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 85, 87, 88, 104, 108, 109,
	115, 116, 117, 127, 129, 136, 137, 146, 148, 149,
	150, 151, 152, 154, 168, 183, 193, 195, 206, 210,
	218, 220, 228, 249, 258, 269, 270, 279, 282, 294,
	295, 296, 301, 302, 317, 321, 322, 358, 358, 2,
	158, 225, -133, -125, 83, 358, 358, 358, 358, 285,
	2, 314, 324, -192, 83, 309, 358, 358, -125, 221,
	22, 2, 92, 145, 312, 311, 22, 217, 257, 287,
	289, 2, 358, 358, 358, 358, 358, 2, 324, 285,
	141, 83, 314, -125, 2, -45, 2, 355, -44, -4,
	-27, -36, -46, -42, -20, -22, -34, -50, -49, -51,
	-53, -57, -56, -59, -63, -64, -70, -92, -93, 263,
	-333, 2, 22, -334, -335, 69, 98, 125, 256, 145,
	92, 311, 285, 2, 158, 2, -125, 2, -329, 2,
	158, 2, -333, 2, -125, 2, -129, 2, 252, -125,
	358, 358, 358, 358, 358, 174, 55, 249, 260, -68,
	300, -67, 294, -282, -69, 2, -162, 184, -125, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 2, -89, 260, 34,
	55, 22, 60, 84, 126, 141, 142, 162, 65, 66,
	224, 174, 159, 299, 163, 261, 286, 300, 69, 315,
	290, 106, 4, 83, 184, 262, 294, 358, 358, 358,
	-337, 2, 285, -101, -103, -102, -150, -151, 308, 153,
	103, 204, -100, -102, 2, -311, -89, 260, 2, 55,
	22, -280, 2, -242, 200, -219, 89, -221, 346, 347,
	341, 190, 335, -233, -223, -236, 104, 249, 355, -133,
	-222, 361, 9, -308, -102, 29, -234, -235, 49, -125,
	7, 8, 5, 6, -131, -260, -229, -269, 303, 110,
	192, -306, -307, 4, -290, -284, -261, -271, -265, -268,
	154, 58, 75, 76, 79, 77, 80, 262, 314, 50,
	28, 108, 109, 210, 218, 282, 301, 302, 136, 193,
	137, 56, 127, 168, 97, 37, 39, 41, 42, 51,
	52, 85, 87, 88, 115, 116, 117, 146, 148, 149,
	150, 151, 152, 195, 228, 269, 279, 295, 296, 322,
	-291, -272, -273, -266, -267, 70, 124, 144, 138, 156,
	160, 169, 171, 185, 207, 209, 246, 267, -274, -338,
	2, 300, 300, 2, -338, 2, -338, 2, -128, 2,
	300, 297, -314, 229, -310, -125, -314, 358, 358, 360,
	358, -147, -148, 2, 22, 95, -174, 2, 355, -249,
	2, 353, -251, -133, -102, -250, 355, 201, -3, 2,
	-251, 136, -133, 2, -251, 136, -133, 2, -125, 2,
	-136, 136, -133, 297, 360, -161, -154, -125, -213, -212,
	357, -219, 2, -219, 2, 123, 355, -171, -172, -212,
	-213, 2, -162, 136, -125, 2, -162, 2, 141, -125,
	136, 2, -125, 22, 123, 2, 155, 2, 155, 2,
	-252, 2, -251, -163, 136, 2, -162, -163, 136, 2,
	-137, 136, 2, -136, -125, 136, 2, -154, 136, 2,
	-188, 355, -257, 2, -256, -285, 4, -290, -292, -291,
	321, 58, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 260, 200, 360, -162, -219, -231,
	355, 123, -219, 200, -125, 2, 264, 2, 355, -68,
	53, 300, -206, 2, -207, -122, -123, -124, 157, 223,
	227, 334, 297, 340, 123, -280, -165, 357, -89, 2,
	-288, 2, -286, 9, -285, 5, 264, 2, 224, 261,
	55, 123, 2, 2, -330, 2, 200, 123, 2, 123,
	2, 123, 2, 123, 2, 123, 2, 2, 224, 261,
	2, 120, 2, 299, 2, 2, 123, 2, 157, 223,
	276, 2, 285, 324, 2, 123, 123, 334, 2, -177,
	-251, -150, -151, -176, -195, -196, 172, 112, 198, -179,
	22, 95, -179, -179, 44, 356, 356, -89, 264, 2,
	10, 11, 57, 33, 346, 347, 348, 349, 118, 350,
	351, 344, 345, 343, 338, 339, 340, 63, 178, 251,
	13, 14, 15, 26, 203, 171, 335, 138, 267, 341,
	16, 17, 18, 156, 36, 139, -130, -138, -219, -219,
	-219, -219, -219, 209, -170, -214, 353, -102, 355, 355,
	-102, -219, -164, 355, 7, -102, -228, 353, -237, -219,
	-171, 355, 5, 355, 5, -315, 330, 120, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 220, -278, 325,
	-278, -278, -262, 355, -262, -263, 355, -262, 331, 336,
	355, -205, -206, -205, 297, -129, 360, -314, -155, 355,
	-174, -166, -253, -219, 348, -166, -173, -242, 70, -182,
	160, 185, 124, 169, 246, 144, 7, -45, -216, 361,
	355, 348, -246, 336, -102, -250, 355, -249, -133, 355,
	-112, 237, -111, 21, 23, 98, 319, 104, 273, 291,
	253, 237, 104, 237, 273, 291, 253, 237, 104, 361,
	-288, -134, 360, -283, 348, 4, -290, -292, -291, -293,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	49, 50, 54, 57, 59, 65, 69, 74, 75, 77,
	76, 78, 79, 80, 89, 91, 93, 95, 96, 99,
	101, 103, 110, 111, 112, 120, 122, 123, 125, 128,
	130, 139, 141, 143, 153, 155, 164, 167, 172, 175,
	176, 190, 191, 192, 198, 200, 201, 203, 204, 216,
	222, 231, 244, 256, 262, 272, 283, 285, 293, 297,
	298, 303, 308, 309, 314, 316, 323, 324, 326, 327,
	328, 329, 277, 356, -160, -133, -172, 355, -149, 190,
	-121, -312, 329, -149, 355, -126, 136, 2, -125, -312,
	190, -252, -135, -133, -135, 263, -125, 30, -114, 360,
	48, 242, 104, -114, 104, -114, 360, 104, -114, 104,
	104, -164, -219, 356, 360, -329, -335, 69, 355, 30,
	-230, -258, -259, -261, -270, -264, -268, -269, 40, 46,
	45, 292, 183, 258, 270, 317, 38, 199, 147, 146,
	148, 149, 150, 151, 152, 269, 37, 228, 116, 117,
	115, 97, 88, 87, 195, 42, 41, -272, -273, -266,
	-267, 85, 295, 296, 154, 39, 52, 51, 322, 279,
	-289, -288, -329, -282, -164, 30, -206, 2, 360, -207,
	170, -140, 177, 189, 132, 201, 332, -287, 5, 4,
	-229, -243, 89, 174, -269, 8, 347, -279, 7, 346,
	-281, -280, -281, 73, 357, -283, -162, 22, 265, 2,
	-282, -332, 120, -329, -282, -282, -282, -282, -282, 260,
	-45, 120, -125, 170, -282, 2, -282, 2, 285, 141,
	285, -114, 360, -176, -196, -195, -198, -219, 22, -201,
	114, 186, -219, -221, -101, -101, -101, -152, -247, -219,
	222, 141, -282, -276, -258, -275, 233, 234, 232, 236,
	235, -258, -283, 294, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, 171, 138, 267, 36,
	139, -219, 297, -219, -219, -219, -219, 182, 190, 192,
	303, 110, 310, 95, 196, -340, 283, 32, -226, -102,
	355, -241, 27, 272, 22, -233, 249, 355, -214, -219,
	-215, -164, 356, 356, 360, -164, -232, 354, -228, -240,
	-239, 326, 356, -164, 323, 22, 95, 348, 2, 7,
	-189, 333, 181, 86, 133, 180, -190, 255, -316, 113,
	128, 355, 356, 2, 356, 2, 356, 2, 356, 2,
	-219, -219, -183, 2, -277, -164, 4, 333, 181, 86,
	133, 180, 255, -183, 2, -184, 2, -219, -164, -185,
	-220, -221, 346, 347, 341, 355, 249, -186, 2, -219,
	-164, -219, 43, 167, 298, -187, -219, 123, -164, -219,
	-219, -219, -164, -164, 2, -164, 2, 355, 7, 7,
	294, 294, 7, -129, -310, 30, -154, -157, 360, 123,
	30, 4, -157, 360, 356, 160, 160, -249, -182, 160,
	-180, 207, -180, -180, -327, 355, 354, -246, -283, 353,
	362, -164, 2, -245, -244, 30, -125, 205, 356, -133,
	360, 297, -193, 65, 59, -209, 136, 59, -294, -125,
	65, -295, 54, 309, 222, 122, -193, 65, -193, 65,
	65, -251, 33, -59, 123, 297, -251, 297, 33, -59,
	123, 297, -136, -283, -255, 337, -125, 123, 356, 360,
	-141, -154, -142, -125, -210, -209, -296, -297, -294, 141,
	309, 111, 30, 104, 214, 30, 200, 190, -117, 288,
	104, -211, 327, -202, -59, 355, 89, 30, -202, -167,
	-168, -254, -169, -133, 355, -125, -162, -163, -163, -136,
	-137, -125, -154, 356, 360, -45, -256, 297, 316, -142,
	-44, 356, 360, -156, 29, 353, -189, 355, -255, 360,
	123, 340, 297, 356, 300, -207, -139, 227, 271, 238,
	259, 8, 7, 7, 360, -283, -331, -125, 260, -45,
	-133, -136, -133, -251, -199, -279, 355, 347, -200, 249,
	250, 360, -110, 31, 93, 161, -133, 334, -219, -219,
	297, -340, 283, -226, -219, 182, 192, 303, 110, 310,
	95, 196, 123, 355, -220, -220, -164, -223, 355, -164,
	354, 364, 356, -219, 354, 354, 360, -238, -239, 99,
	-219, -151, 360, -150, -219, -164, -164, 356, 356, 297,
	297, 297, 297, 355, -321, 208, 355, 355, -219, 30,
	360, 356, 123, 356, 356, -191, 216, 356, 10, 11,
	346, 347, 348, 349, 118, 350, 351, 344, 345, 343,
	338, 339, 340, 63, 178, 251, 13, 14, 15, 156,
	139, -220, -220, -220, -164, 355, 356, -224, -225, 123,
	120, 30, -187, -187, -187, 356, 123, -164, 360, 360,
	360, 356, 356, 356, 7, 356, 360, 356, 334, 334,
	356, 355, 356, -211, -253, -159, 2, -249, -283, -211,
	-242, -249, -249, -181, 316, 200, 160, -249, -244, 356,
	-328, 7, -246, -245, 7, -218, -217, 121, 188, 356,
	-125, 355, -246, 356, -111, -133, -125, -125, 190, -209,
	136, -116, 190, -258, -125, 355, 355, 161, 161, -125,
	-125, 136, -125, 136, -125, -125, -112, 237, -59, 355,
	-133, 237, -125, -59, 355, -125, 237, -95, 135, 196,
	277, 123, -133, 356, 356, 360, -126, 141, -126, -59,
	-162, 5, -59, -133, 104, -118, 100, -339, 340, -125,
	-197, -195, -219, -178, -204, 244, 200, -160, 321, -125,
	-178, -158, 360, 123, 340, -160, -114, -114, -114, -114,
	-219, -331, -288, 356, -258, 353, 354, 7, 7, -98,
	329, -288, -331, -280, -280, -122, 307, 62, 227, -280,
	360, -200, -219, -247, -133, 361, -219, -219, -220, -220,
	123, 355, -219, -230, 26, 26, 356, -164, 356, 360,
	-215, -219, 356, -228, 101, -219, 293, 356, 323, -151,
	-151, -151, 5, 181, 133, 180, -190, 180, -190, -190,
	7, -322, -125, 355, 327, -150, 356, -276, -258, -219,
	-224, -219, -276, -258, -220, -220, -220, -220, -220, -220,
	-220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, -220, -220, 95, 190, 196, -220, 360, -164, 356,
	-225, -224, -219, -219, -258, 356, 356, 356, -164, -219,
	-219, -219, 356, 7, -44, -175, 128, -255, 360, -175,
	-181, 355, -219, -249, 354, 356, 360, -245, 354, 360,
	363, 340, -246, 355, -154, -244, 297, 297, 104, 190,
	318, -298, -295, -219, -153, -248, -125, -309, 355, -306,
	-307, -131, 355, 355, -109, 98, 263, -194, 104, -114,
	104, -114, 297, -193, 65, -164, 297, -164, 297, -98,
	123, 284, 277, -143, 140, -210, 355, -126, 355, 355,
	-149, 355, -125, -119, 166, -339, -286, -312, -178, -178,
	-166, 191, 64, 356, -211, -168, -159, -242, 356, -99,
	71, -99, 7, 354, 356, -97, 202, -96, -125, 5,
	-125, 201, 356, -110, -283, 26, 26, -219, -230, 356,
	-219, -219, 356, -219, 354, -219, 5, -219, 356, 356,
	356, 356, -323, -125, -219, 356, 356, 356, -225, 123,
	95, 196, 355, -219, 356, 356, 360, 356, 356, 356,
	356, -227, 130, 44, -249, -227, -154, -216, 7, -217,
	-283, 353, -245, -154, 356, -125, -125, -209, 104, -299,
	65, -300, 57, 111, 69, 190, 192, 309, 222, 54,
	89, 231, 356, 356, 360, -132, -171, 57, -132, -219,
	355, -153, -154, 190, 89, 190, 89, 82, 305, -125,
	-125, -133, -125, -125, 356, -133, 356, -125, -289, 294,
	-144, 213, 139, -153, 355, -154, -141, 30, -153, 200,
	-120, 165, -339, -286, -117, -203, 355, 200, -59, -178,
	340, 82, 82, 354, 360, 355, 340, 340, -110, -219,
	-219, 356, 356, -151, -317, 213, 356, -220, 123, 355,
	-230, 356, -219, -318, 328, -219, -164, -318, 356, -246,
	7, 356, -209, -125, -283, -125, 111, 136, 192, 161,
	355, -220, -133, -208, -336, 68, 281, -248, -110, -283,
	-110, 356, -164, 356, 356, 192, 192, -219, -258, -114,
	-114, 297, 297, 297, 297, -222, -131, -125, 44, 211,
	356, -153, 356, 356, -59, 356, -133, -339, -286, -118,
	96, -154, 65, -174, -102, 355, 355, 355, -96, -97,
	-288, -288, 356, -151, 44, -220, -230, 356, 356, -319,
	-320, -125, -245, 354, -300, -126, 190, -219, -127, 355,
	-143, 355, -132, -151, 231, -113, 57, -125, -125, 355,
	355, 355, 173, -133, -208, 356, -143, -208, 355, -286,
	-119, 311, 191, 356, -125, -289, -289, 356, -324, 226,
	250, -164, 356, 360, 30, 104, 356, -303, 179, -125,
	-154, -110, 356, -133, -108, 316, -283, -164, -164, -164,
	355, 355, -143, -208, -143, -153, -120, 263, -211, 356,
	356, 356, -325, -326, 36, 306, 73, -219, -325, -320,
	-322, 111, -301, -304, -302, 200, 124, 212, 268, 356,
	356, -149, -219, 356, 356, -151, -154, -154, -143, 356,
	-167, -98, -98, -326, 219, 119, 249, 219, 119, -125,
	-302, 200, -304, 200, 311, 92, -303, 356, 356, 356,
	-208, -211, 26, -305, 187, 242, 48, 263, -305, -301,
	355, -115, 48, 242, -143, -326, 20, 192, 89, -146,
	-145, 213, 356, -162, -104,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	639, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	561, 563, 565, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 675, -2, 686, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 652, 654,
	656, 658, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1241, 1168,
	1174, 1175, 1199, 1200, 1201, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 143, 145, 146,
	0, 0, 0, 1170, 1241, 152, 154, 156, 158, 0,
	164, 0, 0, 0, 0, 528, 161, 163, 253, 1301,
	255, 257, 0, 0, 0, 0, 167, 168, 169, 170,
	171, 172, 174, 176, 178, 180, 182, 183, 0, 0,
	0, 0, 0, 252, 250, 205, 206, 0, 235, 236,
	237, 238, 239, 241, 209, 211, 212, 214, 216, 218,
	220, 221, 223, 225, 226, 228, 230, 231, 233, 0,
	0, 259, 265, 266, 267, 269, 270, 271, 272, 273,
	274, 275, 0, 123, 0, 445, 248, 246, 0, 119,
	0, 558, 0, 261, 559, 560, 555, 556, 1328, 584,
	279, 281, 290, 292, 294, -2, -2, 1417, -2, 303,
	-2, 311, 1423, 0, 314, 315, 318, -2, 201, 340,
	342, 344, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 369, 371, 373, 374, 375, 0, 0,
	0, 379, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 378, 380, 381, 382, 0, 562, 564, 566,
	0, 518, 677, -2, 650, 651, -2, 0, 681, 681,
	681, 0, 0, 651, 649, 0, 282, 0, 284, 0,
	379, 287, 288, 319, 320, 1153, 1154, 878, 0, 0,
	0, 0, 0, 0, 970, 972, 1391, 1417, 0, 974,
	975, 0, 977, 979, 980, 0, 983, 984, 1138, 1170,
	1184, 1185, 1186, 1187, 0, 0, 1190, 0, 1192, 1193,
	1194, 1038, 994, -2, -2, 1182, 806, 807, 808, 809,
	-2, 1431, 998, 1001, 1004, 1007, 1008, 1011, 1012, 0,
	1375, 1392, 1393, 1413, 1414, 1422, 1426, 1427, 1399, 1410,
	1400, 1387, 1397, 1408, 1247, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1208, 840, 841, 846, 847, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 849, 586,
	568, 577, 586, 570, 571, 572, 573, 574, 575, 576,
	579, 0, 667, 1307, 670, 1181, 668, 653, 655, 0,
	657, 0, 0, 661, 683, 682, 716, 717, 0, 665,
	666, 676, 732, 770, 747, 738, 0, 0, 2, 68,
	0, 1399, 770, 70, 0, 1399, 770, 72, 0, 77,
	0, 1399, 1173, 0, 0, 263, 264, 1178, 1176, 1177,
	0, 147, 148, 149, 150, 0, 0, 1171, 1147, 1145,
	1146, 159, 497, 1399, -2, 520, 497, 524, -2, 674,
	1399, 599, 254, 256, 0, 166, 0, 612, 0, 614,
	0, 629, 776, 109, 1399, 186, 199, 109, 1399, 189,
	109, 1399, 192, 1166, 109, 1399, 195, 196, 1399, 198,
	249, 0, 0, -2, 242, 244, 1209, 1210, 1211, 1212,
	-2, 1431, 240, 210, 213, 215, 217, 219, 222, 224,
	227, 229, 232, 234, -2, 0, 0, 0, 444, 0,
	0, 0, 557, 0, 583, 297, 0, 300, 0, 302,
	1386, -2, 305, 306, 587, 590, 591, 592, 0, 0,
	0, 0, 0, 0, 0, 316, 202, 0, 376, 377,
	385, 386, 124, 125, 337, 338, 0, 389, 410, 422,
	0, 0, 393, 395, 443, 397, 0, 0, 399, 0,
	401, 0, 403, 0, 405, 0, 407, 409, 411, 423,
	413, 676, 415, 0, 417, 421, 0, 426, 0, 428,
	429, 430, 0, 0, 436, 0, 0, 383, 384, 109,
	774, -2, 0, 645, 695, 696, 0, 0, 0, 0,
	679, 680, 0, 0, 0, 641, 642, 283, 0, 286,
	0, 0, 0, 0, 1073, 1074, 1075, 1076, 1077, 1078,
	1081, 1082, 1079, 1080, 1083, 1084, 1085, 0, 0, 0,
	1086, 1087, 1088, 0, 0, 1090, 0, 1092, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 1089, 883, 884,
	885, 907, 908, 0, 971, 1149, 1142, 973, 0, 0,
	-2, 1094, 0, 0, 976, 981, 982, 0, 0, 1137,
	-2, 0, 1189, 0, 875, 1040, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 843, 854,
	851, 850, 827, 0, 826, 824, 0, 828, 0, 0,
	0, 567, 585, 569, 0, 581, 0, 669, 0, 0,
	718, 721, 1158, 1162, 1163, 721, 0, 1155, 0, 0,
	0, 0, 767, 767, 767, 765, 741, 0, 747, 0,
	0, 771, 759, 0, -2, 738, 0, 0, 772, 0,
	78, 552, 88, 0, 552, 552, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	761, 1169, 0, 1143, 1144, 1213, 1214, 1215, 1216, 1217,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 139, 0, 0, 1164, 1148, 451, 0, 0,
	519, 0, 673, 0, 0, 0, 1399, 527, 1202, 601,
	0, 780, 0, 615, 0, 0, 777, 0, 184, 0,
	107, 108, 0, 187, 0, 190, 0, 0, 193, 0,
	0, 0, 1094, 676, 0, 0, 268, 0, 0, 676,
	0, 1096, 788, 789, 790, 791, 792, 875, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	837, 0, 812, 812, 812, 829, 830, 838, 839, 844,
	845, 856, 857, 859, 861, 855, 855, 855, 852, 853,
	761, 126, 0, 0, 0, 0, 307, 308, 0, 589,
	0, 593, 328, 329, 330, 595, 596, 312, 331, 332,
	333, 334, 335, 336, 0, 514, 0, 516, 1195, 0,
	309, 321, 310, 313, 0, 203, 387, 388, 390, 391,
	392, 396, 0, 440, 398, 400, 402, 404, 406, 414,
	418, 676, 424, 427, 431, 432, 433, 434, 0, 0,
	0, 517, 0, 648, 693, 694, 699, 703, 704, 707,
	710, 711, 701, 878, 662, 663, 664, 687, 688, 539,
	0, 0, 285, 879, 784, 785, 831, 832, 833, 834,
	835, 880, 881, 0, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, -2, -2, -2, 899, 900, 901,
	-2, -2, -2, 905, 906, -2, 1091, 1093, 0, 1152,
	0, -2, 0, -2, -2, -2, -2, 919, 0, 921,
	924, 926, 928, 0, 0, 0, 0, 1151, 938, 1129,
	0, 0, 1070, 1071, 1072, 923, 0, 0, 1150, 1141,
	0, 0, -2, 978, 0, 0, 0, 1100, 1101, 1136,
	1132, 0, 985, 686, 0, 0, 0, 0, 992, 0,
	1198, 862, 863, 864, 865, 866, 867, 876, 1048, 0,
	0, 0, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1010,
	0, 0, 0, 1016, 0, 1104, -2, -2, -2, -2,
	-2, -2, -2, 0, 1018, 0, 1020, 1094, 1114, 0,
	0, 941, 0, 0, 0, 0, 1417, 0, 1023, 1094,
	1122, 0, 0, 0, 0, 0, 1094, 0, 1128, 0,
	0, 0, 0, 0, 1034, 0, 1036, 0, 0, 0,
	0, 0, 0, 580, 671, 0, 0, 780, 0, 0,
	0, 1161, 780, 0, 1157, 0, 0, 0, 0, 0,
	762, 766, 763, 764, 0, 0, 747, 759, 729, 0,
	0, 0, 736, 737, 758, 0, 757, 746, -2, 0,
	0, 0, 0, 0, 551, 90, 1399, 0, 111, 0,
	0, 487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 1172, 129, 0, 1179, 0, 0, 0,
	0, 0, 450, 1178, 452, 454, 455, 456, 457, 1203,
	0, 1203, 0, 0, 0, 0, 0, 0, 603, 609,
	0, 698, 0, 627, 617, 0, 0, 0, 627, 631,
	632, 634, 635, 0, 0, 778, 200, 109, 109, 1167,
	109, 109, 197, 251, 0, 207, 243, 0, 0, 0,
	245, 247, 0, 781, 783, 0, 793, 0, 138, 0,
	0, 0, 0, 301, 0, 588, 594, 0, 325, 0,
	327, 515, 1197, 1196, 0, 204, 442, 276, 416, 419,
	437, 438, 439, 775, 0, 705, 0, 0, 702, 708,
	709, 0, 690, 537, 538, 0, 0, 0, -2, -2,
	0, 0, 0, 939, -2, 920, 922, 925, 927, 929,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	1139, 1142, -2, 1095, 1098, 1099, 0, 0, 1133, 0,
	0, 0, 0, 685, 686, 686, 686, 991, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 0,
	0, 1015, 0, 1017, 1019, 0, 0, 1021, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 945, 946, 0, 0, 1022, 1120, 1121, 0,
	0, 0, 0, 0, 0, 1028, 0, 1127, 0, 0,
	0, 1032, 1033, 1035, 0, 810, 0, 836, 858, 860,
	848, 676, 1180, 713, 1159, 761, 720, 722, 1160, 713,
	1156, 749, 0, 751, 0, 0, 0, 753, 0, 742,
	0, 744, 759, 734, 0, 0, 727, 0, 726, 747,
	755, 0, 0, 773, 89, 541, 0, 0, 0, 92,
	1399, 100, 0, 469, 0, 0, 0, 0, 0, 554,
	101, 1399, 109, 1399, 109, 102, 79, 552, 80, 0,
	547, 0, 540, 81, 0, 549, 0, 138, 0, 0,
	140, 0, 1165, 459, 496, 0, 0, 1203, 0, 448,
	497, 521, 523, 0, 0, 605, 609, 0, 608, 674,
	627, 697, 779, 610, 627, 0, 0, 0, 619, 616,
	613, 780, 0, 0, 0, 0, 185, 188, 191, 194,
	1095, 258, 0, 0, 1097, 0, 786, 0, 0, 118,
	0, 127, 260, 298, 299, 304, 323, 324, 326, 322,
	0, 0, 0, 689, 539, 0, 882, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1130, 0, 1065, 0,
	0, 1141, -2, 1102, 1131, 1135, 0, 986, 0, 0,
	0, 0, 1191, 868, 869, 870, 871, 872, 873, 874,
	0, 1046, 1047, 1051, 0, 0, 997, 0, 0, 1103,
	1113, 1115, 942, 943, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, -2, -2, -2, 960, 961, 962,
	-2, -2, -2, 0, 0, 0, 1116, 0, 0, 1068,
	1118, 1119, 1124, 1125, 0, 1025, 1026, 1027, 1126, 0,
	0, 0, 842, 0, 0, 715, 0, 719, 0, 715,
	750, 0, 769, 752, 732, 743, 0, 740, 730, 0,
	731, 0, 759, 0, 0, 739, 0, 0, 0, 0,
	110, 467, 486, 0, 0, 530, 536, 536, 0, 995,
	996, 0, 0, 0, 94, 0, 0, 0, 0, 98,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 141, 464, 0, 453, 0, 0, 0, 451,
	0, 0, 0, 607, 609, 0, 600, 601, 165, 611,
	625, 626, 624, 0, 627, 633, 630, 636, 0, 0,
	120, 0, 0, 787, 794, 136, 1291, 134, 131, 133,
	277, 700, 706, 691, 539, 0, 0, -2, 0, 932,
	-2, -2, 1064, 1095, 1140, 1134, 1188, 686, 987, 989,
	990, 877, 1053, 1050, 0, 1037, 1013, 1014, 1112, 0,
	0, 0, 0, 1095, 1067, 1024, 0, 1030, 1031, 811,
	672, 1042, 0, 0, 723, 1042, 0, 747, 745, 728,
	724, 0, 735, 0, 756, 543, 545, 91, 0, 468,
	0, 471, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 488, 495, 0, 539, 1183, 0, 539, 0,
	0, 0, 0, 0, 106, 0, 0, 553, 0, 109,
	109, 542, 0, 0, 0, 548, 0, 550, 128, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 609, 0, 602, 603, 0, 0, 0, 618, 628,
	0, 0, 0, 782, 0, 0, 0, 0, 692, -2,
	-2, 933, 1066, 0, 686, 0, 1039, -2, 0, 0,
	0, 1069, 0, 659, 0, 714, 712, 660, 768, 759,
	0, 754, 93, 0, 472, 473, 1203, 0, 476, 479,
	0, 481, 1205, 459, 0, 492, 493, 531, 532, 535,
	533, 536, 686, 490, 0, 95, 96, 105, 113, 97,
	103, 0, 0, 0, 0, 760, 0, 0, 0, 0,
	495, 0, 485, 459, 449, 495, 0, 0, 604, 605,
	0, 0, 0, 637, 638, 0, 0, 0, 135, 0,
	130, 132, 988, 1056, 0, -2, 0, 968, 1029, 1041,
	1043, 0, 733, 725, 470, 474, 0, 0, 501, 0,
	489, 0, 539, 0, 0, 115, 0, 544, 546, 0,
	0, 0, 0, 0, 459, 495, 447, 459, 0, 606,
	607, 0, 621, 780, 623, 0, 0, 137, 0, 0,
	0, 1052, 969, 0, 0, 0, 480, 506, 0, 0,
	0, 534, 986, 497, 99, 0, 112, 0, 0, 686,
	0, 0, 483, 459, 525, 0, 598, 0, 622, 138,
	138, 1049, 1054, 1057, -2, 1359, 1238, 0, 1055, 1044,
	1045, 0, 482, 502, 503, 0, 498, 499, 500, 1204,
	494, 501, 114, 85, 87, 0, 0, 0, 484, 495,
	780, 121, 122, 0, 1059, 1060, 1061, 1062, 1063, 475,
	504, 0, 505, 0, 0, 0, 506, 0, 0, 462,
	459, 620, 0, 507, 0, 510, 511, 0, 508, 491,
	0, 458, 460, 461, 526, 1058, 509, 512, 513, 0,
	465, 0, 463, 0, 466,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 344, 3, 350, 345, 3,
	355, 356, 348, 346, 360, 347, 357, 349, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 364, 359,
	338, 340, 339, 3, 361, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 353, 3, 354, 351, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 362, 343, 363, 341,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 342, 57681, 352, 57682, 358, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:877
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:883
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:995
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1041
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1047
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1209
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1212
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1213
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1373
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1904
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2396
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2400
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2404
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2438
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil, PartitionBy: sqlDollar[8].union.partitionBy()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &PartitionBy{
				Typ:        PartitionByList,
				Fields:     sqlDollar[5].union.nameList(),
				Partitions: sqlDollar[8].union.partitionList(),
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = []Partition{sqlDollar[1].union.partition()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			// TODO(dan): select_clause instead of values_clause
			sqlVAL.union.val = Partition{Name: sqlDollar[2].union.unresolvedName(), Values: sqlDollar[3].union.selectStmt()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			return unimplemented(sqllex, "match full")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			return unimplemented(sqllex, "match partial")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			return unimplemented(sqllex, "match simple")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2803
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			return unimplemented(sqllex, "no action")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			return unimplemented(sqllex, "action set null")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2818
		{
			return unimplemented(sqllex, "action set default")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2858
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = true
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = false
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2954
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = Ascending
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = Descending
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2994
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2996
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3030
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.str = ""
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = ReadOnly
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = ReadWrite
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.str = ""
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.str = ""
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3299
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			return helpWith(sqllex, "INSERT")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3382
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3422
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			return helpWith(sqllex, "SELECT")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "VALUES")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3588
		{
			return helpWith(sqllex, "TABLE")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			return helpWith(sqllex, "SELECT")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			return helpWith(sqllex, "TABLE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3689
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3698
		{
			return unimplemented(sqllex, "cte")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3702
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = false
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = false
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = true
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3805
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			return helpWith(sqllex, "VALUES")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &From{}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3959
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4004
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4041
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = nil
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = true
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = false
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.str = astFullJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.str = astLeftJoin
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.str = astRightJoin
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.str = astInnerJoin
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4311
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4325
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4368
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4440
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = nil
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4601
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4633
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4673
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = year
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = month
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = day
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = hour
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = minute
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = month
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = hour
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = minute
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = minute
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = second
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4768
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4803
		{
			return unimplemented(sqllex, "at tz")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5037
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5210
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5263
		{
			return unimplemented(sqllex, "variadic")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5264
		{
			return unimplemented(sqllex, "variadic")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5288
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5304
		{
			return unimplemented(sqllex, "func_application")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5309
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5318
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			return unimplemented(sqllex, "current role")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5387
		{
			return unimplemented(sqllex, "treat")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5429
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5433
		{
			return unimplemented(sqllex, "within group")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5434
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.str = ""
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5531
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5532
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5533
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5537
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5543
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5544
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5545
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5546
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = Any
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = Some
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = All
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = Plus
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = Minus
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = Mult
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = Div
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = Mod
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = Bitand
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = Bitor
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = Pow
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Bitxor
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = LT
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = GT
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = EQ
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = LE
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = GE
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = NE
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Like
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = NotLike
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = ILike
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = NotILike
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5912
		{
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6074
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6110
		{
			return unimplemented(sqllex, "func const")
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6119
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = DNull
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.str = ""
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
