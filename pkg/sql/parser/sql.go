// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) partitions() []Partition {
	return u.val.([]Partition)
}
func (u *sqlSymUnion) partition() Partition {
	return u.val.(Partition)
}

//line sql.y:472
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LESS = 57512
const LEVEL = 57513
const LIKE = 57514
const LIMIT = 57515
const LIST = 57516
const LOCAL = 57517
const LOCALTIME = 57518
const LOCALTIMESTAMP = 57519
const LOW = 57520
const LSHIFT = 57521
const MATCH = 57522
const MINUTE = 57523
const MONTH = 57524
const NAN = 57525
const NAME = 57526
const NAMES = 57527
const NATURAL = 57528
const NEXT = 57529
const NO = 57530
const NO_INDEX_JOIN = 57531
const NORMAL = 57532
const NOT = 57533
const NOTHING = 57534
const NULL = 57535
const NULLIF = 57536
const NULLS = 57537
const NUMERIC = 57538
const OF = 57539
const OFF = 57540
const OFFSET = 57541
const OID = 57542
const ON = 57543
const ONLY = 57544
const OPTIONS = 57545
const OR = 57546
const ORDER = 57547
const ORDINALITY = 57548
const OUT = 57549
const OUTER = 57550
const OVER = 57551
const OVERLAPS = 57552
const OVERLAY = 57553
const PARENT = 57554
const PARTIAL = 57555
const PARTITION = 57556
const PASSWORD = 57557
const PAUSE = 57558
const PLACING = 57559
const PLANS = 57560
const POSITION = 57561
const PRECEDING = 57562
const PRECISION = 57563
const PREPARE = 57564
const PRIMARY = 57565
const PRIORITY = 57566
const QUERIES = 57567
const QUERY = 57568
const RANGE = 57569
const READ = 57570
const REAL = 57571
const RECURSIVE = 57572
const REF = 57573
const REFERENCES = 57574
const REGCLASS = 57575
const REGPROC = 57576
const REGPROCEDURE = 57577
const REGNAMESPACE = 57578
const REGTYPE = 57579
const RENAME = 57580
const REPEATABLE = 57581
const RELEASE = 57582
const RESET = 57583
const RESTORE = 57584
const RESTRICT = 57585
const RESUME = 57586
const RETURNING = 57587
const REVOKE = 57588
const RIGHT = 57589
const ROLLBACK = 57590
const ROLLUP = 57591
const ROW = 57592
const ROWS = 57593
const RSHIFT = 57594
const SAVEPOINT = 57595
const SCATTER = 57596
const SEARCH = 57597
const SECOND = 57598
const SELECT = 57599
const SEQUENCES = 57600
const SERIAL = 57601
const SERIALIZABLE = 57602
const SESSION = 57603
const SESSIONS = 57604
const SESSION_USER = 57605
const SET = 57606
const SETTING = 57607
const SETTINGS = 57608
const SHOW = 57609
const SIMILAR = 57610
const SIMPLE = 57611
const SMALLINT = 57612
const SMALLSERIAL = 57613
const SNAPSHOT = 57614
const SOME = 57615
const SPLIT = 57616
const SQL = 57617
const START = 57618
const STATUS = 57619
const STDIN = 57620
const STRICT = 57621
const STRING = 57622
const STORE = 57623
const STORING = 57624
const SUBSTRING = 57625
const SYMMETRIC = 57626
const SYSTEM = 57627
const TABLE = 57628
const TABLES = 57629
const TEMP = 57630
const TEMPLATE = 57631
const TEMPORARY = 57632
const TESTING_RANGES = 57633
const TESTING_RELOCATE = 57634
const TEXT = 57635
const THAN = 57636
const THEN = 57637
const TIME = 57638
const TIMESTAMP = 57639
const TIMESTAMPTZ = 57640
const TO = 57641
const TRAILING = 57642
const TRACE = 57643
const TRANSACTION = 57644
const TREAT = 57645
const TRIM = 57646
const TRUE = 57647
const TRUNCATE = 57648
const TYPE = 57649
const UNBOUNDED = 57650
const UNCOMMITTED = 57651
const UNION = 57652
const UNIQUE = 57653
const UNKNOWN = 57654
const UPDATE = 57655
const UPSERT = 57656
const USE = 57657
const USER = 57658
const USERS = 57659
const USING = 57660
const UUID = 57661
const VALID = 57662
const VALIDATE = 57663
const VALUE = 57664
const VALUES = 57665
const VARCHAR = 57666
const VARIADIC = 57667
const VIEW = 57668
const VARYING = 57669
const WHEN = 57670
const WHERE = 57671
const WINDOW = 57672
const WITH = 57673
const WITHIN = 57674
const WITHOUT = 57675
const WRITE = 57676
const YEAR = 57677
const ZONE = 57678
const NOT_LA = 57679
const WITH_LA = 57680
const AS_LA = 57681
const POSTFIXOP = 57682
const UMINUS = 57683
const HELPTOKEN = 57684

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6588

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	361, 53,
	-2, 681,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 534,
	-2, 0,
	-1, 61,
	92, 681,
	145, 681,
	313, 681,
	314, 681,
	-2, 0,
	-1, 71,
	103, 656,
	112, 656,
	153, 656,
	173, 656,
	199, 656,
	205, 656,
	310, 656,
	-2, 645,
	-1, 103,
	4, 683,
	20, 683,
	21, 683,
	23, 683,
	28, 683,
	33, 683,
	34, 683,
	35, 683,
	36, 683,
	37, 683,
	38, 683,
	39, 683,
	40, 683,
	41, 683,
	42, 683,
	44, 683,
	45, 683,
	46, 683,
	47, 683,
	48, 683,
	51, 683,
	52, 683,
	53, 683,
	55, 683,
	56, 683,
	60, 683,
	61, 683,
	62, 683,
	64, 683,
	66, 683,
	67, 683,
	68, 683,
	71, 683,
	72, 683,
	73, 683,
	81, 683,
	82, 683,
	83, 683,
	84, 683,
	85, 683,
	86, 683,
	87, 683,
	88, 683,
	90, 683,
	92, 683,
	94, 683,
	97, 683,
	98, 683,
	100, 683,
	104, 683,
	105, 683,
	106, 683,
	107, 683,
	108, 683,
	109, 683,
	113, 683,
	114, 683,
	115, 683,
	116, 683,
	117, 683,
	119, 683,
	121, 683,
	126, 683,
	127, 683,
	129, 683,
	132, 683,
	133, 683,
	134, 683,
	135, 683,
	136, 683,
	137, 683,
	140, 683,
	142, 683,
	145, 683,
	146, 683,
	147, 683,
	148, 683,
	149, 683,
	150, 683,
	151, 683,
	152, 683,
	154, 683,
	157, 683,
	158, 683,
	159, 683,
	161, 683,
	162, 683,
	163, 683,
	165, 683,
	166, 683,
	168, 683,
	170, 683,
	171, 683,
	174, 683,
	175, 683,
	178, 683,
	180, 683,
	181, 683,
	182, 683,
	183, 683,
	184, 683,
	185, 683,
	187, 683,
	188, 683,
	189, 683,
	190, 683,
	194, 683,
	195, 683,
	196, 683,
	197, 683,
	198, 683,
	200, 683,
	202, 683,
	203, 683,
	206, 683,
	207, 683,
	209, 683,
	211, 683,
	212, 683,
	213, 683,
	214, 683,
	215, 683,
	216, 683,
	218, 683,
	219, 683,
	220, 683,
	221, 683,
	222, 683,
	224, 683,
	225, 683,
	226, 683,
	227, 683,
	228, 683,
	229, 683,
	230, 683,
	231, 683,
	233, 683,
	234, 683,
	235, 683,
	236, 683,
	237, 683,
	238, 683,
	239, 683,
	240, 683,
	241, 683,
	242, 683,
	243, 683,
	244, 683,
	246, 683,
	248, 683,
	249, 683,
	250, 683,
	251, 683,
	253, 683,
	254, 683,
	255, 683,
	256, 683,
	258, 683,
	259, 683,
	260, 683,
	261, 683,
	262, 683,
	264, 683,
	265, 683,
	266, 683,
	267, 683,
	269, 683,
	270, 683,
	271, 683,
	272, 683,
	274, 683,
	275, 683,
	276, 683,
	277, 683,
	278, 683,
	279, 683,
	280, 683,
	281, 683,
	282, 683,
	283, 683,
	285, 683,
	287, 683,
	288, 683,
	289, 683,
	290, 683,
	291, 683,
	292, 683,
	293, 683,
	294, 683,
	296, 683,
	297, 683,
	298, 683,
	301, 683,
	302, 683,
	303, 683,
	304, 683,
	306, 683,
	307, 683,
	308, 683,
	309, 683,
	312, 683,
	313, 683,
	314, 683,
	315, 683,
	317, 683,
	319, 683,
	320, 683,
	321, 683,
	322, 683,
	323, 683,
	324, 683,
	327, 683,
	332, 683,
	333, 683,
	334, 683,
	335, 683,
	336, 683,
	-2, 0,
	-1, 116,
	103, 655,
	112, 655,
	153, 655,
	173, 655,
	199, 655,
	205, 655,
	310, 655,
	-2, 648,
	-1, 121,
	1, 583,
	157, 583,
	224, 583,
	228, 583,
	360, 583,
	361, 583,
	-2, 0,
	-1, 123,
	1, 583,
	360, 583,
	361, 583,
	-2, 0,
	-1, 124,
	1, 583,
	360, 583,
	361, 583,
	-2, 0,
	-1, 125,
	1, 587,
	360, 587,
	361, 587,
	-2, 0,
	-1, 132,
	4, 689,
	5, 689,
	6, 689,
	7, 689,
	8, 689,
	9, 689,
	20, 689,
	21, 689,
	23, 689,
	28, 689,
	29, 689,
	33, 689,
	34, 689,
	35, 689,
	36, 689,
	37, 689,
	38, 689,
	39, 689,
	40, 689,
	41, 689,
	42, 689,
	44, 689,
	45, 689,
	46, 689,
	47, 689,
	48, 689,
	49, 689,
	50, 689,
	51, 689,
	52, 689,
	53, 689,
	55, 689,
	56, 689,
	58, 689,
	60, 689,
	61, 689,
	62, 689,
	64, 689,
	66, 689,
	67, 689,
	68, 689,
	70, 689,
	71, 689,
	72, 689,
	73, 689,
	75, 689,
	76, 689,
	77, 689,
	79, 689,
	80, 689,
	81, 689,
	82, 689,
	83, 689,
	84, 689,
	85, 689,
	86, 689,
	87, 689,
	88, 689,
	90, 689,
	92, 689,
	94, 689,
	97, 689,
	98, 689,
	100, 689,
	104, 689,
	105, 689,
	106, 689,
	107, 689,
	108, 689,
	109, 689,
	110, 689,
	113, 689,
	114, 689,
	115, 689,
	116, 689,
	117, 689,
	119, 689,
	121, 689,
	124, 689,
	126, 689,
	127, 689,
	129, 689,
	132, 689,
	133, 689,
	134, 689,
	135, 689,
	136, 689,
	137, 689,
	138, 689,
	140, 689,
	142, 689,
	144, 689,
	145, 689,
	146, 689,
	147, 689,
	148, 689,
	149, 689,
	150, 689,
	151, 689,
	152, 689,
	154, 689,
	156, 689,
	157, 689,
	158, 689,
	159, 689,
	160, 689,
	161, 689,
	162, 689,
	163, 689,
	165, 689,
	166, 689,
	168, 689,
	169, 689,
	170, 689,
	171, 689,
	172, 689,
	174, 689,
	175, 689,
	178, 689,
	180, 689,
	181, 689,
	182, 689,
	183, 689,
	184, 689,
	185, 689,
	186, 689,
	187, 689,
	188, 689,
	189, 689,
	190, 689,
	191, 689,
	193, 689,
	194, 689,
	195, 689,
	196, 689,
	197, 689,
	198, 689,
	200, 689,
	203, 689,
	206, 689,
	207, 689,
	208, 689,
	209, 689,
	210, 689,
	211, 689,
	212, 689,
	213, 689,
	214, 689,
	215, 689,
	216, 689,
	218, 689,
	219, 689,
	220, 689,
	221, 689,
	222, 689,
	224, 689,
	225, 689,
	226, 689,
	227, 689,
	228, 689,
	229, 689,
	230, 689,
	231, 689,
	233, 689,
	234, 689,
	235, 689,
	236, 689,
	237, 689,
	238, 689,
	239, 689,
	240, 689,
	241, 689,
	242, 689,
	243, 689,
	244, 689,
	246, 689,
	247, 689,
	248, 689,
	249, 689,
	250, 689,
	251, 689,
	253, 689,
	254, 689,
	255, 689,
	256, 689,
	258, 689,
	259, 689,
	260, 689,
	261, 689,
	262, 689,
	263, 689,
	264, 689,
	265, 689,
	266, 689,
	267, 689,
	268, 689,
	269, 689,
	270, 689,
	271, 689,
	272, 689,
	274, 689,
	275, 689,
	276, 689,
	277, 689,
	278, 689,
	279, 689,
	280, 689,
	281, 689,
	282, 689,
	283, 689,
	285, 689,
	287, 689,
	288, 689,
	289, 689,
	290, 689,
	291, 689,
	292, 689,
	293, 689,
	294, 689,
	296, 689,
	297, 689,
	298, 689,
	301, 689,
	302, 689,
	303, 689,
	304, 689,
	305, 689,
	306, 689,
	307, 689,
	308, 689,
	309, 689,
	312, 689,
	313, 689,
	314, 689,
	315, 689,
	316, 689,
	317, 689,
	319, 689,
	320, 689,
	321, 689,
	322, 689,
	323, 689,
	324, 689,
	327, 689,
	332, 689,
	333, 689,
	334, 689,
	335, 689,
	336, 689,
	337, 689,
	343, 689,
	348, 689,
	349, 689,
	350, 689,
	357, 689,
	363, 689,
	-2, 0,
	-1, 135,
	1, 53,
	361, 53,
	-2, 681,
	-1, 497,
	123, 1282,
	299, 1282,
	342, 1282,
	359, 1282,
	-2, 0,
	-1, 498,
	123, 1233,
	299, 1233,
	342, 1233,
	359, 1233,
	-2, 0,
	-1, 500,
	123, 1340,
	299, 1340,
	342, 1340,
	359, 1340,
	-2, 0,
	-1, 502,
	123, 1363,
	299, 1363,
	342, 1363,
	359, 1363,
	-2, 0,
	-1, 509,
	123, 1287,
	299, 1287,
	342, 1287,
	359, 1287,
	-2, 317,
	-1, 535,
	1, 394,
	356, 394,
	358, 394,
	360, 394,
	361, 394,
	-2, 0,
	-1, 536,
	1, 441,
	120, 441,
	356, 441,
	358, 441,
	360, 441,
	361, 441,
	-2, 0,
	-1, 542,
	1, 408,
	356, 408,
	358, 408,
	360, 408,
	361, 408,
	-2, 0,
	-1, 544,
	1, 412,
	356, 412,
	358, 412,
	360, 412,
	361, 412,
	-2, 0,
	-1, 547,
	1, 420,
	356, 420,
	358, 420,
	360, 420,
	361, 420,
	-2, 0,
	-1, 548,
	1, 425,
	356, 425,
	358, 425,
	360, 425,
	361, 425,
	-2, 0,
	-1, 551,
	1, 435,
	356, 435,
	358, 435,
	360, 435,
	361, 435,
	-2, 0,
	-1, 565,
	112, 691,
	173, 691,
	199, 691,
	-2, 651,
	-1, 568,
	112, 690,
	173, 690,
	199, 690,
	-2, 649,
	-1, 625,
	357, 1211,
	-2, 1204,
	-1, 626,
	357, 1212,
	-2, 1205,
	-1, 632,
	5, 866,
	357, 866,
	-2, 1414,
	-1, 657,
	5, 825,
	-2, 1384,
	-1, 658,
	5, 860,
	357, 860,
	-2, 1386,
	-1, 659,
	5, 835,
	-2, 1387,
	-1, 660,
	5, 834,
	-2, 1388,
	-1, 661,
	5, 860,
	357, 860,
	-2, 1391,
	-1, 662,
	5, 860,
	357, 860,
	-2, 1392,
	-1, 663,
	5, 861,
	-2, 1395,
	-1, 664,
	5, 817,
	-2, 1396,
	-1, 665,
	5, 817,
	-2, 1397,
	-1, 666,
	5, 842,
	-2, 1401,
	-1, 667,
	5, 827,
	-2, 1402,
	-1, 668,
	5, 828,
	-2, 1403,
	-1, 669,
	5, 818,
	-2, 1408,
	-1, 670,
	5, 819,
	-2, 1409,
	-1, 671,
	5, 820,
	-2, 1410,
	-1, 672,
	5, 821,
	-2, 1411,
	-1, 673,
	5, 822,
	-2, 1412,
	-1, 674,
	5, 823,
	-2, 1413,
	-1, 675,
	5, 817,
	-2, 1418,
	-1, 676,
	5, 826,
	-2, 1423,
	-1, 677,
	5, 824,
	-2, 1426,
	-1, 678,
	5, 858,
	357, 858,
	-2, 1428,
	-1, 679,
	5, 862,
	-2, 1431,
	-1, 680,
	5, 864,
	-2, 1432,
	-1, 681,
	5, 857,
	357, 857,
	-2, 1437,
	-1, 776,
	215, 679,
	-2, 527,
	-1, 780,
	201, 1208,
	-2, 0,
	-1, 815,
	1, 208,
	356, 208,
	358, 208,
	360, 208,
	361, 208,
	-2, 654,
	-1, 822,
	4, 1436,
	10, 1436,
	11, 1436,
	13, 1436,
	14, 1436,
	15, 1436,
	16, 1436,
	17, 1436,
	18, 1436,
	20, 1436,
	21, 1436,
	23, 1436,
	26, 1436,
	28, 1436,
	30, 1436,
	33, 1436,
	34, 1436,
	35, 1436,
	36, 1436,
	37, 1436,
	38, 1436,
	39, 1436,
	40, 1436,
	41, 1436,
	42, 1436,
	44, 1436,
	45, 1436,
	46, 1436,
	47, 1436,
	48, 1436,
	51, 1436,
	52, 1436,
	53, 1436,
	55, 1436,
	56, 1436,
	57, 1436,
	60, 1436,
	61, 1436,
	62, 1436,
	63, 1436,
	64, 1436,
	66, 1436,
	67, 1436,
	68, 1436,
	70, 1436,
	71, 1436,
	72, 1436,
	73, 1436,
	81, 1436,
	82, 1436,
	83, 1436,
	84, 1436,
	85, 1436,
	86, 1436,
	87, 1436,
	88, 1436,
	90, 1436,
	92, 1436,
	94, 1436,
	97, 1436,
	98, 1436,
	100, 1436,
	104, 1436,
	105, 1436,
	106, 1436,
	107, 1436,
	108, 1436,
	109, 1436,
	113, 1436,
	114, 1436,
	115, 1436,
	116, 1436,
	117, 1436,
	118, 1436,
	119, 1436,
	121, 1436,
	124, 1436,
	126, 1436,
	127, 1436,
	129, 1436,
	132, 1436,
	133, 1436,
	134, 1436,
	135, 1436,
	136, 1436,
	137, 1436,
	138, 1436,
	139, 1436,
	140, 1436,
	142, 1436,
	144, 1436,
	145, 1436,
	146, 1436,
	147, 1436,
	148, 1436,
	149, 1436,
	150, 1436,
	151, 1436,
	152, 1436,
	154, 1436,
	156, 1436,
	157, 1436,
	158, 1436,
	159, 1436,
	160, 1436,
	161, 1436,
	162, 1436,
	163, 1436,
	165, 1436,
	166, 1436,
	168, 1436,
	169, 1436,
	170, 1436,
	171, 1436,
	172, 1436,
	174, 1436,
	175, 1436,
	178, 1436,
	179, 1436,
	180, 1436,
	181, 1436,
	182, 1436,
	183, 1436,
	184, 1436,
	185, 1436,
	186, 1436,
	187, 1436,
	188, 1436,
	189, 1436,
	190, 1436,
	194, 1436,
	195, 1436,
	196, 1436,
	197, 1436,
	198, 1436,
	200, 1436,
	203, 1436,
	204, 1436,
	206, 1436,
	207, 1436,
	209, 1436,
	211, 1436,
	212, 1436,
	213, 1436,
	214, 1436,
	215, 1436,
	216, 1436,
	218, 1436,
	219, 1436,
	220, 1436,
	221, 1436,
	222, 1436,
	224, 1436,
	225, 1436,
	226, 1436,
	227, 1436,
	228, 1436,
	229, 1436,
	230, 1436,
	231, 1436,
	233, 1436,
	234, 1436,
	235, 1436,
	236, 1436,
	237, 1436,
	238, 1436,
	239, 1436,
	240, 1436,
	241, 1436,
	242, 1436,
	243, 1436,
	244, 1436,
	246, 1436,
	247, 1436,
	248, 1436,
	249, 1436,
	250, 1436,
	251, 1436,
	252, 1436,
	253, 1436,
	254, 1436,
	255, 1436,
	256, 1436,
	258, 1436,
	259, 1436,
	260, 1436,
	261, 1436,
	262, 1436,
	264, 1436,
	265, 1436,
	266, 1436,
	267, 1436,
	268, 1436,
	269, 1436,
	270, 1436,
	271, 1436,
	272, 1436,
	274, 1436,
	275, 1436,
	276, 1436,
	277, 1436,
	278, 1436,
	279, 1436,
	280, 1436,
	281, 1436,
	282, 1436,
	283, 1436,
	285, 1436,
	287, 1436,
	288, 1436,
	289, 1436,
	290, 1436,
	291, 1436,
	292, 1436,
	293, 1436,
	294, 1436,
	296, 1436,
	297, 1436,
	298, 1436,
	301, 1436,
	302, 1436,
	303, 1436,
	304, 1436,
	306, 1436,
	307, 1436,
	308, 1436,
	309, 1436,
	312, 1436,
	313, 1436,
	314, 1436,
	315, 1436,
	317, 1436,
	319, 1436,
	320, 1436,
	321, 1436,
	322, 1436,
	323, 1436,
	324, 1436,
	327, 1436,
	332, 1436,
	333, 1436,
	334, 1436,
	335, 1436,
	336, 1436,
	337, 1436,
	338, 1436,
	340, 1436,
	341, 1436,
	342, 1436,
	343, 1436,
	345, 1436,
	346, 1436,
	347, 1436,
	348, 1436,
	349, 1436,
	350, 1436,
	351, 1436,
	352, 1436,
	353, 1436,
	355, 1436,
	358, 1436,
	359, 1436,
	362, 1436,
	363, 1436,
	-2, 0,
	-1, 836,
	123, 1340,
	299, 1340,
	342, 1340,
	359, 1340,
	-2, 0,
	-1, 853,
	123, 1363,
	299, 1363,
	342, 1363,
	359, 1363,
	-2, 0,
	-1, 923,
	112, 690,
	173, 690,
	199, 690,
	-2, 652,
	-1, 992,
	103, 656,
	112, 656,
	153, 656,
	173, 656,
	199, 656,
	205, 656,
	310, 656,
	-2, 985,
	-1, 1002,
	357, 1188,
	-2, 1176,
	-1, 1020,
	358, 1128,
	-2, 0,
	-1, 1076,
	103, 656,
	112, 656,
	153, 656,
	173, 656,
	199, 656,
	205, 656,
	310, 656,
	-2, 752,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 901,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 902,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 903,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 907,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 908,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 909,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 914,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 916,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 920,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 921,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 922,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 923,
	-1, 1444,
	210, 1070,
	-2, 1073,
	-1, 1488,
	123, 1110,
	357, 1211,
	-2, 1204,
	-1, 1489,
	123, 1111,
	-2, 1380,
	-1, 1490,
	123, 1112,
	-2, 1286,
	-1, 1491,
	123, 1113,
	-2, 1248,
	-1, 1492,
	123, 1114,
	-2, 1264,
	-1, 1493,
	123, 1115,
	-2, 1285,
	-1, 1494,
	123, 1116,
	-2, 1337,
	-1, 1570,
	1, 753,
	70, 753,
	103, 753,
	112, 753,
	124, 753,
	128, 753,
	130, 753,
	144, 753,
	153, 753,
	160, 753,
	169, 753,
	173, 753,
	186, 753,
	199, 753,
	201, 753,
	205, 753,
	245, 753,
	247, 753,
	310, 753,
	318, 753,
	329, 753,
	330, 753,
	339, 753,
	356, 753,
	358, 753,
	360, 753,
	361, 753,
	362, 753,
	-2, 752,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 915,
	-1, 1711,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 917,
	-1, 1716,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 918,
	-1, 1734,
	210, 1069,
	-2, 1072,
	-1, 1959,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 919,
	-1, 1964,
	156, 0,
	-2, 935,
	-1, 1974,
	210, 1071,
	-2, 1074,
	-1, 2016,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 962,
	-1, 2017,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 963,
	-1, 2018,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 964,
	-1, 2022,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 968,
	-1, 2023,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 969,
	-1, 2024,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 970,
	-1, 2149,
	156, 0,
	-2, 936,
	-1, 2152,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 939,
	-1, 2153,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 941,
	-1, 2271,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 940,
	-1, 2272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 942,
	-1, 2279,
	156, 0,
	-2, 971,
	-1, 2357,
	156, 0,
	-2, 972,
	-1, 2438,
	36, 0,
	138, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 1383,
}

const sqlPrivate = 57344

const sqlLast = 41660

var sqlAct = [...]int{

	626, 2510, 1079, 2105, 2437, 2507, 2446, 2410, 2489, 2305,
	2447, 2362, 2448, 1633, 569, 1641, 1941, 2436, 1200, 1993,
	2252, 585, 1207, 2115, 616, 2137, 2203, 2217, 2076, 2139,
	624, 728, 1293, 70, 684, 1617, 1704, 1292, 1907, 1565,
	173, 602, 770, 1630, 173, 2077, 1242, 2285, 1848, 1074,
	455, 25, 173, 1612, 1243, 1835, 2183, 1800, 1909, 2131,
	874, 173, 1070, 623, 1915, 601, 173, 173, 1827, 1053,
	173, 1616, 1642, 173, 1574, 1613, 1203, 2047, 1583, 440,
	1566, 173, 1799, 1745, 998, 1105, 1606, 577, 115, 1375,
	1370, 1700, 1196, 1468, 1442, 1323, 1082, 926, 596, 857,
	1054, 1084, 1430, 508, 1452, 1427, 437, 1319, 856, 394,
	805, 1688, 1030, 1462, 1034, 1517, 1614, 876, 734, 816,
	802, 795, 737, 1635, 1220, 1552, 1620, 173, 173, 1061,
	1539, 716, 1484, 595, 488, 173, 987, 731, 164, 927,
	1322, 116, 925, 618, 505, 1044, 466, 1214, 792, 115,
	501, 169, 574, 714, 1043, 2218, 117, 529, 931, 1733,
	573, 173, 173, 173, 173, 860, 1222, 2061, 173, 173,
	2062, 2515, 573, 2512, 1222, 2516, 1222, 2513, 1634, 2485,
	2484, 2483, 1071, 1104, 1104, 1104, 25, 942, 943, 1607,
	962, 963, 964, 972, 973, 974, 1957, 1101, 2464, 1925,
	735, 568, 2216, 965, 2458, 480, 1770, 1771, 1656, 1656,
	945, 1924, 2050, 976, 2457, 2454, 583, 2434, 1656, 1104,
	2433, 1671, 1737, 115, 1671, 1541, 744, 748, 1738, 754,
	2406, 2405, 861, 2400, 944, 1664, 862, 2266, 2396, 2388,
	959, 2359, 1104, 2216, 758, 1664, 2337, 942, 943, 2334,
	2216, 2332, 2316, 1104, 2315, 2216, 1104, 566, 2216, 1785,
	2293, 2290, 2273, 2238, 1104, 1104, 1664, 1656, 1607, 2236,
	945, 2215, 565, 1656, 752, 2216, 1671, 578, 2196, 742,
	746, 718, 1104, 2176, 2154, 2151, 2130, 1656, 1656, 1664,
	1611, 1671, 2266, 2125, 944, 950, 683, 1611, 2057, 1968,
	959, 1935, 2058, 1656, 1896, 1897, 1851, 1824, 1104, 1817,
	1656, 1104, 2050, 1818, 1776, 969, 977, 1656, 1815, 1814,
	1813, 1736, 1656, 1656, 1656, 1540, 1734, 1656, 1952, 1744,
	1656, 942, 943, 975, 1675, 1663, 1655, 1610, 1656, 1664,
	1656, 1611, 1546, 1235, 1572, 2029, 1545, 1236, 720, 967,
	721, 1971, 1104, 1897, 945, 950, 960, 1703, 1686, 1048,
	1446, 1223, 1770, 1771, 756, 1788, 1789, 1790, 838, 1223,
	1300, 1223, 135, 2219, 835, 1786, 38, 834, 944, 833,
	832, 966, 831, 830, 1638, 1770, 1771, 39, 121, 829,
	828, 1320, 827, 826, 825, 132, 824, 132, 722, 719,
	42, 561, 173, 560, 173, 173, 559, 173, 1770, 1771,
	527, 526, 173, 525, 123, 1785, 960, 524, 173, 523,
	43, 522, 48, 521, 134, 520, 134, 519, 518, 961,
	517, 173, 173, 173, 173, 173, 1520, 516, 1924, 950,
	819, 515, 514, 51, 513, 970, 512, 53, 1787, 511,
	496, 59, 495, 494, 124, 493, 492, 428, 60, 427,
	61, 133, 173, 133, 1540, 426, 425, 424, 409, 126,
	1776, 408, 400, 574, 399, 173, 127, 398, 62, 397,
	1228, 576, 390, 748, 1770, 1771, 762, 63, 1221, 961,
	1354, 173, 389, 1776, 158, 118, 157, 118, 754, 156,
	960, 173, 155, 154, 153, 774, 152, 151, 778, 150,
	809, 149, 1465, 148, 968, 147, 1776, 956, 957, 958,
	971, 146, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 1786, 819, 145, 798, 798, 794, 1843, 144, 2178,
	143, 1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778,
	142, 769, 132, 799, 1786, 141, 1075, 817, 140, 1466,
	139, 138, 137, 173, 872, 136, 1481, 1479, 1326, 64,
	1477, 869, 1475, 961, 2482, 65, 938, 1786, 839, 2453,
	924, 134, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 2435, 1776, 72, 119, 66, 2415, 67, 2354, 68,
	2335, 125, 2259, 2182, 1787, 867, 69, 1467, 1464, 2181,
	132, 2177, 2169, 2168, 2167, 2163, 2162, 80, 133, 2161,
	99, 2160, 2136, 2044, 2039, 2038, 126, 1787, 748, 122,
	942, 943, 2037, 127, 574, 1979, 1895, 1899, 1855, 134,
	1822, 1819, 1807, 1798, 1769, 1766, 1765, 1763, 854, 923,
	1787, 851, 1637, 945, 1750, 1749, 1570, 938, 1239, 103,
	1006, 1438, 1770, 1771, 999, 937, 990, 729, 120, 946,
	947, 948, 949, 951, 952, 762, 133, 944, 1770, 1771,
	1073, 922, 1469, 767, 126, 2497, 2496, 1072, 870, 1206,
	1995, 127, 1782, 1783, 1784, 2425, 2424, 1781, 1779, 1780,
	1772, 1773, 1774, 1775, 1777, 1778, 2423, 2391, 2383, 1939,
	118, 2382, 2381, 4, 173, 2373, 173, 2371, 2349, 566,
	1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 2348,
	934, 935, 1321, 1699, 565, 2347, 132, 939, 950, 173,
	173, 1698, 2302, 2281, 1779, 1780, 1772, 1773, 1774, 1775,
	1777, 1778, 1059, 1052, 2267, 2365, 819, 173, 2258, 2246,
	2222, 1463, 2174, 1108, 2113, 134, 2111, 1002, 1439, 173,
	1776, 2110, 574, 2108, 1032, 1033, 2085, 2084, 2065, 2053,
	1036, 173, 1963, 1669, 1886, 1881, 1776, 173, 1102, 173,
	1039, 173, 942, 943, 1057, 173, 1868, 1205, 1867, 960,
	1853, 1823, 133, 1797, 735, 1080, 1759, 1758, 1755, 1730,
	126, 1725, 1198, 1432, 1035, 945, 1038, 127, 1557, 1529,
	1473, 115, 1772, 1773, 1774, 1775, 1777, 1778, 1770, 1771,
	1199, 1786, 730, 1051, 1197, 1042, 118, 173, 173, 944,
	1069, 1028, 1027, 1026, 819, 1025, 173, 1786, 1047, 173,
	1024, 1023, 748, 1868, 1215, 1022, 1215, 619, 1211, 1045,
	1021, 1077, 1020, 942, 943, 1019, 1018, 1017, 1016, 1049,
	1108, 1015, 961, 1014, 1013, 1012, 1011, 1280, 1010, 173,
	1003, 991, 990, 850, 173, 842, 945, 2265, 1841, 173,
	173, 813, 173, 2156, 173, 2135, 173, 2060, 173, 2056,
	950, 1558, 1770, 1771, 1787, 794, 999, 1937, 1103, 173,
	944, 988, 1666, 1073, 1910, 173, 173, 768, 866, 2269,
	1787, 2268, 1480, 1478, 1225, 2262, 1476, 1227, 1474, 2063,
	1926, 1230, 1607, 942, 943, 1213, 1776, 1092, 1216, 1040,
	1674, 173, 1075, 920, 1041, 1108, 1240, 1821, 1820, 1709,
	863, 1307, 2286, 1008, 1942, 1327, 945, 1090, 1204, 1634,
	1502, 1770, 1771, 1301, 1788, 1789, 1790, 954, 946, 947,
	948, 949, 951, 952, 1996, 1091, 1237, 1280, 1280, 1453,
	944, 1741, 1328, 1673, 1294, 1238, 1031, 851, 2418, 2521,
	1920, 115, 2072, 1295, 1660, 2480, 1584, 1376, 1383, 1298,
	1772, 1773, 1774, 1775, 1777, 1778, 1324, 1312, 1465, 2479,
	1342, 914, 1005, 2230, 1785, 1780, 1772, 1773, 1774, 1775,
	1777, 1778, 730, 1949, 574, 1357, 709, 1335, 1332, 574,
	1384, 2395, 631, 1073, 1336, 429, 1337, 994, 1338, 686,
	1339, 950, 1340, 707, 705, 1198, 1353, 173, 1676, 173,
	2326, 915, 173, 2325, 2324, 1466, 572, 402, 1938, 1346,
	1348, 711, 2323, 173, 1587, 1549, 1356, 1355, 1085, 1776,
	1086, 906, 1108, 566, 1576, 173, 566, 566, 702, 173,
	2096, 2241, 173, 1308, 1450, 1374, 173, 2100, 1366, 2098,
	173, 1367, 1368, 2069, 864, 173, 1085, 2068, 1086, 1754,
	1753, 173, 1108, 1467, 1464, 173, 571, 1791, 1752, 159,
	1751, 1712, 574, 1659, 1311, 1310, 433, 1320, 1317, 1437,
	1559, 1577, 1603, 1440, 1599, 1597, 1414, 1538, 735, 1046,
	1786, 755, 948, 949, 951, 952, 1533, 865, 406, 1279,
	1576, 1532, 1595, 1385, 735, 1087, 1575, 1571, 1601, 2523,
	1495, 1631, 2394, 1301, 1352, 748, 2103, 1560, 573, 1429,
	748, 1588, 1590, 563, 1351, 1586, 754, 1429, 1774, 1775,
	1777, 1778, 475, 1087, 432, 1085, 2307, 1086, 1469, 2104,
	1536, 1535, 1892, 414, 1194, 2431, 1469, 1605, 1544, 2450,
	162, 1554, 1555, 1550, 485, 1217, 1701, 1702, 2471, 1314,
	173, 1077, 1918, 1787, 1917, 913, 952, 173, 1593, 2087,
	1453, 1604, 1580, 1598, 464, 39, 2479, 174, 173, 941,
	173, 849, 173, 879, 1679, 173, 1099, 173, 42, 173,
	173, 1989, 173, 173, 1722, 1681, 415, 819, 1667, 1279,
	1279, 173, 1098, 1331, 900, 1778, 1917, 1888, 163, 1720,
	1233, 1883, 1087, 1585, 1095, 1436, 1682, 1463, 2402, 1093,
	1434, 467, 1096, 570, 1286, 1636, 2376, 1636, 1680, 1029,
	1948, 946, 947, 948, 949, 951, 952, 919, 2451, 2499,
	1097, 901, 2403, 1645, 472, 1315, 1222, 1296, 1950, 467,
	468, 1782, 1783, 1784, 754, 754, 1781, 1779, 1780, 1772,
	1773, 1774, 1775, 1777, 1778, 860, 1469, 2470, 1654, 1350,
	1626, 2511, 472, 1879, 2094, 63, 2384, 469, 468, 431,
	2508, 1662, 1717, 115, 2331, 1648, 703, 1108, 798, 115,
	798, 2277, 1718, 611, 2452, 173, 1723, 471, 2243, 1651,
	1640, 401, 1657, 703, 704, 469, 1649, 985, 1650, 434,
	1652, 173, 173, 173, 817, 173, 1658, 1661, 713, 430,
	910, 712, 580, 1668, 554, 471, 407, 1757, 1088, 2385,
	905, 403, 861, 170, 173, 2088, 862, 395, 703, 1670,
	1573, 404, 582, 1553, 1569, 410, 2211, 1986, 573, 1036,
	2308, 1039, 1083, 160, 435, 2143, 1088, 64, 2449, 478,
	170, 1033, 1032, 486, 417, 416, 491, 1301, 2469, 1677,
	887, 1714, 1687, 2478, 510, 581, 1692, 754, 1694, 1428,
	748, 2212, 119, 66, 554, 67, 1299, 911, 1443, 2476,
	2251, 115, 994, 161, 1411, 1987, 1447, 1628, 132, 1708,
	1455, 391, 582, 555, 1719, 461, 880, 564, 99, 470,
	1691, 1721, 929, 1487, 1487, 1500, 474, 1512, 1321, 1318,
	717, 717, 1693, 1524, 1525, 1527, 574, 134, 395, 1697,
	1743, 845, 1060, 1695, 2500, 1088, 837, 470, 930, 1891,
	912, 1223, 940, 881, 848, 2492, 878, 2318, 2317, 2300,
	2368, 2071, 2172, 1864, 395, 395, 750, 395, 871, 1860,
	554, 170, 759, 555, 133, 473, 1435, 1330, 1629, 1563,
	1469, 1060, 126, 928, 589, 1715, 2226, 1713, 582, 127,
	1212, 1201, 1345, 2207, 1985, 2208, 1064, 423, 1849, 2411,
	1302, 855, 1729, 473, 2522, 772, 1409, 1412, 118, 930,
	771, 574, 173, 1108, 1829, 556, 1067, 418, 173, 173,
	1833, 1834, 173, 1825, 1839, 2210, 1740, 173, 1831, 2116,
	173, 1362, 1062, 2505, 2213, 1064, 1064, 1832, 173, 2253,
	1408, 1065, 2301, 166, 173, 173, 173, 1870, 1869, 555,
	173, 860, 1707, 173, 571, 1067, 1067, 685, 1063, 173,
	173, 173, 173, 173, 2173, 2025, 1850, 392, 173, 1845,
	173, 1062, 1551, 1837, 173, 556, 1838, 735, 1844, 888,
	1065, 1065, 173, 735, 735, 1861, 1280, 735, 2225, 1548,
	1854, 579, 173, 557, 173, 2490, 173, 1063, 1830, 173,
	1804, 1805, 1806, 173, 1363, 2229, 1865, 1840, 173, 1857,
	173, 1826, 2228, 2209, 1898, 1880, 1900, 173, 861, 1066,
	1280, 1885, 862, 929, 1425, 1547, 558, 820, 483, 860,
	173, 819, 477, 1882, 1306, 393, 1410, 2504, 791, 1423,
	1865, 574, 819, 173, 1856, 1901, 789, 1894, 1904, 780,
	2491, 556, 2106, 557, 2244, 1890, 860, 2184, 1066, 1066,
	1878, 2026, 2298, 1934, 1905, 460, 33, 2027, 2048, 1280,
	1249, 2493, 1472, 1197, 1943, 1922, 760, 2280, 173, 909,
	1304, 761, 1197, 463, 928, 2171, 558, 2299, 2102, 1936,
	1836, 1316, 1305, 459, 32, 458, 29, 628, 701, 1902,
	1919, 1913, 3, 464, 1801, 510, 1962, 776, 510, 1927,
	781, 757, 1419, 419, 2227, 784, 1893, 1764, 1724, 820,
	1420, 395, 1421, 861, 1672, 1609, 1426, 862, 173, 557,
	1280, 1981, 1982, 1983, 510, 510, 395, 806, 759, 1945,
	1946, 1933, 1965, 1956, 1928, 1929, 1947, 1930, 1931, 904,
	467, 898, 1951, 420, 1944, 1602, 1596, 896, 1953, 1802,
	918, 917, 558, 843, 1955, 510, 1280, 1280, 457, 76,
	1249, 1249, 894, 472, 1343, 1280, 1280, 1334, 510, 468,
	456, 75, 892, 421, 482, 422, 1376, 2000, 476, 453,
	21, 790, 1009, 1975, 846, 1376, 2005, 1471, 1972, 788,
	908, 33, 682, 2445, 510, 2408, 469, 2200, 1280, 173,
	2092, 2055, 890, 1997, 884, 173, 1988, 1990, 1991, 2090,
	2002, 1999, 706, 708, 173, 173, 471, 2032, 2036, 32,
	2004, 29, 2070, 787, 1422, 1906, 454, 22, 740, 1728,
	2211, 1424, 1632, 2204, 1625, 1248, 1731, 1232, 1279, 452,
	27, 2202, 1282, 2033, 2059, 2206, 1231, 451, 19, 1976,
	2052, 449, 18, 2083, 1747, 1748, 395, 903, 173, 2082,
	173, 2064, 897, 2046, 735, 2212, 2101, 173, 895, 2051,
	819, 115, 1279, 1229, 2049, 1226, 450, 17, 1224, 444,
	14, 2112, 2109, 893, 1100, 173, 173, 2205, 1829, 2066,
	1094, 1089, 2081, 891, 76, 2067, 1908, 2126, 445, 15,
	443, 13, 725, 173, 1796, 2074, 75, 2342, 2129, 448,
	11, 1705, 932, 173, 2095, 21, 1809, 2480, 1108, 2264,
	2263, 1279, 726, 889, 1325, 883, 2132, 2117, 470, 2107,
	2118, 462, 1576, 820, 2344, 1248, 1248, 2120, 1591, 1592,
	1109, 2121, 1282, 1282, 786, 442, 9, 2122, 2119, 2124,
	1645, 735, 2378, 2145, 2128, 2133, 173, 2127, 1280, 2091,
	1576, 2093, 22, 942, 943, 2219, 1589, 2207, 882, 2208,
	2150, 447, 7, 1706, 2356, 27, 446, 6, 441, 5,
	2330, 2185, 1279, 19, 473, 933, 945, 18, 942, 943,
	936, 1600, 1594, 2407, 2249, 727, 1639, 1627, 1624, 2210,
	484, 1537, 1297, 2146, 1241, 2488, 2503, 491, 2213, 717,
	944, 173, 17, 2186, 173, 14, 1770, 1771, 1279, 1279,
	2170, 820, 942, 943, 1108, 173, 173, 1279, 1279, 173,
	173, 173, 395, 395, 15, 944, 13, 1684, 1683, 2292,
	2190, 2134, 2045, 1992, 1684, 11, 173, 1109, 1940, 1846,
	170, 173, 1816, 173, 1685, 173, 173, 173, 1234, 173,
	1279, 173, 395, 819, 2194, 1534, 2199, 2220, 2187, 2083,
	2191, 173, 173, 2223, 1210, 2082, 735, 1531, 819, 2189,
	395, 9, 395, 1530, 395, 1461, 996, 2209, 1218, 2188,
	2158, 1984, 1903, 2083, 1006, 1004, 916, 2245, 2083, 2082,
	2240, 2195, 2250, 907, 2082, 902, 899, 7, 2081, 2192,
	885, 847, 6, 562, 5, 2306, 465, 1333, 886, 1842,
	2233, 2224, 1109, 2256, 2237, 2248, 1556, 1969, 2401, 2164,
	510, 170, 2081, 1756, 2275, 2254, 2260, 2081, 2255, 170,
	2361, 2276, 510, 2270, 1470, 1007, 2247, 52, 2079, 605,
	2201, 2261, 2073, 1619, 1618, 1111, 1309, 627, 1486, 1377,
	700, 173, 629, 173, 1246, 1108, 173, 630, 1247, 1280,
	1037, 617, 510, 1244, 173, 814, 1643, 510, 1313, 587,
	1108, 2282, 170, 510, 1433, 510, 1451, 510, 1739, 510,
	1000, 510, 597, 609, 2030, 2289, 2294, 608, 1448, 2291,
	841, 2083, 1344, 1847, 1916, 2040, 2257, 2082, 510, 510,
	1361, 1696, 173, 1358, 2310, 819, 1912, 2312, 2089, 173,
	1279, 1198, 2309, 405, 1767, 1280, 2328, 173, 173, 819,
	819, 2083, 821, 812, 510, 2333, 1509, 2082, 1501, 2304,
	2081, 1497, 921, 2327, 1058, 2320, 986, 173, 1644, 1109,
	2296, 2355, 173, 2351, 2345, 2341, 2350, 868, 1923, 173,
	2336, 2352, 2353, 1665, 1050, 2311, 1369, 724, 723, 2372,
	2081, 2509, 2339, 2506, 2242, 2340, 1280, 2338, 2097, 1109,
	1303, 2367, 2366, 2099, 173, 173, 1678, 979, 2358, 2375,
	978, 2364, 173, 710, 2343, 2370, 859, 858, 1202, 2389,
	819, 2374, 2387, 1863, 2498, 173, 2377, 2390, 2086, 819,
	819, 2417, 131, 128, 130, 129, 2321, 2322, 1889, 79,
	31, 30, 98, 97, 821, 2393, 96, 95, 94, 1059,
	93, 92, 173, 91, 173, 90, 89, 173, 88, 1108,
	491, 574, 717, 87, 86, 759, 2398, 2399, 1726, 1727,
	85, 2426, 84, 83, 2428, 82, 395, 2386, 2427, 81,
	2392, 506, 503, 78, 77, 28, 24, 173, 1568, 102,
	2432, 2414, 395, 23, 2430, 395, 2083, 74, 2443, 1581,
	2429, 2442, 2082, 395, 173, 173, 173, 2444, 395, 73,
	1281, 2463, 173, 26, 395, 2455, 16, 2459, 1608, 1249,
	10, 20, 2416, 2468, 57, 1365, 173, 2465, 58, 2413,
	2466, 2467, 56, 55, 820, 2081, 54, 12, 50, 2477,
	2475, 49, 47, 2481, 2419, 1793, 1794, 1795, 46, 45,
	44, 1279, 8, 1249, 2486, 101, 41, 40, 100, 2487,
	113, 110, 112, 109, 111, 114, 106, 107, 2495, 2494,
	2501, 763, 765, 2502, 108, 105, 104, 1645, 37, 2460,
	2461, 2462, 36, 35, 34, 2, 1, 0, 0, 173,
	0, 0, 173, 0, 0, 173, 0, 2519, 2520, 2518,
	0, 0, 1249, 0, 173, 0, 2524, 1279, 0, 0,
	1281, 1281, 0, 1615, 1503, 0, 0, 0, 0, 0,
	759, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 395, 0, 1647, 0, 510, 0, 0, 510, 0,
	510, 0, 395, 395, 0, 1653, 759, 0, 0, 0,
	1245, 0, 0, 0, 1581, 840, 0, 0, 1279, 0,
	735, 844, 0, 1249, 0, 0, 0, 0, 821, 735,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 942, 943, 0, 1248, 0, 0, 0, 0, 1249,
	1249, 1282, 2288, 0, 0, 0, 0, 0, 1249, 1249,
	0, 0, 0, 0, 945, 0, 0, 0, 606, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 0, 0, 1282, 0, 0, 944, 2314,
	0, 1249, 0, 0, 0, 0, 0, 0, 1689, 0,
	1245, 1245, 0, 0, 1960, 1961, 821, 0, 0, 0,
	0, 0, 0, 0, 395, 395, 395, 0, 395, 980,
	981, 982, 983, 984, 0, 0, 0, 1248, 0, 993,
	71, 0, 1110, 0, 1282, 0, 0, 395, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 0, 2028, 567, 0, 0, 575, 1248, 0,
	1109, 0, 0, 0, 0, 1282, 942, 943, 0, 0,
	0, 0, 0, 736, 71, 0, 0, 1110, 0, 0,
	960, 38, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 39, 2404, 1248, 1248, 0, 0, 0, 0,
	0, 1282, 1282, 1248, 1248, 42, 0, 0, 0, 0,
	1282, 1282, 0, 944, 0, 0, 0, 0, 2420, 2421,
	2422, 1249, 1055, 1055, 0, 0, 0, 48, 0, 587,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 60, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 395, 0, 0, 820, 0,
	0, 395, 395, 0, 0, 395, 0, 0, 0, 820,
	1568, 0, 63, 1568, 0, 0, 0, 0, 0, 0,
	0, 1852, 0, 0, 1110, 0, 0, 395, 1858, 1859,
	0, 0, 0, 1581, 0, 0, 1866, 0, 0, 0,
	0, 0, 1871, 1872, 1874, 1876, 1877, 0, 0, 0,
	0, 395, 0, 1884, 1110, 960, 0, 1887, 0, 0,
	0, 0, 1503, 1503, 0, 395, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 1210, 0, 1210, 0, 510,
	0, 0, 395, 587, 587, 0, 1911, 0, 0, 0,
	0, 395, 0, 1921, 64, 0, 0, 0, 0, 0,
	395, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1689, 0, 0, 1248, 0, 0, 119,
	66, 0, 67, 1282, 0, 0, 1689, 0, 961, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 1503,
	1503, 1503, 461, 0, 0, 99, 0, 1359, 0, 1364,
	0, 0, 1249, 0, 0, 1371, 0, 0, 0, 0,
	0, 395, 0, 0, 134, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 0, 1413, 821,
	1415, 1416, 1417, 1418, 0, 0, 0, 0, 575, 0,
	0, 133, 0, 0, 0, 0, 0, 1441, 1249, 126,
	0, 1994, 0, 0, 993, 0, 127, 0, 0, 0,
	0, 0, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 1482, 1483, 118, 0, 1499, 0, 1511,
	1513, 1518, 1521, 1522, 1523, 0, 0, 820, 0, 0,
	0, 0, 2279, 0, 0, 0, 0, 0, 0, 1249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	0, 0, 395, 2303, 0, 1109, 0, 0, 1568, 0,
	0, 0, 0, 0, 0, 0, 0, 759, 1568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2078, 1281, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 1282, 0, 567, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 1503,
	0, 1581, 0, 1210, 0, 0, 0, 989, 0, 992,
	2114, 2357, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 1281, 0, 0, 0, 0, 0, 395, 395,
	0, 0, 0, 1248, 0, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 2140, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 2142, 1503, 1503, 1503,
	1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
	1503, 1503, 1503, 1503, 1503, 1503, 0, 1503, 0, 1245,
	0, 0, 0, 1281, 1248, 0, 0, 0, 0, 0,
	820, 1282, 0, 0, 0, 0, 0, 0, 0, 2165,
	0, 0, 0, 0, 0, 820, 0, 0, 0, 0,
	0, 0, 0, 1245, 0, 0, 0, 0, 0, 1281,
	1281, 0, 0, 0, 0, 0, 0, 0, 1281, 1281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 1110, 0, 1076, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 759, 0, 38,
	0, 1281, 1245, 0, 0, 0, 0, 0, 1568, 759,
	39, 0, 2197, 2198, 1581, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 0, 2078, 759,
	0, 0, 1109, 0, 2231, 0, 2232, 0, 395, 2234,
	2235, 0, 395, 0, 2239, 48, 0, 1109, 0, 0,
	0, 0, 2078, 0, 759, 1615, 0, 2078, 0, 0,
	0, 0, 0, 1245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 60, 820, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 820, 0, 1245,
	1245, 0, 0, 821, 0, 0, 0, 0, 1245, 1245,
	63, 0, 0, 0, 821, 0, 0, 1710, 1711, 0,
	0, 0, 0, 1716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1245, 0, 0, 1581, 0, 2295, 0, 0, 2297,
	0, 0, 71, 0, 0, 1735, 0, 395, 0, 0,
	2078, 1281, 1742, 0, 0, 1746, 0, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 820, 0, 0,
	567, 0, 1760, 567, 567, 2329, 0, 0, 0, 0,
	2078, 0, 64, 0, 0, 395, 0, 0, 0, 0,
	0, 0, 759, 0, 0, 0, 1109, 0, 0, 0,
	2140, 2140, 0, 0, 0, 0, 993, 119, 66, 0,
	67, 0, 0, 1518, 1518, 1518, 1431, 0, 0, 0,
	2363, 0, 0, 132, 0, 1568, 0, 1690, 0, 575,
	461, 0, 1210, 99, 992, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 587, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 2379, 2380, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2397, 0,
	0, 0, 0, 0, 0, 38, 1503, 0, 0, 133,
	0, 1245, 0, 0, 0, 0, 39, 126, 0, 0,
	0, 736, 0, 0, 127, 2412, 0, 759, 0, 42,
	395, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 118, 0, 2078, 0, 1503, 0, 0,
	71, 48, 0, 1914, 0, 0, 71, 0, 0, 0,
	2363, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1932, 0, 759, 759, 759,
	59, 0, 1281, 0, 0, 395, 0, 60, 0, 61,
	0, 0, 587, 587, 0, 0, 0, 0, 0, 2474,
	0, 0, 0, 0, 0, 587, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 1503, 63, 1954, 0, 0,
	0, 0, 1371, 0, 0, 0, 0, 0, 1958, 0,
	0, 1959, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 0, 1964, 0, 0, 0, 0, 0, 0,
	0, 0, 1973, 0, 0, 0, 0, 0, 0, 0,
	1977, 0, 2514, 1932, 0, 2517, 0, 0, 395, 0,
	0, 0, 0, 71, 0, 71, 0, 395, 0, 0,
	0, 0, 0, 2001, 0, 0, 0, 2003, 0, 1281,
	0, 0, 0, 0, 71, 0, 0, 0, 64, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	2034, 2035, 1245, 119, 66, 0, 67, 0, 0, 2041,
	2042, 2043, 0, 0, 1068, 0, 0, 0, 0, 132,
	0, 0, 0, 1341, 0, 0, 461, 0, 0, 99,
	38, 0, 0, 0, 0, 821, 2054, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 0, 0, 134, 0,
	821, 0, 0, 0, 42, 0, 0, 0, 1245, 0,
	0, 0, 0, 0, 942, 943, 2075, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 48, 0, 0, 0,
	965, 0, 71, 0, 0, 133, 0, 945, 0, 0,
	976, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 59, 0, 0, 0, 1245,
	0, 944, 60, 0, 61, 0, 1055, 959, 0, 118,
	0, 0, 0, 0, 0, 587, 0, 942, 943, 0,
	962, 963, 964, 972, 973, 974, 0, 1110, 0, 0,
	0, 63, 0, 965, 0, 0, 0, 0, 0, 0,
	945, 1431, 1110, 976, 0, 0, 0, 0, 0, 0,
	0, 2149, 0, 0, 0, 2152, 2153, 0, 0, 0,
	2155, 992, 950, 0, 944, 0, 0, 2157, 0, 2159,
	959, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 969, 977, 0, 2166, 0, 0, 0, 0,
	0, 821, 821, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 967, 0, 2175, 0,
	0, 0, 0, 960, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 119, 66,
	0, 67, 0, 0, 0, 969, 977, 0, 966, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 461, 821, 975, 99, 0, 0, 0, 0, 2221,
	736, 821, 821, 0, 0, 0, 736, 736, 0, 967,
	736, 0, 0, 134, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 942,
	943, 1110, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 966, 970, 0, 0, 965, 0, 0, 0, 0,
	133, 0, 945, 71, 0, 976, 0, 0, 126, 71,
	0, 0, 0, 0, 0, 127, 2271, 2272, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 959, 71, 118, 0, 71, 942, 943, 961,
	962, 963, 964, 972, 973, 974, 575, 2284, 0, 0,
	0, 0, 0, 2287, 0, 970, 0, 0, 0, 0,
	945, 968, 0, 976, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 0, 0, 944, 0, 1812, 950, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 2319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 975, 0, 956, 957, 958,
	971, 0, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 967, 0, 0, 0, 950, 0, 0, 960, 1811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 943, 0, 0, 969, 977, 972, 973, 974,
	0, 2369, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 945, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 438, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 960, 0, 944, 0,
	0, 0, 0, 0, 959, 0, 587, 38, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 39, 0,
	0, 0, 71, 0, 0, 0, 0, 970, 0, 0,
	0, 42, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 950,
	0, 2441, 2441, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 2456, 0, 969,
	977, 0, 59, 0, 0, 970, 0, 0, 0, 60,
	0, 61, 0, 0, 0, 0, 968, 2441, 0, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 967, 0, 0, 0, 0, 63, 0,
	960, 1810, 0, 0, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2441, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 956, 957, 958,
	971, 0, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 461, 736,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 127, 0, 71, 0, 0, 625, 614, 615,
	612, 613, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 178, 179, 180, 0,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 610, 641, 661, 662, 344, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 2440, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 71, 213,
	654, 0, 356, 0, 0, 214, 215, 216, 217, 650,
	652, 2346, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 0,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 655, 693, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 593, 0, 622, 651, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 645, 251, 252, 253, 254, 255,
	0, 256, 646, 257, 373, 258, 992, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 599, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 639, 293, 282, 283,
	294, 0, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 647, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 648, 649, 620, 315,
	316, 2439, 318, 0, 0, 319, 320, 321, 322, 640,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 591, 0, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 175, 176, 1112, 177, 1113, 1114, 1115,
	1116, 333, 1117, 1118, 1119, 1120, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 1121, 182, 340, 341,
	183, 184, 1122, 1123, 342, 343, 344, 1124, 185, 345,
	1125, 823, 1126, 186, 187, 188, 0, 189, 1127, 190,
	191, 192, 1128, 687, 193, 194, 195, 1129, 1130, 1132,
	1131, 1133, 1134, 1135, 196, 197, 396, 198, 346, 199,
	347, 348, 1136, 200, 1137, 201, 1138, 202, 1139, 1140,
	203, 204, 1141, 205, 1142, 0, 1143, 349, 206, 207,
	208, 350, 351, 1144, 1145, 1146, 209, 210, 352, 353,
	354, 0, 211, 1147, 212, 1148, 1149, 688, 1150, 213,
	355, 1151, 356, 1152, 0, 214, 215, 216, 217, 357,
	358, 690, 1153, 221, 1154, 218, 1155, 689, 219, 359,
	220, 360, 361, 362, 363, 364, 1156, 365, 1157, 691,
	222, 223, 224, 692, 225, 226, 227, 1158, 229, 228,
	1159, 366, 693, 230, 231, 694, 1160, 232, 233, 1161,
	1162, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 1163, 1164, 1165, 368, 244, 369,
	245, 246, 1166, 247, 1167, 1168, 248, 1169, 1170, 249,
	370, 696, 250, 697, 371, 251, 252, 253, 254, 255,
	1171, 256, 372, 257, 373, 258, 1172, 259, 260, 261,
	262, 263, 374, 264, 265, 1173, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 1174, 278,
	698, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	1175, 290, 376, 289, 291, 292, 1176, 293, 282, 283,
	294, 699, 295, 377, 378, 296, 1177, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 1178, 304, 1179,
	305, 306, 307, 308, 309, 310, 311, 312, 1180, 381,
	382, 383, 1181, 1182, 313, 314, 384, 385, 1183, 315,
	316, 317, 318, 1184, 1185, 319, 320, 321, 322, 1186,
	323, 1187, 386, 324, 325, 326, 387, 388, 1188, 1189,
	327, 1190, 1191, 1192, 1193, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 0, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 0, 0, 1562, 175, 176,
	1112, 177, 1113, 1114, 1115, 1116, 333, 1117, 1118, 1119,
	1120, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 1121, 182, 340, 341, 183, 184, 1122, 1123, 342,
	343, 344, 1124, 185, 345, 1125, 823, 1126, 186, 187,
	188, 0, 189, 1127, 190, 191, 192, 1128, 687, 193,
	194, 195, 1129, 1130, 1132, 1131, 1133, 1134, 1135, 196,
	197, 396, 198, 346, 199, 347, 348, 1136, 200, 1137,
	201, 1138, 202, 1139, 1140, 203, 204, 1141, 205, 1142,
	0, 1143, 349, 206, 207, 208, 350, 351, 1144, 1145,
	1146, 209, 210, 352, 353, 354, 0, 211, 1147, 212,
	1148, 1149, 688, 1150, 213, 355, 1151, 356, 1152, 0,
	214, 215, 216, 217, 357, 358, 690, 1153, 221, 1154,
	218, 1155, 689, 219, 359, 220, 360, 361, 362, 363,
	364, 1156, 365, 1157, 691, 222, 223, 224, 692, 225,
	226, 227, 1158, 229, 228, 1159, 366, 693, 230, 231,
	694, 1160, 232, 233, 1161, 1162, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 1163,
	1164, 1165, 368, 244, 369, 245, 246, 1166, 247, 1167,
	1168, 248, 1169, 1170, 249, 370, 696, 250, 697, 371,
	251, 252, 253, 254, 255, 1171, 256, 372, 257, 373,
	258, 1172, 259, 260, 261, 262, 263, 374, 264, 265,
	1173, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 1174, 278, 698, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 1175, 290, 376, 289, 291,
	292, 1176, 293, 282, 283, 294, 699, 295, 377, 378,
	296, 1177, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 1178, 304, 1179, 305, 306, 307, 308, 309,
	310, 311, 312, 1180, 381, 382, 383, 1181, 1182, 313,
	314, 384, 385, 1183, 315, 316, 317, 318, 1184, 1185,
	319, 320, 321, 322, 1186, 323, 1187, 386, 324, 325,
	326, 387, 388, 1188, 1189, 327, 1190, 1191, 1192, 1193,
	328, 329, 330, 331, 332, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2193, 175, 176, 1112, 177, 1113, 1114,
	1115, 1116, 333, 1117, 1118, 1119, 1120, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 1121, 182, 340,
	341, 183, 184, 1122, 1123, 342, 343, 344, 1124, 185,
	345, 1125, 823, 1126, 186, 187, 188, 0, 189, 1127,
	190, 191, 192, 1128, 687, 193, 194, 195, 1129, 1130,
	1132, 1131, 1133, 1134, 1135, 196, 197, 396, 198, 346,
	199, 347, 348, 1136, 200, 1137, 201, 1138, 202, 1139,
	1140, 203, 204, 1141, 205, 1142, 0, 1143, 349, 206,
	207, 208, 350, 351, 1144, 1145, 1146, 209, 210, 352,
	353, 354, 0, 211, 1147, 212, 1148, 1149, 688, 1150,
	213, 355, 1151, 356, 1152, 0, 214, 215, 216, 217,
	357, 358, 690, 1153, 221, 1154, 218, 1155, 689, 219,
	359, 220, 360, 361, 362, 363, 364, 1156, 365, 1157,
	691, 222, 223, 224, 692, 225, 226, 227, 1158, 229,
	228, 1159, 366, 693, 230, 231, 694, 1160, 232, 233,
	1161, 1162, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 1163, 1164, 1165, 368, 244,
	369, 245, 246, 1166, 247, 1167, 1168, 248, 1169, 1170,
	249, 370, 696, 250, 697, 371, 251, 252, 253, 254,
	255, 1171, 256, 372, 257, 373, 258, 1172, 259, 260,
	261, 262, 263, 374, 264, 265, 1173, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 1174,
	278, 698, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 1175, 290, 376, 289, 291, 292, 1176, 293, 282,
	283, 294, 699, 295, 377, 378, 296, 1177, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 1178, 304,
	1179, 305, 306, 307, 308, 309, 310, 311, 312, 1180,
	381, 382, 383, 1181, 1182, 313, 314, 384, 385, 1183,
	315, 316, 317, 318, 1184, 1185, 319, 320, 321, 322,
	1186, 323, 1187, 386, 324, 325, 326, 387, 388, 1188,
	1189, 327, 1190, 1191, 1192, 1193, 328, 329, 330, 331,
	332, 1107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 175, 176, 1112,
	177, 1113, 1114, 1115, 1116, 333, 1117, 1118, 1119, 1120,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	1121, 182, 340, 341, 183, 184, 1122, 1123, 342, 343,
	344, 1124, 185, 345, 1125, 823, 1126, 186, 187, 188,
	0, 189, 1127, 190, 191, 192, 1128, 687, 193, 194,
	195, 1129, 1130, 1132, 1131, 1133, 1134, 1135, 196, 197,
	396, 198, 346, 199, 347, 348, 1136, 200, 1137, 201,
	1138, 202, 1139, 1140, 203, 204, 1141, 205, 1142, 0,
	1143, 349, 206, 207, 208, 350, 351, 1144, 1145, 1146,
	209, 210, 352, 353, 354, 0, 211, 1147, 212, 1148,
	1149, 688, 1150, 213, 355, 1151, 356, 1152, 0, 214,
	215, 216, 217, 357, 358, 690, 1153, 221, 1154, 218,
	1155, 689, 219, 359, 220, 360, 361, 362, 363, 364,
	1156, 365, 1157, 691, 222, 223, 224, 692, 225, 226,
	227, 1158, 229, 228, 1159, 366, 693, 230, 231, 694,
	1160, 232, 233, 1161, 1162, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 1163, 1164,
	1165, 368, 244, 369, 245, 246, 1166, 247, 1167, 1168,
	248, 1169, 1170, 249, 370, 696, 250, 697, 371, 251,
	252, 253, 254, 255, 1171, 256, 372, 257, 373, 258,
	1172, 259, 260, 261, 262, 263, 374, 264, 265, 1173,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 1174, 278, 698, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 1175, 290, 376, 289, 291, 292,
	1176, 293, 282, 283, 294, 699, 295, 377, 378, 296,
	1177, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 1178, 304, 1179, 305, 306, 307, 308, 309, 310,
	311, 312, 1180, 381, 382, 383, 1181, 1182, 313, 314,
	384, 385, 1183, 315, 316, 317, 318, 1184, 1185, 319,
	320, 321, 322, 1186, 323, 1187, 386, 324, 325, 326,
	387, 388, 1188, 1189, 327, 1190, 1191, 1192, 1193, 328,
	329, 330, 331, 332, 1460, 0, 625, 614, 615, 612,
	613, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 1457, 177, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 178, 179, 180, 334, 657,
	336, 658, 181, 659, 660, 0, 182, 340, 341, 183,
	184, 610, 641, 661, 662, 344, 0, 185, 653, 0,
	633, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 1458, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 654,
	0, 356, 0, 0, 214, 215, 216, 217, 650, 652,
	690, 0, 221, 0, 218, 0, 689, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 222,
	223, 224, 692, 225, 226, 227, 0, 229, 228, 0,
	655, 693, 230, 231, 694, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 695, 240,
	241, 243, 242, 593, 0, 622, 651, 244, 675, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	696, 250, 697, 645, 251, 252, 253, 254, 255, 0,
	256, 646, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 676, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 698,
	279, 280, 599, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 639, 293, 282, 283, 294,
	699, 295, 677, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 678, 300, 301, 647, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 679,
	680, 0, 0, 313, 314, 648, 649, 620, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 640, 323,
	0, 386, 324, 325, 326, 387, 681, 1456, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 1459, 625, 614, 615, 612, 613, 604, 600,
	1454, 0, 0, 0, 0, 603, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 588, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 132, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 134, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 822, 681, 0, 0, 327, 0, 0, 0,
	126, 328, 329, 330, 331, 332, 594, 127, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 0, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 576, 603, 625, 614, 615, 612, 613, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 132, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 134, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 822, 681, 0, 0, 327, 0, 0, 0,
	126, 328, 329, 330, 331, 332, 594, 127, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 995, 0, 0, 0,
	0, 0, 603, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 178, 179,
	180, 334, 657, 336, 658, 181, 659, 660, 0, 182,
	340, 341, 183, 184, 610, 641, 661, 662, 344, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 687, 193, 194, 195, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 0, 200, 0, 201, 0, 202,
	0, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 0, 0, 209, 210,
	666, 667, 668, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 654, 0, 356, 0, 0, 214, 215, 216,
	217, 650, 652, 690, 0, 221, 0, 218, 0, 689,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 222, 223, 224, 692, 225, 226, 227, 0,
	229, 228, 0, 655, 693, 230, 231, 694, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 695, 240, 241, 243, 242, 593, 0, 622, 651,
	244, 675, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 696, 250, 697, 645, 251, 252, 253,
	254, 255, 0, 256, 646, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 676, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 698, 279, 280, 599, 281, 0, 285, 286,
	287, 288, 132, 290, 376, 289, 291, 292, 639, 293,
	282, 283, 294, 699, 295, 677, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 678, 300, 301, 647, 0,
	304, 134, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 679, 680, 0, 0, 313, 314, 648, 649,
	620, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 640, 323, 0, 386, 324, 325, 326, 822, 681,
	0, 0, 327, 0, 0, 0, 126, 328, 329, 330,
	331, 332, 594, 127, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 590, 591, 625, 614, 615, 612, 613,
	604, 0, 995, 0, 0, 0, 0, 0, 603, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 642,
	607, 0, 0, 0, 178, 179, 180, 334, 657, 336,
	658, 181, 659, 660, 1514, 182, 340, 341, 183, 184,
	610, 641, 661, 662, 344, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	0, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 598, 206, 207, 208, 643,
	644, 621, 0, 0, 209, 210, 666, 667, 668, 0,
	211, 0, 212, 0, 1519, 688, 0, 213, 654, 0,
	356, 0, 0, 214, 215, 216, 217, 650, 652, 690,
	0, 221, 0, 218, 0, 689, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 1515, 655,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 593, 0, 622, 651, 244, 675, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 645, 251, 252, 253, 254, 255, 0, 256,
	646, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	676, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 599, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 639, 293, 282, 283, 294, 699,
	295, 677, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 678, 300, 301, 647, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 679, 680,
	0, 1516, 313, 314, 648, 649, 620, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 640, 323, 0,
	386, 324, 325, 326, 387, 681, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 0, 0, 0, 0, 0, 0, 0, 600, 0,
	0, 0, 0, 584, 603, 625, 614, 615, 612, 613,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 642,
	607, 0, 0, 0, 178, 179, 180, 334, 657, 336,
	658, 181, 659, 660, 0, 182, 340, 341, 183, 184,
	610, 641, 661, 662, 344, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	588, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 598, 206, 207, 208, 643,
	644, 621, 0, 0, 209, 210, 666, 667, 668, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 654, 0,
	356, 0, 0, 214, 215, 216, 217, 650, 652, 690,
	0, 221, 0, 218, 0, 689, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 0, 655,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 593, 0, 622, 651, 244, 675, 245, 246,
	0, 247, 586, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 645, 251, 252, 253, 254, 255, 0, 256,
	646, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	676, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 599, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 639, 293, 282, 283, 294, 699,
	295, 677, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 678, 300, 301, 647, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 679, 680,
	0, 0, 313, 314, 648, 649, 620, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 640, 323, 0,
	386, 324, 325, 326, 387, 681, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 625, 614, 615, 612, 613, 604, 0, 600, 0,
	0, 0, 0, 0, 603, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 2123,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 1056, 625, 614,
	615, 612, 613, 604, 600, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 1373, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 1372, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 625, 614, 615, 612, 613, 604,
	0, 600, 0, 0, 0, 0, 0, 603, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 178, 179, 180, 334, 657, 336, 658,
	181, 659, 660, 0, 182, 340, 341, 183, 184, 610,
	641, 661, 662, 344, 0, 185, 653, 0, 633, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	687, 193, 194, 195, 0, 634, 635, 637, 0, 636,
	638, 196, 197, 396, 198, 663, 199, 664, 665, 588,
	200, 0, 201, 0, 202, 0, 0, 656, 204, 0,
	205, 0, 0, 0, 598, 206, 207, 208, 643, 644,
	621, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 688, 0, 213, 654, 0, 356,
	0, 0, 214, 215, 216, 217, 650, 652, 690, 0,
	221, 0, 218, 0, 689, 219, 669, 220, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 222, 223, 224,
	692, 225, 226, 227, 0, 229, 228, 0, 655, 693,
	230, 231, 694, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 695, 240, 241, 243,
	242, 593, 0, 622, 651, 244, 675, 245, 246, 0,
	247, 586, 0, 248, 0, 0, 249, 370, 696, 250,
	697, 645, 251, 252, 253, 254, 255, 0, 256, 646,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 676,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 698, 279, 280,
	599, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 639, 293, 282, 283, 294, 699, 295,
	677, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	678, 300, 301, 647, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 679, 680, 0,
	0, 313, 314, 648, 649, 620, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 640, 323, 0, 386,
	324, 325, 326, 387, 681, 0, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 594, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	625, 614, 615, 612, 613, 604, 0, 600, 0, 0,
	0, 0, 0, 603, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 0, 0, 0,
	0, 999, 1449, 600, 0, 0, 0, 0, 0, 603,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 588, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 625, 614, 615, 612,
	613, 604, 0, 600, 0, 0, 0, 0, 0, 603,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 178, 179, 180, 334, 657,
	336, 658, 181, 659, 660, 0, 182, 340, 341, 183,
	184, 610, 641, 661, 662, 344, 0, 185, 653, 0,
	633, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 654,
	0, 356, 0, 0, 214, 215, 216, 217, 650, 652,
	690, 0, 221, 0, 218, 0, 689, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 222,
	223, 224, 692, 225, 226, 227, 0, 229, 228, 0,
	655, 693, 230, 231, 694, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 695, 240,
	241, 243, 242, 593, 0, 622, 651, 244, 675, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	696, 250, 697, 645, 251, 252, 253, 254, 255, 0,
	256, 646, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 676, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 698,
	279, 280, 599, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 639, 293, 282, 283, 294,
	699, 295, 677, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 678, 300, 301, 647, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 679,
	680, 0, 0, 313, 314, 648, 649, 620, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 640, 323,
	0, 386, 324, 325, 326, 387, 681, 0, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 625, 614, 615, 612, 613, 604, 0, 600,
	2031, 0, 0, 0, 0, 603, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 642, 607, 0, 0,
	0, 178, 179, 180, 334, 657, 336, 658, 181, 659,
	660, 0, 182, 340, 341, 183, 184, 610, 641, 661,
	662, 344, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 654, 0, 356, 0, 0,
	214, 215, 216, 217, 650, 652, 690, 0, 221, 0,
	218, 0, 689, 219, 669, 220, 670, 671, 672, 673,
	674, 0, 632, 0, 691, 222, 223, 224, 692, 225,
	226, 227, 0, 229, 228, 0, 655, 693, 230, 231,
	694, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 593,
	0, 622, 651, 244, 675, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 696, 250, 697, 645,
	251, 252, 253, 254, 255, 0, 256, 646, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 676, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 698, 279, 280, 599, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 639, 293, 282, 283, 294, 699, 295, 677, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 678, 300,
	301, 647, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 679, 680, 0, 0, 313,
	314, 648, 649, 620, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 640, 323, 0, 386, 324, 325,
	326, 387, 681, 1980, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 594, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 590, 591, 625, 614,
	615, 612, 613, 604, 0, 600, 0, 0, 0, 0,
	0, 603, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 625, 614, 615, 612, 613, 604,
	0, 600, 1970, 0, 0, 0, 0, 603, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 178, 179, 180, 334, 657, 336, 658,
	181, 659, 660, 0, 182, 340, 341, 183, 184, 610,
	641, 661, 662, 344, 0, 185, 653, 0, 633, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	687, 193, 194, 195, 0, 634, 635, 637, 0, 636,
	638, 196, 197, 396, 198, 663, 199, 664, 665, 0,
	200, 0, 201, 0, 202, 0, 0, 656, 204, 0,
	205, 0, 0, 0, 598, 206, 207, 208, 643, 644,
	621, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 688, 0, 213, 654, 0, 356,
	0, 0, 214, 215, 216, 217, 650, 652, 690, 0,
	221, 0, 218, 0, 689, 219, 669, 220, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 222, 223, 224,
	692, 225, 226, 227, 0, 229, 228, 0, 655, 693,
	230, 231, 694, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 695, 240, 241, 243,
	242, 593, 0, 622, 651, 244, 675, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 696, 250,
	697, 645, 251, 252, 253, 254, 255, 0, 256, 646,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 676,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 698, 279, 280,
	599, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 639, 293, 282, 283, 294, 699, 295,
	677, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	678, 300, 301, 647, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 679, 680, 0,
	0, 313, 314, 648, 649, 620, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 640, 323, 0, 386,
	324, 325, 326, 387, 681, 0, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 594, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	1056, 625, 614, 615, 612, 613, 604, 600, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	1519, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1564,
	603, 625, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1528,
	603, 625, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1526,
	603, 625, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1510,
	603, 625, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1498,
	603, 625, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1496,
	603, 1488, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 1491, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	1492, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 1493, 1490,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 1494, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 1489, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1485,
	603, 1488, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 1491, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	1492, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 1493, 1490,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 1494, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 1489, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 625, 614, 615,
	612, 613, 604, 0, 600, 0, 0, 0, 0, 0,
	603, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 610, 641, 661, 662, 344, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	654, 0, 356, 0, 0, 214, 215, 216, 217, 650,
	652, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 655, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 593, 0, 622, 651, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 645, 251, 252, 253, 254, 255,
	0, 256, 646, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 599, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 639, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 647, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 648, 649, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 640,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	594, 0, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 625, 614, 615, 612, 613, 604, 0,
	600, 1444, 0, 0, 0, 0, 603, 0, 0, 175,
	176, 1360, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 681, 0, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 0, 0, 0, 0, 0, 600, 0, 0, 0,
	0, 766, 603, 625, 614, 615, 612, 613, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 681, 0, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 0, 0, 0, 0, 0, 600, 0, 0, 0,
	0, 764, 603, 625, 614, 615, 612, 613, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 681, 0, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 600, 0, 0, 0,
	0, 0, 603, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 178, 179,
	180, 334, 657, 336, 658, 181, 659, 660, 0, 182,
	340, 341, 183, 184, 610, 641, 661, 662, 344, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 687, 193, 194, 2440, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 0, 200, 0, 201, 0, 202,
	0, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 0, 0, 209, 210,
	666, 667, 668, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 654, 0, 356, 0, 0, 214, 215, 216,
	217, 650, 652, 690, 0, 221, 0, 218, 0, 689,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 222, 223, 224, 692, 225, 226, 227, 0,
	229, 228, 0, 655, 693, 230, 231, 694, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 695, 240, 241, 243, 242, 593, 0, 622, 651,
	244, 675, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 696, 250, 697, 645, 251, 252, 253,
	254, 255, 0, 256, 646, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 676, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 698, 279, 280, 599, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 639, 293,
	282, 283, 294, 699, 295, 677, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 678, 300, 301, 647, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 679, 680, 0, 0, 313, 314, 648, 649,
	620, 315, 316, 2439, 318, 0, 0, 319, 320, 321,
	322, 640, 323, 0, 386, 324, 325, 326, 387, 681,
	0, 0, 327, 0, 0, 0, 0, 328, 329, 330,
	331, 332, 594, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 590, 591, 625, 614, 615, 612, 613,
	604, 0, 600, 0, 0, 0, 0, 0, 603, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 642,
	607, 0, 0, 0, 178, 179, 180, 334, 657, 336,
	658, 181, 659, 660, 0, 182, 340, 341, 183, 184,
	610, 641, 661, 662, 344, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	0, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 598, 206, 207, 208, 643,
	644, 621, 0, 0, 209, 210, 666, 667, 668, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 654, 0,
	356, 0, 0, 214, 215, 216, 217, 650, 652, 690,
	0, 221, 0, 218, 0, 689, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 0, 655,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 593, 0, 622, 651, 244, 675, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 645, 251, 252, 253, 254, 255, 0, 256,
	646, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	676, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 599, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 639, 293, 282, 283, 294, 699,
	295, 677, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 678, 300, 301, 647, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 679, 680,
	0, 0, 313, 314, 648, 649, 620, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 640, 323, 0,
	386, 324, 325, 326, 387, 681, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 625, 614, 615, 612, 613, 604, 0, 600, 0,
	0, 0, 0, 0, 603, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 2438, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	2440, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 2439, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 625, 614, 615,
	612, 613, 604, 0, 600, 0, 0, 0, 0, 0,
	603, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 610, 641, 661, 662, 344, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	654, 0, 356, 0, 0, 214, 215, 216, 217, 650,
	652, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 655, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 0, 0, 622, 651, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 645, 251, 252, 253, 254, 255,
	0, 256, 646, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 1508, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 639, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 647, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 648, 649, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 640,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	625, 614, 615, 612, 613, 604, 1506, 0, 0, 0,
	0, 1504, 1505, 0, 0, 0, 175, 176, 0, 177,
	1507, 0, 0, 0, 642, 607, 603, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 0, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 0, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 1508, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 1507, 0, 0, 0, 642, 0, 603,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 641,
	342, 343, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 643, 644, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	0, 0, 0, 651, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 648, 649, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 0, 327, 815, 0, 818,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 2080, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 823, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 687, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 357, 358, 690, 0, 221, 0, 218, 0, 689,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 691, 222, 223, 224, 692, 225, 226, 227, 0,
	229, 228, 0, 366, 693, 230, 231, 694, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 695, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 696, 250, 697, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 698, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 132, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 699, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 134, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 822, 388,
	0, 0, 327, 576, 0, 172, 126, 328, 329, 330,
	331, 332, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 118, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 739, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 132, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 134, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 822, 388, 0, 0, 327, 0,
	172, 0, 126, 328, 329, 330, 331, 332, 0, 127,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 733, 0, 1078, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 357, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 739, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 132, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 134, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 822,
	388, 0, 0, 327, 576, 0, 172, 126, 328, 329,
	330, 331, 332, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 733, 0, 1078, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 132,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 134, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 822, 388, 0, 0, 327,
	1828, 0, 172, 126, 328, 329, 330, 331, 332, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 118,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	739, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 0, 0, 327, 732, 0, 172, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 733, 0, 738, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 739, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	0, 327, 0, 172, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 733,
	0, 738, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 739, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 0, 327, 0, 172, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 733, 0, 738, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	0, 327, 0, 0, 172, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 1195, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 0, 327, 0, 172,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 1646, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 357, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 0, 327, 0, 172, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 1995, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 625, 614, 615,
	612, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 1081, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 0, 0, 661, 662, 344, 0, 185, 345,
	0, 823, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 366, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 0, 0, 622, 368, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 384, 385, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	873, 0, 818, 877, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 823, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 687, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 690, 0, 221, 0,
	218, 0, 689, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 691, 222, 223, 224, 692, 225,
	226, 227, 0, 229, 228, 0, 366, 693, 230, 231,
	694, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 696, 250, 697, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 698, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 699, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 0, 481, 327, 172, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 168, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 167, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 0, 165, 327,
	172, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 171, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 168,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 357, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 167, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 818, 877, 327, 0, 0, 875, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 171, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 823, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 690, 0, 221, 0, 218,
	0, 689, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 366, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 699, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 172, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 168, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 167, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 818, 877, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 171, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 823, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 690, 0, 221,
	0, 218, 0, 689, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 366, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 699, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 172, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 818, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	171, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 823,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 690,
	0, 221, 0, 218, 0, 689, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 0, 366,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 699,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 172, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 1584, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 1582, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 1623, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 1587, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 1621, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 1586, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 1622, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 172, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 1584, 185, 345,
	0, 0, 1579, 186, 187, 188, 0, 189, 1582, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 1587, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 1578,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 1586, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 1585, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 793,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 739,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 745, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 747, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 739, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 741, 327, 172,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 743, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 739, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 413, 327, 172, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 412, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 411, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 172, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	1567, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 172, 2141, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 172, 2141, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 2138, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 172, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 739, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 1349,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 1347, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 172, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 175, 176, 1329, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 0, 507, 327,
	172, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 852,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 357, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 509, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 504, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 0, 1209, 327, 172, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 1208, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 507, 327, 172, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 852, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 509,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	504, 382, 383, 0, 0, 313, 853, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	507, 327, 172, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 498, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 509, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 836,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 504, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 0, 811, 327, 172, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 810, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 0, 808, 327,
	172, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 807, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 0, 804, 327, 172, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 803, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 801, 327, 172, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	800, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	797, 327, 172, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 796, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 172, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 175,
	176, 785, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 783, 327, 172, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 782,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 779,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 777, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 773, 327, 172,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 775, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 751, 327, 172, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 753, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 749, 327, 172, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 507,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 498, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 497, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 509, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 499, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 500, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 504, 382, 383, 0, 0, 313, 502,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 489, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 490, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 487, 327, 172,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 357, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 479, 327, 172, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 436, 327, 172, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 172, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 172,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 1875, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	172, 0, 327, 0, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 1873, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 172, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 1862, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 172, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 490, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 172, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 1219,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 0, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 172, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	715, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 172, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 0, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 0, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 0, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 942, 943,
	0, 962, 963, 964, 972, 973, 974, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 976, 0, 942, 943, 0, 962,
	963, 964, 972, 973, 974, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 944, 0, 0, 0, 945,
	0, 959, 976, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 944, 0, 0, 0, 945, 0, 959,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 950, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 977, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 977, 0, 0, 0, 0,
	967, 0, 950, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 977, 0, 0, 0, 0, 967, 0,
	0, 0, 966, 0, 0, 960, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	966, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 942, 943, 0, 962, 963, 964, 972, 973, 974,
	0, 0, 0, 0, 970, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 945, 0, 961, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 959, 968, 0, 0, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	1762, 0, 0, 968, 0, 0, 956, 957, 958, 971,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 0, 2409, 0, 0, 0, 0, 950,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 969,
	977, 0, 2360, 942, 943, 0, 962, 963, 964, 972,
	973, 974, 0, 0, 0, 0, 0, 975, 0, 965,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 976,
	0, 942, 943, 967, 962, 963, 964, 972, 973, 974,
	960, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	944, 0, 0, 0, 945, 0, 959, 976, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 969, 977, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	977, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 966, 968, 0,
	960, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 2313,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 942, 943,
	0, 962, 963, 964, 972, 973, 974, 0, 0, 0,
	0, 970, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 945, 0, 961, 976, 0, 942, 943, 0, 962,
	963, 964, 972, 973, 974, 0, 0, 0, 0, 970,
	0, 0, 965, 0, 0, 944, 0, 0, 0, 945,
	0, 959, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 959,
	968, 0, 0, 956, 957, 958, 971, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	0, 2283, 0, 0, 0, 0, 950, 0, 968, 0,
	0, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 969, 977, 0, 2278,
	0, 0, 0, 0, 950, 0, 1770, 1771, 0, 1788,
	1789, 1790, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 2148, 0, 969, 977, 0, 0, 942, 943,
	967, 962, 963, 964, 972, 973, 974, 960, 0, 0,
	0, 0, 975, 0, 965, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 976, 0, 0, 0, 967, 1785,
	0, 0, 966, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 1776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 961, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 0, 1791, 0, 970, 965, 969, 977, 0, 0,
	0, 0, 945, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 1786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	967, 0, 959, 0, 0, 968, 0, 960, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 2274, 0, 0, 0,
	0, 0, 966, 968, 0, 0, 956, 957, 958, 971,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 0, 2214, 0, 0, 950, 1787, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 969, 977, 0,
	961, 0, 945, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 967, 959, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 1782, 1783, 1784, 0,
	0, 1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778,
	0, 0, 0, 0, 0, 968, 0, 950, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 2180, 969, 977, 0,
	0, 961, 0, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 975, 0, 970, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	976, 967, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 2179, 0, 0,
	0, 961, 950, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 970, 0, 0,
	965, 0, 969, 977, 0, 0, 0, 945, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 967, 959, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 966, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 2144, 0, 0,
	0, 0, 950, 0, 0, 942, 943, 0, 962, 963,
	964, 972, 973, 974, 0, 0, 0, 0, 0, 0,
	0, 965, 969, 977, 0, 0, 961, 0, 945, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 970, 0, 0, 0, 1770, 1771, 0, 1788,
	1789, 1790, 944, 0, 0, 0, 967, 0, 959, 0,
	0, 0, 2147, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 950, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 1998, 969, 977, 0, 961, 942, 943, 0,
	962, 963, 964, 972, 973, 974, 0, 0, 0, 0,
	0, 975, 970, 965, 1776, 0, 0, 0, 0, 0,
	945, 0, 0, 976, 0, 942, 943, 967, 962, 963,
	964, 972, 973, 974, 960, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 944, 0, 0, 0, 945, 0,
	959, 976, 1791, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 1786, 0, 0, 959, 0,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 1974, 0, 0, 950, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 969, 977, 0, 0, 0,
	0, 0, 0, 950, 2473, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 1787, 0,
	0, 0, 0, 969, 977, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 966, 968, 0, 960, 956, 957, 958, 971, 0,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2472, 1782, 1783, 1784, 961,
	0, 1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 943, 961, 962, 963,
	964, 972, 973, 974, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 970, 0, 0, 0, 0, 945, 0,
	0, 976, 0, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 944, 0, 0, 1705, 0, 945, 959, 0,
	976, 0, 0, 0, 968, 0, 0, 956, 957, 958,
	971, 0, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 944, 0, 1732, 0, 0, 0, 959, 0, 0,
	0, 0, 968, 0, 0, 956, 957, 958, 971, 0,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	0, 0, 0, 950, 0, 1802, 0, 1706, 1801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 977, 0, 0, 0, 0, 0,
	1770, 1771, 950, 1788, 1789, 1790, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 1967, 0, 0, 1543,
	0, 0, 969, 977, 0, 942, 943, 967, 962, 963,
	964, 972, 973, 974, 960, 0, 0, 0, 0, 0,
	975, 965, 0, 0, 0, 1542, 0, 0, 945, 0,
	0, 976, 0, 1785, 0, 0, 967, 0, 0, 966,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 1776, 0,
	0, 0, 942, 943, 0, 962, 963, 964, 972, 973,
	974, 0, 0, 970, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 950, 0, 945, 961, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 1791, 0, 0, 0,
	0, 0, 970, 969, 977, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 1786,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 968, 0, 960, 956, 957, 958, 971, 0,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	950, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	969, 977, 1787, 942, 943, 0, 962, 963, 964, 972,
	973, 974, 0, 0, 0, 0, 0, 0, 975, 965,
	0, 0, 0, 0, 0, 0, 945, 961, 0, 976,
	0, 0, 942, 943, 967, 962, 963, 964, 972, 973,
	974, 960, 0, 970, 0, 0, 0, 0, 965, 0,
	944, 0, 0, 0, 0, 945, 959, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 966, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	1782, 1783, 1784, 0, 0, 1781, 1779, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 0, 0, 0, 0, 0, 0,
	0, 950, 968, 0, 961, 956, 957, 958, 971, 0,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	970, 969, 977, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 1808, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 977, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 966, 0, 968,
	0, 960, 956, 957, 958, 971, 0, 955, 953, 954,
	946, 947, 948, 949, 951, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 970, 0, 0, 0, 965, 0, 0, 0, 1803,
	0, 0, 945, 0, 961, 976, 0, 0, 942, 943,
	0, 962, 963, 964, 972, 973, 974, 0, 1978, 0,
	970, 0, 0, 0, 965, 0, 944, 0, 0, 0,
	0, 945, 959, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	968, 959, 0, 956, 957, 958, 971, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 0, 968,
	0, 0, 956, 957, 958, 971, 0, 955, 953, 954,
	946, 947, 948, 949, 951, 952, 0, 969, 977, 0,
	0, 0, 0, 0, 1770, 1771, 950, 1788, 1789, 1790,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	1966, 0, 0, 0, 0, 0, 969, 977, 0, 942,
	943, 967, 962, 963, 964, 972, 973, 974, 960, 0,
	0, 0, 0, 0, 975, 965, 0, 0, 0, 1761,
	0, 0, 945, 0, 0, 976, 0, 1785, 0, 0,
	967, 0, 0, 966, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1768, 0, 0, 0, 0,
	0, 961, 1776, 0, 0, 0, 942, 943, 0, 962,
	963, 964, 972, 973, 974, 0, 0, 970, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 950, 0, 945,
	961, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	1791, 0, 0, 0, 0, 0, 970, 969, 977, 0,
	0, 1770, 1771, 944, 1788, 1789, 1790, 0, 0, 959,
	0, 0, 0, 1786, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 968, 0, 960, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 1785, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 950, 968, 0, 0, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 969, 977, 1787, 942, 943, 0,
	962, 963, 964, 972, 973, 974, 0, 0, 0, 0,
	0, 0, 975, 965, 0, 0, 0, 0, 0, 1776,
	945, 961, 0, 976, 0, 0, 942, 943, 967, 962,
	963, 964, 972, 973, 974, 960, 0, 970, 0, 0,
	1792, 0, 0, 0, 944, 0, 0, 0, 0, 945,
	959, 0, 976, 0, 0, 0, 0, 1791, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 959,
	1786, 0, 0, 0, 1782, 1783, 1784, 0, 0, 1781,
	1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 0, 0,
	0, 0, 0, 0, 0, 950, 968, 0, 961, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 970, 969, 977, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1787, 969, 977, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 968, 0, 960, 956, 957, 958, 971,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 1782, 1783, 1784, 0, 0, 1781, 1779, 1780, 1772,
	1773, 1774, 1775, 1777, 1778, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 1268, 1258, 1287, 1250, 1278, 1277, 0, 0, 1252,
	1251, 0, 0, 0, 970, 1289, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 1268, 1258, 1287, 1250, 1278,
	1277, 0, 0, 1252, 1251, 0, 0, 0, 0, 1289,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 1283,
	0, 1275, 1274, 0, 968, 0, 0, 956, 957, 958,
	971, 1273, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 0, 0, 1283, 0, 1275, 1274, 0, 0, 1272,
	1270, 1271, 0, 968, 0, 1273, 956, 957, 958, 971,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 1272, 1270, 1271, 0, 0, 0, 0,
	1261, 1260, 1262, 1263, 1264, 1265, 1266, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1261, 1260, 1262, 1263, 1264, 1265,
	1266, 0, 1286, 0, 0, 0, 0, 0, 1254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1276, 0, 0, 0, 1259, 0, 0, 0, 0, 0,
	0, 0, 1254, 0, 528, 0, 554, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 0, 0, 1259, 0,
	0, 0, 0, 1269, 533, 0, 0, 1380, 1378, 1379,
	1382, 1381, 0, 0, 0, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 0, 0, 1255, 0, 0, 0, 532, 0, 0,
	0, 0, 534, 0, 1267, 1256, 0, 540, 541, 0,
	0, 550, 0, 0, 1291, 0, 0, 1255, 0, 0,
	0, 0, 0, 0, 0, 555, 535, 1253, 1267, 1256,
	0, 1284, 1285, 0, 0, 0, 0, 0, 1291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 0,
	0, 1253, 0, 1257, 0, 1284, 1285, 0, 1290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 1257, 0, 0,
	0, 0, 1290, 537, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 0, 0, 539, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 547, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	0, 0, 0, 552, 0, 0, 0, 0, 558, 0,
	0, 0, 0, 545, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
}
var sqlPact = [...]int{

	353, -1000, 11, -1000, -1000, -1000, 205, -1000, -1000, -1000,
	202, 201, 200, -1000, 198, 195, 190, 180, 178, 173,
	161, 155, 153, 151, 149, -1000, 147, -1000, -1000, -1000,
	-1000, 146, 144, 143, 142, 139, 136, 134, 1107, 22606,
	132, 122, 1439, 35524, 119, 117, 114, 112, 1055, 111,
	108, 26149, 1091, 1525, 107, 106, 105, 99, 97, 1033,
	35203, 4424, 1711, 1170, 1660, 34879, 22282, 1656, 1192, 34555,
	-1000, -1000, 34231, 96, 95, 93, 92, 90, -1000, -1000,
	33907, 89, 86, 84, 82, 81, 77, 70, 68, 67,
	65, 63, 61, 59, 57, -1000, 53, 51, 50, 41342,
	46, 43, 41, 1161, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 140, -1000, 953, 479, 1360,
	8251, 1076, 1042, 1041, 1024, 1059, 37450, 35524, 39, -12,
	38, -1000, 1940, 665, 19664, 353, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25825, 25501, 33583, 33259, 832, -1000, 2, 23890, 35524, -1000,
	127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15659, 15299, 560, 127, -1000, -1000, -1000, -1000,
	-1000, 32935, -1000, 32611, 32287, 1538, 31963, -1000, -1000, -1000,
	-1000, 31639, -1000, -1000, 1861, 1674, 1666, 25177, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31318, 30994, 30670, 30346, 30022, 534, -1000, -1000, -1000, 18035,
	-1000, -1000, -1000, -1000, 36, -1000, 34, -1000, 33, 32,
	30, 29, -1000, 23, 22, -1000, 20, 19, -1000, 17,
	14, 29698, 1275, -1000, -1000, 6, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35524, -1000, 16351, -1000, 528, -1000,
	1670, -1000, 16351, -1000, 1270, -1000, -1000, -1000, -1000, -1000,
	35524, -1000, -1000, -1000, -1000, -1000, -1000, 2149, 1219, 526,
	29374, -1000, 1529, -1000, 614, 795, -1000, -1000, -1000, 9290,
	212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1496, 21958, 1221, 1953, 1842, 2148, 1408, 1840, 1810, 1800,
	1785, 1779, 2144, 1019, 2143, 1777, 1069, 2141, 1707, 1203,
	725, 2134, 1668, 1667, -1000, -1000, -1000, -1000, 941, -1000,
	-1000, -1000, 27433, -1000, -1000, 953, -1000, -1000, -1000, 1340,
	1930, 1930, 1930, 1986, 307, 299, -1000, 140, -1000, 1420,
	-1000, 1217, -1000, -1000, -1000, -1000, -1000, 40756, -1000, -1000,
	16351, 16351, 16351, 16351, 16351, 1137, 556, -1000, 525, 524,
	7545, -1000, -1000, 2119, -1000, -1000, -1000, 309, -1000, -1000,
	16351, 127, -1000, -1000, -1000, -1000, 523, 2130, -1000, 655,
	-1000, -1000, -1000, 621, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1702, 521, 519, 518, -1000, 517, -1000,
	-1000, 516, 514, 511, 510, 509, 508, 505, 503, 498,
	494, 493, 488, 486, 485, 484, 1048, -1000, 659, -1000,
	-1000, 659, 659, -1000, 457, 457, 459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 457, -1000, -1000, -1000, 606,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	478, 1148, -1000, -1000, 1148, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 830, 36808, -3, 35524, -1000, 476, -3, -1000,
	-1000, 475, -1000, 11380, 11380, -1000, -1000, -1000, -1000, -1000,
	9996, 1441, -1000, 3907, -181, 330, 604, -1000, 18686, 21290,
	-1000, -1000, 1154, 1827, 683, -1000, 1021, 1826, 563, -1000,
	1016, -1000, 988, 1820, -166, 22927, 23890, 2, -10, -1000,
	-1000, -1000, 5824, 40756, -1000, 40756, -1000, 906, 20314, 127,
	-1000, -1000, -1000, -1000, 473, 1330, 627, -1000, 332, -1000,
	29050, 627, 1329, -1000, -1000, -1000, 27433, -1000, 35524, -1000,
	35524, -1000, 931, -1000, 37129, 126, 1814, -1000, -1000, 126,
	1811, -1000, 118, 1809, -1000, -1000, 1238, 1782, -1000, -10,
	1773, -1000, -1000, 16351, -15, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 665, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28726, 23248, 1220, 589,
	40756, 2014, 41158, 22927, 40756, 23248, -1000, -1000, 35524, -1000,
	16351, -1000, 2012, 1424, 8, -1000, -1000, -1000, -1000, -1000,
	1359, 1532, 749, 1110, 9290, 9290, 1891, -1000, 209, 6157,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28402, -1000,
	-1000, -1000, 1241, 35524, -1000, -1000, 1687, -1000, 23248, 35524,
	-1000, 35524, -1000, 35524, -1000, 35524, -1000, 35524, -1000, -1000,
	-1000, -1000, -1000, 3662, -1000, 1684, -1000, -1000, 35524, -1000,
	1351, -1000, -1000, -1000, 28081, 27757, -1000, 1023, 868, -1000,
	-1000, 128, -1000, -1000, 1340, -1000, 1279, 1541, 14939, 1447,
	16351, 140, -1000, -1000, 140, 140, 8944, -1000, -1000, -1000,
	35524, -1000, 41134, 41158, 6157, 847, 16351, 16351, 16351, 16351,
	16351, 16351, 16351, 16351, 16351, 16351, 16351, 16351, 16351, 16351,
	16351, 16351, 16351, 16351, 16351, 16351, 16351, 16351, 1398, 16351,
	827, 16351, 16351, 16351, 16351, 1559, 1135, 456, 1233, -1000,
	2052, 2052, 2052, 4257, 4257, 411, 556, -1000, 16351, -1000,
	138, 14593, 299, 39485, -2, 7199, -1000, -1000, -1000, 9636,
	651, 40756, 127, 6492, -1000, 2118, 922, 1714, 1574, 463,
	570, 568, 565, 564, 16351, 16351, 14247, 13887, 13527, 17043,
	13167, 16351, 7891, 16351, 16351, 16351, 16351, 12807, 12447, -1000,
	462, -1000, -1000, -1000, -1000, 2116, -1000, -1000, 2110, -1000,
	845, 840, 2098, -1000, 8, -1000, 36808, -1000, 35524, -3,
	2011, 35524, -1000, 102, -1000, 40045, -1000, 102, -16, -1000,
	1495, 1459, 19989, 1442, 1175, 1175, 1175, -1000, 461, 545,
	604, 5143, 12087, -1000, 26470, 1178, 218, 298, 18361, 1441,
	-1000, 35524, -18, 1081, -1000, 24853, 1941, 1913, 1914, 27433,
	1999, 138, 1663, 826, 27433, 825, 1998, 138, 1662, 823,
	35524, 6157, 593, -1000, 35524, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1632, -21, -1000, -1000, 24532,
	2008, 1770, -1000, 1095, -1000, 2007, 35524, 1236, 1317, -1000,
	-1000, 862, 1768, 630, 295, 2006, 295, 20640, -1000, 35524,
	-1000, 35524, -1000, -1000, 35524, -1000, 35524, -1000, 35524, 35524,
	-1000, 35524, 35524, -22, 40756, 2758, 24211, 814, -1000, 676,
	24532, 1181, -23, -1000, 883, -1000, -1000, -1000, -1000, 426,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 459, 1048, 457, 457, 457, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 606, -1000, -1000, 659, 659, 659,
	-1000, -1000, -71, -1000, 1631, 641, -24, 746, 8, -1000,
	1148, -1000, 996, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2129, -1000, 2070, -1000,
	-1000, 2087, -4, -1000, -4, -1000, 6157, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35524, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3366, -1000, -1000, -1000, -1000, -1000, -1000,
	35524, 35524, 35524, -1000, 27433, -1000, -1000, -1000, -1000, 40756,
	-1000, 384, -1000, -1000, 40756, 946, 1431, -1000, 1431, -5,
	-1000, 39914, 1421, 35524, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 613, 782, 782, 853, 853,
	853, 853, 1993, 620, 321, 2756, 4381, 4381, 4381, 2601,
	923, 923, 4381, 4381, 4381, 4257, 40887, 237, 16351, 16351,
	812, 1127, 456, 237, 16351, 237, 237, 237, 237, -1000,
	1139, -1000, -1000, -1000, -1000, 1625, 454, 17043, 17043, -1000,
	-1000, -1000, 7545, 17376, -1000, -1000, -1000, -1000, 452, 16351,
	-1000, 39617, -207, -32, -1000, -1000, 16351, -35, -134, -1000,
	-1000, 882, -1000, 16351, -1000, -33, 16351, 16351, 16351, 297,
	-1000, 296, -1000, 811, -1000, 809, 801, 800, -1000, 451,
	1158, 450, 449, 16351, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40669, 38098, 289, -1000, 1624, -153, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, -1000, 287, -1000, 40538,
	-153, 286, 40801, -1000, 17043, 17043, 17043, 7545, 446, 285,
	-1000, 39885, -153, 40509, 11727, 11727, 11727, 284, 40292, 16351,
	-153, 4199, 4017, 3954, -38, -39, -1000, -40, -1000, 2085,
	-49, 283, 612, 611, 282, -1000, -1000, 444, -51, 630,
	11380, 19338, 6157, -1000, 630, 9996, -1000, 19989, 19989, 1402,
	1446, 19989, -1000, -1000, -1000, -1000, 26470, 530, 604, 26470,
	-1000, 2082, 1407, -52, -1000, -1000, -1000, 35524, 443, -1000,
	604, 280, 1047, 35524, 35524, 35524, -1000, -1000, 1308, 36487,
	1302, 41158, 35524, -1000, 441, 439, 1417, 1416, 35524, 35524,
	36166, 35845, 35524, 1075, 138, -1000, 428, 35524, 1013, 35524,
	138, -1000, 427, 35524, 1009, -1000, 1550, 1282, -1000, 904,
	1623, 35524, 278, -54, -9, 41158, -1000, -1000, -1000, -1000,
	-1000, 35524, 496, 35524, 138, 35524, 2127, 138, 35524, 1761,
	1836, 572, 35524, 1541, 16351, 1001, -1000, 19012, 667, 35524,
	959, 76, -1000, -1000, -1000, 588, 35524, -1000, -1000, 126,
	126, -1000, 118, 1238, -10, -1000, 16351, -1000, -1000, 35524,
	22927, -57, -1000, -1000, 41158, -1000, 552, 702, -1000, 2081,
	623, 22927, 35524, 9290, 9290, -1000, 1502, -1000, -1000, 961,
	-1000, 1060, -1000, -1000, -1000, -1000, 9290, -1000, -34, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 946, -1000, 16351, 2077,
	-1000, -1000, -1000, 8944, -1000, -1000, -1000, 35524, -167, 16351,
	237, 237, 16351, 17043, 17043, -1000, 237, -1000, -1000, -1000,
	-1000, -1000, 1613, 425, 16351, 41158, 40644, 40020, -59, -1000,
	11034, -11, -1000, 16351, -1000, 39374, -1000, -1000, 551, 1788,
	-1000, 16351, 40263, 277, 10688, -1000, 40132, -45, -45, -1000,
	2126, 1342, 1254, 1050, 930, 2076, -1000, 20965, 645, 1183,
	39264, 41134, 41158, -1000, 16351, -1000, -1000, 1611, 16351, -1000,
	41134, 41158, 17043, 17043, 17043, 17043, 17043, 17043, 17043, 17043,
	17043, 17043, 17043, 17043, 17043, 17043, 17043, 17043, 17043, 17043,
	17043, 1500, 17043, 2046, 2046, 2046, -17, 10342, -1000, 1669,
	1611, 16351, 16351, 41158, 274, 267, 266, -1000, 16351, -153,
	16351, 16351, 16351, -1000, -1000, -1000, 265, -1000, 2075, -1000,
	-1000, -1000, -1000, 1181, -1000, 1570, -1000, -150, -1000, 1441,
	-1000, 1570, -1000, -1000, 1402, -1000, 422, 16351, 19989, -1000,
	543, -1000, -60, -1000, 26470, -1000, 541, -195, -1000, 587,
	-1000, 604, 421, 35524, 26470, -1000, -1000, -1000, 798, 794,
	1758, -1000, 1300, -1000, 672, -1000, 942, 16351, 17709, 420,
	419, 1111, -1000, 1745, 1238, 1736, 1238, -1000, -18, 1015,
	-1000, 16351, -1000, 790, -1000, -1000, 16351, -1000, 788, 623,
	1595, 871, -1000, 901, -1000, 1542, -1000, 24532, 416, 35524,
	414, -1000, 409, -1000, -1000, 407, 35524, 1393, 572, 23569,
	-1000, 627, 959, -1000, 40756, -1000, 959, 8597, 1925, -65,
	-1000, -1000, -1000, 630, 20640, 19989, 9996, -72, -1000, -1000,
	-1000, -1000, 40756, -34, 1895, 1895, -1000, 2074, -1000, 539,
	264, -1000, 27112, -1000, -34, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35524, 1193, 39129, -1000, 1920, 6157, 2018, 237,
	39526, 38886, 16351, 41158, 40916, -73, 16351, 16351, -1000, -74,
	-1000, 16351, 537, 40756, -1000, -1000, -1000, 40756, 16351, 2125,
	16351, 263, 261, 258, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 257, -1000, -1000, 37771, 16351, 256, -1000, 255,
	254, 40756, 1669, 40756, -1000, -1000, 818, 818, 892, 892,
	892, 892, 2046, 668, 652, 398, 196, 196, 196, 375,
	474, 474, 196, 196, 196, 1592, 1397, 405, 951, 16351,
	-75, -1000, -1000, -1000, 40756, 40756, 253, -1000, -1000, -1000,
	-153, 177, 39019, 38908, -1000, 251, 245, 1557, 1977, -1000,
	19989, 1557, -1000, 35524, 40756, -1000, -181, -1000, 2073, -1000,
	-1000, 1407, -1000, 5488, 26470, 35524, -80, -1000, 35524, 35524,
	35524, 1733, -1000, 1816, -1000, 38776, -87, -1000, 316, 1948,
	16351, -1000, -1000, 403, 17709, 35524, -1000, 1427, 1553, 706,
	35524, -1000, 35524, -1000, 35524, 35524, 35524, -89, 35524, -95,
	35524, -1000, 22927, 785, -1000, 1124, 1545, -1000, 17709, 402,
	35524, 24532, 2004, 17709, 1229, 1404, 572, 23569, -1000, 862,
	-1000, -1000, -37, -1000, 401, 138, 959, -1000, -50, -1000,
	583, 1878, -1000, 1877, 531, -1000, -1000, -70, 397, -1000,
	579, 577, -1000, -1000, -1000, -1000, 1920, 16351, 16351, 40916,
	-96, -1000, 237, 237, -1000, 38748, -1000, 40756, -1000, 40132,
	-1000, -1000, -1000, -1000, 1117, -1000, 38531, -1000, -1000, -1000,
	-1000, 17043, 1584, 386, 41158, 38503, -1000, -1000, 16351, -1000,
	-1000, -1000, -1000, 622, 16351, 16351, 1441, 622, -97, 604,
	-1000, -1000, -1000, 2072, -1000, -98, -1000, -1000, -1000, -1000,
	35524, -1000, 35524, -1000, 6157, 35524, 1581, 1296, -1000, -1000,
	1411, 385, 17043, 35524, -1000, 1108, 17709, 1920, 127, 6157,
	1920, 38371, 6492, -104, -106, 1295, -1000, 1294, 16351, -1000,
	41158, 1238, 1238, -1000, 763, 755, 754, -1000, 751, -1000,
	-86, 21623, -1000, 1976, 1112, -107, 17709, -109, 242, 138,
	-112, 35524, -1000, 572, 23569, -1000, 1836, 1851, 35524, 1909,
	-1000, -1000, 378, 372, 361, -1000, 26791, 26791, 22927, 22927,
	-1000, 237, 237, -1000, -1000, 240, 1183, 1970, -1000, 352,
	17043, 41158, -117, -1000, 38154, -1000, 35524, 40756, -153, -1000,
	-1000, 26470, 399, -1000, -1000, 1332, -1000, -1000, 35524, 1299,
	-1000, -1000, 16351, 951, 360, 1542, 358, -1000, -1000, -1000,
	-1000, -1000, -1000, 1948, -33, -1000, 1034, -1000, -1000, 40756,
	1935, -1000, -1000, 35524, 35524, 355, 354, -1000, 351, 127,
	1142, 35524, 1108, -119, -1000, 1542, -1000, 1108, 350, 23569,
	-1000, 1393, 839, -120, 35524, -1000, -1000, 6839, 22927, 22927,
	-1000, -125, -1000, -1000, -1000, 1031, 16351, 352, -127, -1000,
	-1000, -132, -1000, 2003, -1000, -1000, -1000, -1000, 1731, 38126,
	1349, 35524, -1000, 35524, 1920, 238, 35524, 670, 6157, -1000,
	-1000, 16351, 16351, 16351, 349, 339, 338, 1542, 1108, -1000,
	1542, 17709, -1000, 1404, 921, -1000, 630, -1000, -138, -141,
	-1000, 233, 16697, 16697, -153, -1000, 35524, 333, 1722, -1000,
	1197, 1065, 221, -143, -1000, -1000, 332, -1000, 16351, -1000,
	-144, -154, -45, 35524, 35524, 35524, -1000, 1542, -1000, -160,
	-1000, 20640, -1000, 623, 623, -1000, -1000, -1000, 4763, 1188,
	948, 39645, -1000, -1000, -1000, 35524, -1000, 1228, 1212, 903,
	-1000, -1000, -1000, -1000, -1000, 1349, 40756, -1000, -1000, 216,
	-177, -178, -179, -1000, 1108, -151, -1000, -1000, 2019, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1865, -1000, 696, 1437,
	1437, 1197, 2125, 329, 328, 1231, 1542, -1000, 16005, -1000,
	2026, -1000, -1000, 1474, -1000, -1000, 1106, 1097, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -185, -1000, 35524, -187,
	-1000, 35524, -1000, 1106, 19989, -1000, 1097, 666, -1000, 1441,
	-1000, 1364, 855, 19989, 1441,
}
var sqlPgo = [...]int{

	0, 2506, 2505, 1732, 2018, 2504, 2503, 2502, 2498, 2496,
	2495, 2494, 2487, 2486, 2485, 2484, 2483, 2482, 2481, 2480,
	2016, 2478, 2011, 2477, 2476, 2475, 2472, 1985, 2470, 2469,
	2468, 2462, 2461, 2458, 1949, 2457, 1940, 2456, 2453, 2452,
	2448, 2444, 1938, 2441, 79, 106, 1919, 2440, 2436, 1916,
	1891, 1887, 2433, 1879, 2429, 2417, 1866, 1819, 2413, 50,
	2409, 2406, 2405, 1810, 1798, 2404, 2403, 2402, 150, 2401,
	1725, 2399, 2395, 2393, 2392, 2390, 2384, 2383, 2378, 2376,
	2375, 2373, 2371, 2370, 2368, 2367, 2366, 2363, 2362, 157,
	2361, 2360, 1723, 1695, 2359, 2358, 29, 25, 16, 59,
	33, 156, 2638, 141, 2355, 2354, 2353, 2352, 2351, 2348,
	36, 101, 96, 2346, 124, 2344, 2343, 43, 38, 23,
	20, 2338, 99, 2337, 2336, 1333, 22, 2335, 2333, 134,
	2330, 24, 27, 65, 151, 147, 110, 120, 2327, 2326,
	2320, 53, 116, 3, 2314, 5, 1, 2313, 2311, 2308,
	2307, 18, 83, 14, 2306, 28, 75, 2304, 2303, 130,
	2298, 68, 92, 1573, 103, 121, 436, 2297, 69, 15,
	72, 2288, 2286, 155, 42, 2284, 31, 77, 142, 2282,
	64, 158, 125, 55, 129, 132, 2281, 2278, 2276, 115,
	2273, 113, 93, 2264, 2263, 74, 2258, 97, 139, 2256,
	2253, 2251, 91, 2250, 123, 2246, 2244, 154, 145, 108,
	9, 35, 71, 13, 1540, 1535, 136, 94, 62, 48,
	2243, 2098, 960, 1514, 41, 98, 82, 57, 102, 56,
	84, 143, 46, 2240, 2238, 133, 2237, 2233, 2232, 2230,
	2228, 104, 2226, 2224, 21, 2218, 80, 39, 49, 90,
	45, 2, 122, 118, 148, 100, 2216, 86, 119, 2215,
	54, 2213, 2211, 1727, 114, 2210, 2208, 2207, 1587, 1039,
	1032, 857, 2204, 2202, 296, 34, 2200, 2199, 89, 2198,
	112, 107, 95, 140, 144, 85, 2197, 117, 60, 2196,
	32, 37, 0, 1832, 1217, 2195, 126, 78, 2194, 2193,
	2192, 2190, 26, 6, 12, 7, 10, 8, 63, 30,
	2189, 2188, 131, 87, 76, 2187, 153, 2185, 2184, 2181,
	47, 2180, 11, 2173, 19, 2169, 2168, 17, 4, 2166,
	2159, 138, 2158, 111, 2157, 1971, 2156, 146, 2155, 2153,
	1728, 58, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 290, 290, 291, 291, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 165,
	165, 164, 164, 167, 167, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 259, 259, 258, 43, 43, 233, 233, 46,
	46, 190, 190, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 331, 331, 331, 335, 335, 336, 336, 337,
	337, 337, 337, 337, 337, 337, 333, 333, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 284, 282,
	282, 283, 283, 139, 139, 139, 139, 139, 140, 140,
	140, 289, 289, 289, 289, 289, 289, 288, 288, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	332, 332, 334, 334, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 212, 212, 212, 212, 143, 143,
	115, 115, 115, 144, 144, 144, 147, 147, 145, 148,
	148, 146, 211, 300, 300, 301, 301, 301, 301, 301,
	301, 302, 302, 302, 302, 302, 302, 302, 298, 298,
	299, 296, 296, 297, 297, 297, 297, 338, 338, 210,
	210, 151, 151, 305, 305, 305, 305, 303, 303, 303,
	303, 303, 306, 304, 307, 307, 307, 307, 307, 245,
	245, 245, 91, 91, 32, 32, 121, 121, 33, 33,
	29, 29, 29, 194, 194, 155, 155, 250, 250, 250,
	132, 132, 110, 110, 110, 14, 11, 11, 11, 11,
	11, 11, 19, 19, 17, 17, 195, 195, 196, 196,
	52, 52, 56, 56, 61, 61, 90, 90, 90, 90,
	90, 90, 21, 21, 21, 21, 25, 25, 25, 25,
	60, 60, 340, 340, 128, 128, 128, 128, 129, 129,
	207, 207, 208, 208, 208, 209, 209, 209, 123, 122,
	124, 124, 28, 28, 28, 117, 117, 118, 118, 119,
	119, 120, 120, 341, 341, 49, 49, 49, 93, 93,
	135, 135, 204, 204, 204, 206, 206, 205, 205, 205,
	180, 180, 180, 92, 92, 160, 160, 169, 169, 170,
	170, 256, 171, 171, 59, 59, 102, 102, 100, 100,
	100, 100, 100, 100, 101, 101, 101, 103, 103, 103,
	103, 103, 103, 103, 106, 106, 106, 107, 107, 107,
	105, 105, 313, 313, 313, 316, 316, 312, 314, 314,
	315, 315, 339, 339, 181, 181, 181, 150, 149, 149,
	153, 153, 152, 154, 154, 249, 249, 249, 178, 178,
	178, 178, 199, 199, 197, 197, 198, 198, 200, 200,
	201, 201, 201, 202, 202, 203, 203, 177, 177, 229,
	229, 104, 104, 104, 159, 159, 159, 161, 161, 219,
	219, 219, 220, 220, 218, 218, 218, 218, 251, 251,
	251, 251, 251, 251, 251, 251, 329, 329, 329, 330,
	330, 248, 248, 252, 252, 252, 252, 252, 252, 246,
	246, 246, 246, 247, 247, 257, 257, 184, 184, 184,
	184, 182, 182, 183, 183, 253, 253, 253, 253, 179,
	179, 254, 254, 254, 213, 213, 260, 260, 260, 278,
	278, 158, 158, 158, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 262, 262, 262, 262, 264, 264, 264, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 277, 277, 277, 277,
	277, 265, 265, 272, 272, 273, 273, 274, 275, 266,
	266, 267, 267, 268, 269, 276, 276, 276, 276, 280,
	280, 270, 270, 270, 270, 270, 271, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 192, 192, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 223, 223, 223, 223, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	308, 308, 308, 308, 308, 308, 308, 308, 310, 310,
	311, 311, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 317, 317, 318, 318, 320, 320, 321, 321,
	322, 323, 323, 323, 324, 325, 325, 319, 319, 326,
	326, 326, 327, 327, 328, 328, 328, 328, 328, 235,
	235, 235, 236, 236, 237, 243, 243, 243, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 130, 130, 130, 130, 130, 166,
	166, 232, 232, 230, 230, 230, 234, 234, 185, 185,
	279, 279, 279, 279, 279, 279, 279, 186, 186, 186,
	193, 187, 187, 188, 188, 188, 188, 188, 188, 226,
	227, 189, 189, 189, 228, 228, 238, 242, 242, 241,
	240, 240, 239, 239, 216, 216, 217, 217, 215, 214,
	174, 174, 173, 173, 172, 172, 342, 342, 244, 244,
	175, 175, 176, 168, 168, 255, 255, 255, 255, 162,
	162, 137, 137, 163, 163, 133, 133, 136, 136, 134,
	134, 134, 134, 156, 156, 157, 157, 131, 131, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	281, 281, 281, 231, 125, 125, 125, 126, 126, 127,
	127, 286, 286, 286, 287, 287, 287, 287, 285, 285,
	285, 285, 285, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 9, 9, 0, 1, 3, 3, 1,
	3, 6, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 3, 3, 0, 6, 3,
	11, 14, 4, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 2, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 360, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -315, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 216, 222, 242, 244, 246, 253,
	-100, -102, 240, -54, -55, -63, -64, -65, -66, -94,
	264, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 267,
	-21, -25, -60, 306, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -313, -103, -101, 357, 241,
	315, 35, 276, 61, 101, 248, 331, 338, -106, -104,
	-105, -107, 257, 323, 286, 361, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 2,
	286, 326, 83, 141, -331, 2, -163, 286, 83, -134,
	-125, 350, 4, -292, -294, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 142, 145,
	147, 140, 157, 158, 159, 161, 162, 163, 166, 165,
	170, 171, 174, 175, 178, 180, 181, 182, 185, 183,
	187, 188, 190, 189, 195, 197, 198, 200, 203, 206,
	209, 212, 213, 214, 215, 216, 218, 220, 222, 224,
	225, 226, 227, 228, 230, 231, 233, 234, 235, 236,
	237, 240, 238, 239, 241, 242, 243, 244, 246, 248,
	249, 251, 265, 266, 277, 253, 254, 255, 256, 260,
	258, 261, 262, 264, 267, 269, 272, 275, 276, 278,
	281, 282, 279, 274, 285, 287, 288, 289, 290, 291,
	292, 293, 294, 301, 302, 306, 307, 308, 309, 312,
	313, 314, 315, 317, 320, 321, 322, 327, 332, 333,
	334, 335, 336, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 85, 87, 88, 104,
	108, 109, 115, 116, 117, 127, 129, 136, 137, 146,
	148, 149, 150, 151, 152, 154, 168, 184, 194, 196,
	207, 211, 219, 221, 229, 250, 259, 270, 271, 280,
	283, 296, 297, 298, 303, 304, 319, 323, 324, 360,
	360, 2, 158, 226, -133, -125, 83, 360, 360, 360,
	360, 286, 2, 316, 326, -194, 83, 311, 360, 360,
	-125, 222, 22, 2, 92, 145, 314, 313, 22, 218,
	258, 288, 290, 2, 360, 360, 360, 360, 360, 2,
	326, 286, 141, 83, 316, -125, 2, -45, 2, 357,
	-44, -4, -27, -36, -46, -42, -20, -22, -34, -50,
	-49, -51, -53, -57, -56, -59, -63, -64, -70, -92,
	-93, 264, -335, 2, 22, -336, -337, 69, 98, 125,
	257, 145, 92, 313, 286, 2, 158, 2, -125, 2,
	-331, 2, 158, 2, -335, 2, -125, 2, -129, 2,
	253, -125, 360, 360, 360, 360, 360, 175, 55, 250,
	261, -68, 302, -67, 296, -284, -69, 2, -164, 185,
	-125, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 2, -89,
	261, 34, 55, 22, 60, 84, 126, 141, 142, 162,
	65, 66, 225, 175, 159, 301, 163, 262, 287, 302,
	69, 317, 291, 106, 4, 83, 185, 263, 296, 360,
	360, 360, -339, 2, 286, -101, -103, -102, -152, -153,
	310, 153, 103, 205, -100, -102, 2, -313, -89, 261,
	2, 55, 22, -282, 2, -244, 201, -221, 89, -223,
	348, 349, 343, 191, 337, -235, -225, -238, 104, 250,
	357, -133, -224, 363, 9, -310, -102, 29, -236, -237,
	49, -125, 7, 8, 5, 6, -131, -262, -231, -271,
	305, 110, 193, -308, -309, 4, -292, -286, -263, -273,
	-267, -270, 154, 58, 75, 76, 79, 77, 80, 263,
	316, 50, 28, 108, 109, 211, 219, 283, 303, 304,
	136, 194, 137, 56, 127, 168, 97, 37, 39, 41,
	42, 51, 52, 85, 87, 88, 115, 116, 117, 146,
	148, 149, 150, 151, 152, 196, 229, 270, 280, 297,
	298, 324, -293, -274, -275, -268, -269, 70, 124, 144,
	138, 156, 160, 169, 172, 186, 208, 210, 247, 268,
	-276, -340, 2, 302, 302, 2, -340, 2, -340, 2,
	-128, 2, 302, 299, -316, 230, -312, -125, -316, 360,
	360, 362, 360, -149, -150, 2, 22, 95, -176, 2,
	357, -251, 2, 355, -253, -133, -102, -252, 357, 202,
	-3, 2, -253, 136, -133, 2, -253, 136, -133, 2,
	-125, 2, -136, 136, -133, 299, 362, -163, -156, -125,
	-215, -214, 359, -221, 2, -221, 2, 123, 357, -173,
	-174, -214, -215, 2, -164, 136, -125, 2, -164, 2,
	141, -125, 136, 2, -125, 22, 123, 2, 155, 2,
	155, 2, -254, 2, -253, -165, 136, 2, -164, -165,
	136, 2, -137, 136, 2, -136, -125, 136, 2, -156,
	136, 2, -190, 357, -259, 2, -258, -287, 4, -292,
	-294, -293, 323, 58, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 261, 201, 362, -164,
	-221, -233, 357, 123, -221, 201, -125, 2, 265, 2,
	357, -68, 53, 302, -208, 2, -209, -122, -123, -124,
	157, 224, 228, 336, 299, 342, 123, -282, -167, 359,
	-89, 2, -290, 2, -288, 9, -287, 5, 265, 2,
	225, 262, 55, 123, 2, 2, -332, 2, 201, 123,
	2, 123, 2, 123, 2, 123, 2, 123, 2, 2,
	225, 262, 2, 120, 2, 301, 2, 2, 123, 2,
	157, 224, 277, 2, 286, 326, 2, 123, 123, 336,
	2, -179, -253, -152, -153, -178, -197, -198, 173, 112,
	199, -181, 22, 95, -181, -181, 44, 358, 358, -89,
	265, 2, 10, 11, 57, 33, 348, 349, 350, 351,
	118, 352, 353, 346, 347, 345, 340, 341, 342, 63,
	179, 252, 13, 14, 15, 26, 204, 172, 337, 138,
	268, 343, 16, 17, 18, 156, 36, 139, -130, -138,
	-221, -221, -221, -221, -221, 210, -172, -216, 355, -102,
	357, 357, -102, -221, -166, 357, 7, -102, -230, 355,
	-239, -221, -173, 357, 5, 357, 5, -317, 332, 120,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 221,
	-280, 327, -280, -280, -264, 357, -264, -265, 357, -264,
	333, 338, 357, -207, -208, -207, 299, -129, 362, -316,
	-157, 357, -176, -168, -255, -221, 350, -168, -175, -244,
	70, -184, 160, 186, 124, 169, 247, 144, 7, -45,
	-218, 363, 357, 350, -248, 338, -102, -252, 357, -251,
	-133, 357, -112, 238, -111, 21, 23, 98, 321, 104,
	274, 292, 254, 238, 104, 238, 274, 292, 254, 238,
	104, 363, -290, -134, 362, -285, 350, 4, -292, -294,
	-293, -295, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 74,
	75, 77, 76, 78, 79, 80, 89, 91, 93, 95,
	96, 99, 101, 103, 110, 111, 112, 120, 122, 123,
	125, 128, 130, 139, 141, 143, 153, 155, 164, 167,
	173, 176, 177, 191, 192, 193, 199, 201, 202, 204,
	205, 217, 223, 232, 245, 257, 263, 273, 284, 286,
	295, 299, 300, 305, 310, 311, 316, 318, 325, 326,
	328, 329, 330, 331, 278, 358, -162, -133, -174, 357,
	-151, 191, -121, -314, 331, -151, 357, -126, 136, 2,
	-125, -314, 191, -254, -135, -133, -135, 264, -125, 30,
	-114, 362, 48, 243, 104, -114, 104, -114, 362, 104,
	-114, 104, 104, -166, -221, 358, 362, -331, -337, 69,
	357, 30, -232, -260, -261, -263, -272, -266, -270, -271,
	40, 46, 45, 293, 184, 259, 271, 319, 38, 200,
	147, 146, 148, 149, 150, 151, 152, 270, 37, 229,
	116, 117, 115, 97, 88, 87, 196, 42, 41, -274,
	-275, -268, -269, 85, 297, 298, 154, 39, 52, 51,
	324, 280, -291, -290, -331, -284, -166, 30, -208, 2,
	362, -209, 171, -140, 178, 190, 132, 202, 334, -289,
	5, 4, -231, -245, 89, 175, -271, 8, 349, -281,
	7, 348, -283, -282, -283, 73, 359, -285, -164, 22,
	266, 2, -284, -334, 120, -331, -284, -284, -284, -284,
	-284, 261, -45, 120, -125, 171, -284, 2, -284, 2,
	286, 141, 286, -114, 362, -178, -198, -197, -200, -221,
	22, -203, 114, 187, -221, -223, -101, -101, -101, -154,
	-249, -221, 223, 141, -284, -278, -260, -277, 234, 235,
	233, 237, 236, -260, -285, 296, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, 172, 138,
	268, 36, 139, -221, 299, -221, -221, -221, -221, 183,
	191, 193, 305, 110, 312, 95, 197, -342, 284, 32,
	-228, -102, 357, -243, 27, 273, 22, -235, 250, 357,
	-216, -221, -217, -166, 358, 358, 362, -166, -234, 356,
	-230, -242, -241, 328, 358, -166, 325, 22, 95, 350,
	2, 7, -191, 335, 182, 86, 133, 181, -192, 256,
	-318, 113, 128, 357, 358, 2, 358, 2, 358, 2,
	358, 2, -221, -221, -185, 2, -279, -166, 4, 335,
	182, 86, 133, 181, 256, -185, 2, -186, 2, -221,
	-166, -187, -222, -223, 348, 349, 343, 357, 250, -188,
	2, -221, -166, -221, 43, 167, 300, -189, -221, 123,
	-166, -221, -221, -221, -166, -166, 2, -166, 2, 357,
	7, 7, 296, 296, 7, -129, -312, 30, -156, -159,
	362, 123, 30, 4, -159, 362, 358, 160, 160, -251,
	-184, 160, -182, 208, -182, -182, -329, 357, 356, -248,
	-285, 355, 364, -166, 2, -247, -246, 30, -125, 206,
	358, -133, 362, 299, -195, 65, 59, -211, 136, 59,
	-296, -125, 65, -297, 54, 311, 223, 122, -195, 65,
	-195, 65, 65, -253, 33, -59, 123, 299, -253, 299,
	33, -59, 123, 299, -136, -285, -257, 339, -125, 123,
	358, 362, -141, -156, -142, -125, -212, -211, -298, -299,
	-296, 141, 311, 111, 30, 104, 215, 30, 201, 191,
	-117, 289, 104, -213, 329, -204, -59, 357, 89, 30,
	-204, -169, -170, -256, -171, -133, 357, -125, -164, -165,
	-165, -136, -137, -125, -156, 358, 362, -45, -258, 299,
	318, -142, -44, 358, 362, -158, 29, 355, -191, 357,
	-257, 362, 123, 342, 299, 358, 302, -209, -139, 228,
	272, 239, 260, 8, 7, 7, 362, -285, -333, -125,
	261, -45, -133, -136, -133, -253, -201, -281, 357, 349,
	-202, 250, 251, 362, -110, 31, 93, 161, -133, 336,
	-221, -221, 299, -342, 284, -228, -221, 183, 193, 305,
	110, 312, 95, 197, 123, 357, -222, -222, -166, -225,
	357, -166, 356, 366, 358, -221, 356, 356, 362, -240,
	-241, 99, -221, -153, 362, -152, -221, -166, -166, 358,
	358, 299, 299, 299, 299, 357, -323, 209, 357, 357,
	-221, 30, 362, 358, 123, 358, 358, -193, 217, 358,
	10, 11, 348, 349, 350, 351, 118, 352, 353, 346,
	347, 345, 340, 341, 342, 63, 179, 252, 13, 14,
	15, 156, 139, -222, -222, -222, -166, 357, 358, -226,
	-227, 123, 120, 30, -189, -189, -189, 358, 123, -166,
	362, 362, 362, 358, 358, 358, 7, 358, 362, 358,
	336, 336, 358, 357, 358, -213, -255, -161, 2, -251,
	-285, -213, -244, -251, -251, -183, 318, 201, 160, -251,
	-246, 358, -330, 7, -248, -247, 7, -220, -219, 121,
	189, 358, -125, 357, -248, 358, -111, -133, -125, -125,
	191, -211, 136, -116, 191, -260, -125, 357, 357, 161,
	161, -125, -125, 136, -125, 136, -125, -125, -112, 238,
	-59, 357, -133, 238, -125, -59, 357, -125, 238, -95,
	135, 197, 278, 123, -133, 358, 358, 362, -126, 141,
	-126, -59, -164, 5, -59, -133, 104, -118, 100, -341,
	342, -125, -199, -197, -221, -180, -206, 245, 201, -162,
	323, -125, -180, -160, 362, 123, 342, -162, -114, -114,
	-114, -114, -221, -333, -290, 358, -260, 355, 356, 7,
	7, -98, 331, -290, -333, -282, -282, -122, 309, 62,
	228, -282, 362, -202, -221, -249, -133, 363, -221, -221,
	-222, -222, 123, 357, -221, -232, 26, 26, 358, -166,
	358, 362, -217, -221, 358, -230, 101, -221, 295, 358,
	325, -153, -153, -153, 5, 182, 133, 181, -192, 181,
	-192, -192, 7, -324, -125, 357, 329, -152, 358, -278,
	-260, -221, -226, -221, -278, -260, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, 95, 191, 197, -222, 362,
	-166, 358, -227, -226, -221, -221, -260, 358, 358, 358,
	-166, -221, -221, -221, 358, 7, -44, -177, 128, -257,
	362, -177, -183, 357, -221, -251, 356, 358, 362, -247,
	356, 362, 365, 342, -248, 357, -156, -246, 299, 299,
	104, 191, 320, -300, -297, -221, -155, -250, -125, -311,
	357, -308, -309, -131, 357, 357, -109, 98, 264, -196,
	104, -114, 104, -114, 299, -195, 65, -166, 299, -166,
	299, -98, 123, 285, 278, -143, 140, -212, 357, -126,
	357, 357, -151, 357, -125, -119, 166, -341, -288, -314,
	-180, -180, -168, 192, 64, 358, -213, -170, -161, -244,
	358, -99, 71, -99, 7, 356, 358, -97, 203, -96,
	-125, 5, -125, 202, 358, -110, -285, 26, 26, -221,
	-232, 358, -221, -221, 358, -221, 356, -221, 5, -221,
	358, 358, 358, 358, -325, -125, -221, 358, 358, 358,
	-227, 123, 95, 197, 357, -221, 358, 358, 362, 358,
	358, 358, 358, -229, 130, 44, -251, -229, -156, -218,
	7, -219, -285, 355, -247, -156, 358, -125, -125, -211,
	104, -301, 65, -302, 57, 111, 69, 191, 193, 311,
	223, 54, 89, 232, 358, 358, 362, -132, -173, 57,
	-132, -221, 357, -155, -156, 191, 89, 191, 89, 82,
	307, -125, -125, -133, -125, -125, 358, -133, 358, -125,
	-291, 296, -144, 214, 139, -155, 357, -156, -141, 30,
	-155, 201, -120, 165, -341, -288, -117, -205, 357, 201,
	-59, -180, 342, 82, 82, 356, 362, 357, 342, 342,
	-110, -221, -221, 358, 358, -153, -319, 214, 358, -222,
	123, 357, -232, 358, -221, -320, 330, -221, -166, -320,
	358, -248, 7, 358, -211, -125, -285, -125, 111, 136,
	193, 161, 357, -222, -133, -210, -338, 68, 282, -250,
	-110, -285, -110, 358, -166, 358, 358, 193, 193, -221,
	-260, -114, -114, 299, 299, 299, 299, -224, -131, -125,
	44, 212, 358, -155, 358, 358, -59, 358, -133, -341,
	-288, -118, 96, -156, 65, -176, -102, 357, 357, 357,
	-96, -97, -290, -290, 358, -153, 44, -222, -232, 358,
	358, -321, -322, -125, -247, 356, -302, -126, 191, -221,
	-127, 357, -143, 357, -132, -153, 232, -113, 57, -125,
	-125, 357, 357, 357, 174, 227, -133, -210, 358, -143,
	-210, 357, -288, -119, 313, 192, 358, -125, -291, -291,
	358, -326, 227, 251, -166, 358, 362, 30, 104, 358,
	-305, 180, -125, -156, -110, 358, -133, -108, 318, -285,
	-166, -166, -166, 357, 357, 357, -143, -210, -143, -155,
	-120, 264, -213, 358, 358, 358, -327, -328, 36, 308,
	73, -221, -327, -322, -324, 111, -303, -306, -304, 201,
	124, 213, 269, 358, 358, -151, -221, 358, 358, -153,
	-156, -156, -156, -143, 358, -169, -98, -98, -328, 220,
	119, 250, 220, 119, -125, -304, 201, -306, 201, 313,
	92, -305, 358, 358, 358, 358, -210, -213, 26, -307,
	188, 243, 48, 264, -307, -303, 357, 357, -115, 48,
	243, -143, -328, 20, 193, 89, -147, -145, 214, -148,
	-146, 214, 358, 362, -125, 358, 362, -125, -145, -251,
	-146, 323, 170, 294, -251,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	644, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	566, 568, 570, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 680, -2, 691, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 657, 659,
	661, 663, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1246, 1173,
	1179, 1180, 1204, 1205, 1206, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 143,
	145, 146, 0, 0, 0, 1175, 1246, 152, 154, 156,
	158, 0, 164, 0, 0, 0, 0, 533, 161, 163,
	253, 1307, 255, 257, 0, 0, 0, 0, 167, 168,
	169, 170, 171, 172, 174, 176, 178, 180, 182, 183,
	0, 0, 0, 0, 0, 252, 250, 205, 206, 0,
	235, 236, 237, 238, 239, 241, 209, 211, 212, 214,
	216, 218, 220, 221, 223, 225, 226, 228, 230, 231,
	233, 0, 0, 259, 265, 266, 267, 269, 270, 271,
	272, 273, 274, 275, 0, 123, 0, 445, 248, 246,
	0, 119, 0, 563, 0, 261, 564, 565, 560, 561,
	1334, 589, 279, 281, 290, 292, 294, -2, -2, 1424,
	-2, 303, -2, 311, 1430, 0, 314, 315, 318, -2,
	201, 340, 342, 344, 346, 348, 350, 352, 354, 356,
	358, 360, 362, 364, 366, 369, 371, 373, 374, 375,
	0, 0, 0, 379, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 378, 380, 381, 382, 0, 567,
	569, 571, 0, 523, 682, -2, 655, 656, -2, 0,
	686, 686, 686, 0, 0, 656, 654, 0, 282, 0,
	284, 0, 379, 287, 288, 319, 320, 1158, 1159, 883,
	0, 0, 0, 0, 0, 0, 975, 977, 1398, 1424,
	0, 979, 980, 0, 982, 984, 985, 0, 988, 989,
	1143, 1175, 1189, 1190, 1191, 1192, 0, 0, 1195, 0,
	1197, 1198, 1199, 1043, 999, -2, -2, 1187, 811, 812,
	813, 814, -2, 1438, 1003, 1006, 1009, 1012, 1013, 1016,
	1017, 0, 1382, 1399, 1400, 1420, 1421, 1429, 1433, 1434,
	1406, 1417, 1407, 1394, 1404, 1415, 1252, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1213, 845, 846, 851, 852, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	854, 591, 573, 582, 591, 575, 576, 577, 578, 579,
	580, 581, 584, 0, 672, 1313, 675, 1186, 673, 658,
	660, 0, 662, 0, 0, 666, 688, 687, 721, 722,
	0, 670, 671, 681, 737, 775, 752, 743, 0, 0,
	2, 68, 0, 1406, 775, 70, 0, 1406, 775, 72,
	0, 77, 0, 1406, 1178, 0, 0, 263, 264, 1183,
	1181, 1182, 0, 147, 148, 149, 150, 0, 0, 1176,
	1152, 1150, 1151, 159, 502, 1406, -2, 525, 502, 529,
	-2, 679, 1406, 604, 254, 256, 0, 166, 0, 617,
	0, 619, 0, 634, 781, 109, 1406, 186, 199, 109,
	1406, 189, 109, 1406, 192, 1171, 109, 1406, 195, 196,
	1406, 198, 249, 0, 0, -2, 242, 244, 1214, 1215,
	1216, 1217, -2, 1438, 240, 210, 213, 215, 217, 219,
	222, 224, 227, 229, 232, 234, -2, 0, 0, 0,
	444, 0, 0, 0, 562, 0, 588, 297, 0, 300,
	0, 302, 1393, -2, 305, 306, 592, 595, 596, 597,
	0, 0, 0, 0, 0, 0, 0, 316, 202, 0,
	376, 377, 385, 386, 124, 125, 337, 338, 0, 389,
	410, 422, 0, 0, 393, 395, 443, 397, 0, 0,
	399, 0, 401, 0, 403, 0, 405, 0, 407, 409,
	411, 423, 413, 681, 415, 0, 417, 421, 0, 426,
	0, 428, 429, 430, 0, 0, 436, 0, 0, 383,
	384, 109, 779, -2, 0, 650, 700, 701, 0, 0,
	0, 0, 684, 685, 0, 0, 0, 646, 647, 283,
	0, 286, 0, 0, 0, 0, 1078, 1079, 1080, 1081,
	1082, 1083, 1086, 1087, 1084, 1085, 1088, 1089, 1090, 0,
	0, 0, 1091, 1092, 1093, 0, 0, 1095, 0, 1097,
	0, 0, 0, 0, 0, 0, 1157, 0, 0, 1094,
	888, 889, 890, 912, 913, 0, 976, 1154, 1147, 978,
	0, 0, -2, 1099, 0, 0, 981, 986, 987, 0,
	0, 1142, -2, 0, 1194, 0, 880, 1045, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1122,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	848, 859, 856, 855, 832, 0, 831, 829, 0, 833,
	0, 0, 0, 572, 590, 574, 0, 586, 0, 674,
	0, 0, 723, 726, 1163, 1167, 1168, 726, 0, 1160,
	0, 0, 0, 0, 772, 772, 772, 770, 746, 0,
	752, 0, 0, 776, 764, 0, -2, 743, 0, 0,
	777, 0, 78, 557, 88, 0, 557, 557, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 766, 1174, 0, 1148, 1149, 1218, 1219, 1220,
	1221, 1222, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 139, 0, 0, 1169, 1153, 451,
	0, 0, 524, 0, 678, 0, 0, 0, 1406, 532,
	1207, 606, 0, 785, 0, 620, 0, 0, 782, 0,
	184, 0, 107, 108, 0, 187, 0, 190, 0, 0,
	193, 0, 0, 0, 1099, 681, 0, 0, 268, 0,
	0, 681, 0, 1101, 793, 794, 795, 796, 797, 880,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 842, 0, 817, 817, 817, 834, 835, 843,
	844, 849, 850, 861, 862, 864, 866, 860, 860, 860,
	857, 858, 766, 126, 0, 0, 0, 0, 307, 308,
	0, 594, 0, 598, 328, 329, 330, 600, 601, 312,
	331, 332, 333, 334, 335, 336, 0, 519, 0, 521,
	1200, 0, 309, 321, 310, 313, 0, 203, 387, 388,
	390, 391, 392, 396, 0, 440, 398, 400, 402, 404,
	406, 414, 418, 681, 424, 427, 431, 432, 433, 434,
	0, 0, 0, 522, 0, 653, 698, 699, 704, 708,
	709, 712, 715, 716, 706, 883, 667, 668, 669, 692,
	693, 544, 0, 0, 285, 884, 789, 790, 836, 837,
	838, 839, 840, 885, 886, 0, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, -2, -2, -2, 904,
	905, 906, -2, -2, -2, 910, 911, -2, 1096, 1098,
	0, 1157, 0, -2, 0, -2, -2, -2, -2, 924,
	0, 926, 929, 931, 933, 0, 0, 0, 0, 1156,
	943, 1134, 0, 0, 1075, 1076, 1077, 928, 0, 0,
	1155, 1146, 0, 0, -2, 983, 0, 0, 0, 1105,
	1106, 1141, 1137, 0, 990, 691, 0, 0, 0, 0,
	997, 0, 1203, 867, 868, 869, 870, 871, 872, 881,
	1053, 0, 0, 0, 1004, 1005, 1007, 1008, 1010, 1011,
	1014, 1015, 0, 0, 0, 1021, 0, 1109, -2, -2,
	-2, -2, -2, -2, -2, 0, 1023, 0, 1025, 1099,
	1119, 0, 0, 946, 0, 0, 0, 0, 1424, 0,
	1028, 1099, 1127, 0, 0, 0, 0, 0, 1099, 0,
	1133, 0, 0, 0, 0, 0, 1039, 0, 1041, 0,
	0, 0, 0, 0, 0, 585, 676, 0, 0, 785,
	0, 0, 0, 1166, 785, 0, 1162, 0, 0, 0,
	0, 0, 767, 771, 768, 769, 0, 0, 752, 764,
	734, 0, 0, 0, 741, 742, 763, 0, 762, 751,
	-2, 0, 0, 0, 0, 0, 556, 90, 1406, 0,
	111, 0, 0, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 1177, 129, 0, 1184, 0,
	0, 0, 0, 0, 450, 1183, 452, 454, 455, 456,
	457, 1208, 0, 1208, 0, 0, 0, 0, 0, 0,
	608, 614, 0, 703, 0, 632, 622, 0, 0, 0,
	632, 636, 637, 639, 640, 0, 0, 783, 200, 109,
	109, 1172, 109, 109, 197, 251, 0, 207, 243, 0,
	0, 0, 245, 247, 0, 786, 788, 0, 798, 0,
	138, 0, 0, 0, 0, 301, 0, 593, 599, 0,
	325, 0, 327, 520, 1202, 1201, 0, 204, 442, 276,
	416, 419, 437, 438, 439, 780, 0, 710, 0, 0,
	707, 713, 714, 0, 695, 542, 543, 0, 0, 0,
	-2, -2, 0, 0, 0, 944, -2, 925, 927, 930,
	932, 934, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 1144, 1147, -2, 1100, 1103, 1104, 0, 0,
	1138, 0, 0, 0, 0, 690, 691, 691, 691, 996,
	0, 0, 0, 0, 0, 0, 998, 0, 0, 0,
	0, 0, 0, 1020, 0, 1022, 1024, 0, 0, 1026,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 950, 951, 0, 0, 1027, 1125,
	1126, 0, 0, 0, 0, 0, 0, 1033, 0, 1132,
	0, 0, 0, 1037, 1038, 1040, 0, 815, 0, 841,
	863, 865, 853, 681, 1185, 718, 1164, 766, 725, 727,
	1165, 718, 1161, 754, 0, 756, 0, 0, 0, 758,
	0, 747, 0, 749, 764, 739, 0, 0, 732, 0,
	731, 752, 760, 0, 0, 778, 89, 546, 0, 0,
	0, 92, 1406, 100, 0, 474, 0, 0, 0, 0,
	0, 559, 101, 1406, 109, 1406, 109, 102, 79, 557,
	80, 0, 552, 0, 545, 81, 0, 554, 0, 138,
	0, 0, 140, 0, 1170, 459, 501, 0, 0, 1208,
	0, 448, 502, 526, 528, 0, 0, 610, 614, 0,
	613, 679, 632, 702, 784, 615, 632, 0, 0, 0,
	624, 621, 618, 785, 0, 0, 0, 0, 185, 188,
	191, 194, 1100, 258, 0, 0, 1102, 0, 791, 0,
	0, 118, 0, 127, 260, 298, 299, 304, 323, 324,
	326, 322, 0, 0, 0, 694, 544, 0, 887, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1135, 0,
	1070, 0, 0, 1146, -2, 1107, 1136, 1140, 0, 991,
	0, 0, 0, 0, 1196, 873, 874, 875, 876, 877,
	878, 879, 0, 1051, 1052, 1056, 0, 0, 1002, 0,
	0, 1108, 1118, 1120, 947, 948, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, -2, -2, -2, 965,
	966, 967, -2, -2, -2, 0, 0, 0, 1121, 0,
	0, 1073, 1123, 1124, 1129, 1130, 0, 1030, 1031, 1032,
	1131, 0, 0, 0, 847, 0, 0, 720, 0, 724,
	0, 720, 755, 0, 774, 757, 737, 748, 0, 745,
	735, 0, 736, 0, 764, 0, 0, 744, 0, 0,
	0, 0, 110, 472, 491, 0, 0, 535, 541, 541,
	0, 1000, 1001, 0, 0, 0, 94, 0, 0, 0,
	0, 98, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 141, 465, 0, 453, 0, 0,
	0, 451, 0, 0, 0, 612, 614, 0, 605, 606,
	165, 616, 630, 631, 629, 0, 632, 638, 635, 641,
	0, 0, 120, 0, 0, 792, 799, 136, 1297, 134,
	131, 133, 277, 705, 711, 696, 544, 0, 0, -2,
	0, 937, -2, -2, 1069, 1100, 1145, 1139, 1193, 691,
	992, 994, 995, 882, 1058, 1055, 0, 1042, 1018, 1019,
	1117, 0, 0, 0, 0, 1100, 1072, 1029, 0, 1035,
	1036, 816, 677, 1047, 0, 0, 728, 1047, 0, 752,
	750, 733, 729, 0, 740, 0, 761, 548, 550, 91,
	0, 473, 0, 476, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 493, 500, 0, 544, 1188, 0,
	544, 0, 0, 0, 0, 0, 106, 0, 0, 558,
	0, 109, 109, 547, 0, 0, 0, 553, 0, 555,
	128, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 614, 0, 607, 608, 0, 0, 0,
	623, 633, 0, 0, 0, 787, 0, 0, 0, 0,
	697, -2, -2, 938, 1071, 0, 691, 0, 1044, -2,
	0, 0, 0, 1074, 0, 664, 0, 719, 717, 665,
	773, 764, 0, 759, 93, 0, 477, 478, 1208, 0,
	481, 484, 0, 486, 1210, 459, 0, 497, 498, 536,
	537, 540, 538, 541, 691, 495, 0, 95, 96, 105,
	113, 97, 103, 0, 0, 0, 0, 765, 0, 0,
	0, 0, 500, 0, 490, 459, 449, 500, 0, 0,
	609, 610, 0, 0, 0, 642, 643, 0, 0, 0,
	135, 0, 130, 132, 993, 1061, 0, -2, 0, 973,
	1034, 1046, 1048, 0, 738, 730, 475, 479, 0, 0,
	506, 0, 494, 0, 544, 0, 0, 115, 0, 549,
	551, 0, 0, 0, 0, 0, 0, 459, 500, 447,
	459, 0, 611, 612, 0, 626, 785, 628, 0, 0,
	137, 0, 0, 0, 1057, 974, 0, 0, 0, 485,
	511, 0, 0, 0, 539, 991, 502, 99, 0, 112,
	0, 0, 691, 0, 0, 0, 488, 459, 530, 0,
	603, 0, 627, 138, 138, 1054, 1059, 1062, -2, 1366,
	1243, 0, 1060, 1049, 1050, 0, 487, 507, 508, 0,
	503, 504, 505, 1209, 499, 506, 114, 85, 87, 0,
	0, 0, 0, 489, 500, 785, 121, 122, 0, 1064,
	1065, 1066, 1067, 1068, 480, 509, 0, 510, 0, 0,
	0, 511, 0, 0, 0, 462, 459, 625, 0, 512,
	0, 515, 516, 0, 513, 496, 0, 0, 458, 460,
	461, 531, 1063, 514, 517, 518, 0, 466, 0, 0,
	469, 0, 463, 0, 0, 464, 0, 0, 467, 468,
	470, 0, 0, 0, 471,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 346, 3, 352, 347, 3,
	357, 358, 350, 348, 362, 349, 359, 351, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 366, 361,
	340, 342, 341, 3, 363, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 355, 3, 356, 353, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 364, 345, 365, 343,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 344, 57683, 354, 57684, 360,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:877
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:883
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:995
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1041
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1047
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1209
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1212
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1213
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1373
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1904
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2396
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2400
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2404
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2438
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil, PartitionBy: sqlDollar[8].union.partitionBy()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &PartitionBy{
				Typ:        PartitionByList,
				Fields:     sqlDollar[5].union.nameList(),
				Partitions: sqlDollar[8].union.partitions(),
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &PartitionBy{
				Typ:        PartitionByRange,
				Fields:     sqlDollar[5].union.nameList(),
				Partitions: sqlDollar[8].union.partitions(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = []Partition{sqlDollar[1].union.partition()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitions(), sqlDollar[3].union.partition())
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = Partition{Name: sqlDollar[2].str, Values: sqlDollar[3].union.tblExpr(), Typ: PartitionByList}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = []Partition{sqlDollar[1].union.partition()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitions(), sqlDollar[3].union.partition())
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = Partition{Name: sqlDollar[2].str, Values: sqlDollar[6].union.tblExpr(), Typ: PartitionByRange}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			return unimplemented(sqllex, "match full")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			return unimplemented(sqllex, "match partial")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			return unimplemented(sqllex, "match simple")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2824
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			return unimplemented(sqllex, "no action")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			return unimplemented(sqllex, "action set null")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			return unimplemented(sqllex, "action set default")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2941
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = true
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = false
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2972
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2976
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = Ascending
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = Descending
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3016
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3018
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = true
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = false
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3127
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3151
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.str = ""
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.str = ""
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = ReadOnly
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = ReadWrite
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.str = ""
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3321
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			return helpWith(sqllex, "INSERT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3444
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			return helpWith(sqllex, "SELECT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			return helpWith(sqllex, "VALUES")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3610
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			return helpWith(sqllex, "SELECT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3700
		{
			return helpWith(sqllex, "TABLE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3720
		{
			return unimplemented(sqllex, "cte")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3728
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = true
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = false
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = false
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = true
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3756
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			return helpWith(sqllex, "VALUES")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &From{}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3981
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4026
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4063
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = nil
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = true
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = false
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.str = astFullJoin
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.str = astLeftJoin
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.str = astRightJoin
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.str = astInnerJoin
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4247
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4347
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4379
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4462
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = nil
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4527
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4623
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4655
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4695
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = year
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = month
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = day
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = hour
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = month
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = hour
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = minute
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = minute
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = nil
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = second
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4790
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4825
		{
			return unimplemented(sqllex, "at tz")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5059
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5232
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5285
		{
			return unimplemented(sqllex, "variadic")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5286
		{
			return unimplemented(sqllex, "variadic")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5310
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5327
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5331
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5359
		{
			return unimplemented(sqllex, "current role")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5389
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5399
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5409
		{
			return unimplemented(sqllex, "treat")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5455
		{
			return unimplemented(sqllex, "within group")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5456
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5491
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.str = ""
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5553
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5554
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5555
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5559
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5565
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5568
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5569
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Any
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = Some
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = All
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = Plus
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = Minus
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = Mult
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = Div
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = Mod
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = Bitand
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = Bitor
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = Pow
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = Bitxor
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = LT
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = GT
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = EQ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = LE
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = GE
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = NE
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = Like
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = NotLike
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = ILike
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = NotILike
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5934
		{
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6096
		{
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6132
		{
			return unimplemented(sqllex, "func const")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6141
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = DNull
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6168
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.str = ""
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
