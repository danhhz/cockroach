// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) partitions() []Partition {
	return u.val.([]Partition)
}
func (u *sqlSymUnion) partition() Partition {
	return u.val.(Partition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}

//line sql.y:475
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LESS = 57512
const LEVEL = 57513
const LIKE = 57514
const LIMIT = 57515
const LIST = 57516
const LOCAL = 57517
const LOCALTIME = 57518
const LOCALTIMESTAMP = 57519
const LOW = 57520
const LSHIFT = 57521
const MATCH = 57522
const MINUTE = 57523
const MONTH = 57524
const NAN = 57525
const NAME = 57526
const NAMES = 57527
const NATURAL = 57528
const NEXT = 57529
const NO = 57530
const NO_INDEX_JOIN = 57531
const NORMAL = 57532
const NOT = 57533
const NOTHING = 57534
const NULL = 57535
const NULLIF = 57536
const NULLS = 57537
const NUMERIC = 57538
const OF = 57539
const OFF = 57540
const OFFSET = 57541
const OID = 57542
const ON = 57543
const ONLY = 57544
const OPTIONS = 57545
const OR = 57546
const ORDER = 57547
const ORDINALITY = 57548
const OUT = 57549
const OUTER = 57550
const OVER = 57551
const OVERLAPS = 57552
const OVERLAY = 57553
const PARENT = 57554
const PARTIAL = 57555
const PARTITION = 57556
const PASSWORD = 57557
const PAUSE = 57558
const PLACING = 57559
const PLANS = 57560
const POSITION = 57561
const PRECEDING = 57562
const PRECISION = 57563
const PREPARE = 57564
const PRIMARY = 57565
const PRIORITY = 57566
const QUERIES = 57567
const QUERY = 57568
const RANGE = 57569
const READ = 57570
const REAL = 57571
const RECURSIVE = 57572
const REF = 57573
const REFERENCES = 57574
const REGCLASS = 57575
const REGPROC = 57576
const REGPROCEDURE = 57577
const REGNAMESPACE = 57578
const REGTYPE = 57579
const RENAME = 57580
const REPEATABLE = 57581
const RELEASE = 57582
const RESET = 57583
const RESTORE = 57584
const RESTRICT = 57585
const RESUME = 57586
const RETURNING = 57587
const REVOKE = 57588
const RIGHT = 57589
const ROLLBACK = 57590
const ROLLUP = 57591
const ROW = 57592
const ROWS = 57593
const RSHIFT = 57594
const SAVEPOINT = 57595
const SCATTER = 57596
const SEARCH = 57597
const SECOND = 57598
const SELECT = 57599
const SEQUENCES = 57600
const SERIAL = 57601
const SERIALIZABLE = 57602
const SESSION = 57603
const SESSIONS = 57604
const SESSION_USER = 57605
const SET = 57606
const SETTING = 57607
const SETTINGS = 57608
const SHOW = 57609
const SIMILAR = 57610
const SIMPLE = 57611
const SMALLINT = 57612
const SMALLSERIAL = 57613
const SNAPSHOT = 57614
const SOME = 57615
const SPLIT = 57616
const SQL = 57617
const START = 57618
const STATUS = 57619
const STDIN = 57620
const STRICT = 57621
const STRING = 57622
const STORE = 57623
const STORING = 57624
const SUBSTRING = 57625
const SYMMETRIC = 57626
const SYSTEM = 57627
const TABLE = 57628
const TABLES = 57629
const TEMP = 57630
const TEMPLATE = 57631
const TEMPORARY = 57632
const TESTING_RANGES = 57633
const TESTING_RELOCATE = 57634
const TEXT = 57635
const THAN = 57636
const THEN = 57637
const TIME = 57638
const TIMESTAMP = 57639
const TIMESTAMPTZ = 57640
const TO = 57641
const TRAILING = 57642
const TRACE = 57643
const TRANSACTION = 57644
const TREAT = 57645
const TRIM = 57646
const TRUE = 57647
const TRUNCATE = 57648
const TYPE = 57649
const UNBOUNDED = 57650
const UNCOMMITTED = 57651
const UNION = 57652
const UNIQUE = 57653
const UNKNOWN = 57654
const UPDATE = 57655
const UPSERT = 57656
const USE = 57657
const USER = 57658
const USERS = 57659
const USING = 57660
const UUID = 57661
const VALID = 57662
const VALIDATE = 57663
const VALUE = 57664
const VALUES = 57665
const VARCHAR = 57666
const VARIADIC = 57667
const VIEW = 57668
const VARYING = 57669
const WHEN = 57670
const WHERE = 57671
const WINDOW = 57672
const WITH = 57673
const WITHIN = 57674
const WITHOUT = 57675
const WRITE = 57676
const YEAR = 57677
const ZONE = 57678
const NOT_LA = 57679
const WITH_LA = 57680
const AS_LA = 57681
const POSTFIXOP = 57682
const UMINUS = 57683
const HELPTOKEN = 57684

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6627

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	361, 53,
	-2, 684,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 537,
	-2, 0,
	-1, 61,
	92, 684,
	145, 684,
	313, 684,
	314, 684,
	-2, 0,
	-1, 71,
	103, 659,
	112, 659,
	153, 659,
	173, 659,
	199, 659,
	205, 659,
	310, 659,
	-2, 648,
	-1, 103,
	4, 686,
	20, 686,
	21, 686,
	23, 686,
	28, 686,
	33, 686,
	34, 686,
	35, 686,
	36, 686,
	37, 686,
	38, 686,
	39, 686,
	40, 686,
	41, 686,
	42, 686,
	44, 686,
	45, 686,
	46, 686,
	47, 686,
	48, 686,
	51, 686,
	52, 686,
	53, 686,
	55, 686,
	56, 686,
	60, 686,
	61, 686,
	62, 686,
	64, 686,
	66, 686,
	67, 686,
	68, 686,
	71, 686,
	72, 686,
	73, 686,
	81, 686,
	82, 686,
	83, 686,
	84, 686,
	85, 686,
	86, 686,
	87, 686,
	88, 686,
	90, 686,
	92, 686,
	94, 686,
	97, 686,
	98, 686,
	100, 686,
	104, 686,
	105, 686,
	106, 686,
	107, 686,
	108, 686,
	109, 686,
	113, 686,
	114, 686,
	115, 686,
	116, 686,
	117, 686,
	119, 686,
	121, 686,
	126, 686,
	127, 686,
	129, 686,
	132, 686,
	133, 686,
	134, 686,
	135, 686,
	136, 686,
	137, 686,
	140, 686,
	142, 686,
	145, 686,
	146, 686,
	147, 686,
	148, 686,
	149, 686,
	150, 686,
	151, 686,
	152, 686,
	154, 686,
	157, 686,
	158, 686,
	159, 686,
	161, 686,
	162, 686,
	163, 686,
	165, 686,
	166, 686,
	168, 686,
	170, 686,
	171, 686,
	174, 686,
	175, 686,
	178, 686,
	180, 686,
	181, 686,
	182, 686,
	183, 686,
	184, 686,
	185, 686,
	187, 686,
	188, 686,
	189, 686,
	190, 686,
	194, 686,
	195, 686,
	196, 686,
	197, 686,
	198, 686,
	200, 686,
	202, 686,
	203, 686,
	206, 686,
	207, 686,
	209, 686,
	211, 686,
	212, 686,
	213, 686,
	214, 686,
	215, 686,
	216, 686,
	218, 686,
	219, 686,
	220, 686,
	221, 686,
	222, 686,
	224, 686,
	225, 686,
	226, 686,
	227, 686,
	228, 686,
	229, 686,
	230, 686,
	231, 686,
	233, 686,
	234, 686,
	235, 686,
	236, 686,
	237, 686,
	238, 686,
	239, 686,
	240, 686,
	241, 686,
	242, 686,
	243, 686,
	244, 686,
	246, 686,
	248, 686,
	249, 686,
	250, 686,
	251, 686,
	253, 686,
	254, 686,
	255, 686,
	256, 686,
	258, 686,
	259, 686,
	260, 686,
	261, 686,
	262, 686,
	264, 686,
	265, 686,
	266, 686,
	267, 686,
	269, 686,
	270, 686,
	271, 686,
	272, 686,
	274, 686,
	275, 686,
	276, 686,
	277, 686,
	278, 686,
	279, 686,
	280, 686,
	281, 686,
	282, 686,
	283, 686,
	285, 686,
	287, 686,
	288, 686,
	289, 686,
	290, 686,
	291, 686,
	292, 686,
	293, 686,
	294, 686,
	296, 686,
	297, 686,
	298, 686,
	301, 686,
	302, 686,
	303, 686,
	304, 686,
	306, 686,
	307, 686,
	308, 686,
	309, 686,
	312, 686,
	313, 686,
	314, 686,
	315, 686,
	317, 686,
	319, 686,
	320, 686,
	321, 686,
	322, 686,
	323, 686,
	324, 686,
	327, 686,
	332, 686,
	333, 686,
	334, 686,
	335, 686,
	336, 686,
	-2, 0,
	-1, 116,
	103, 658,
	112, 658,
	153, 658,
	173, 658,
	199, 658,
	205, 658,
	310, 658,
	-2, 651,
	-1, 121,
	1, 586,
	157, 586,
	224, 586,
	228, 586,
	360, 586,
	361, 586,
	-2, 0,
	-1, 123,
	1, 586,
	360, 586,
	361, 586,
	-2, 0,
	-1, 124,
	1, 586,
	360, 586,
	361, 586,
	-2, 0,
	-1, 125,
	1, 590,
	360, 590,
	361, 590,
	-2, 0,
	-1, 132,
	4, 692,
	5, 692,
	6, 692,
	7, 692,
	8, 692,
	9, 692,
	20, 692,
	21, 692,
	23, 692,
	28, 692,
	29, 692,
	33, 692,
	34, 692,
	35, 692,
	36, 692,
	37, 692,
	38, 692,
	39, 692,
	40, 692,
	41, 692,
	42, 692,
	44, 692,
	45, 692,
	46, 692,
	47, 692,
	48, 692,
	49, 692,
	50, 692,
	51, 692,
	52, 692,
	53, 692,
	55, 692,
	56, 692,
	58, 692,
	60, 692,
	61, 692,
	62, 692,
	64, 692,
	66, 692,
	67, 692,
	68, 692,
	70, 692,
	71, 692,
	72, 692,
	73, 692,
	75, 692,
	76, 692,
	77, 692,
	79, 692,
	80, 692,
	81, 692,
	82, 692,
	83, 692,
	84, 692,
	85, 692,
	86, 692,
	87, 692,
	88, 692,
	90, 692,
	92, 692,
	94, 692,
	97, 692,
	98, 692,
	100, 692,
	104, 692,
	105, 692,
	106, 692,
	107, 692,
	108, 692,
	109, 692,
	110, 692,
	113, 692,
	114, 692,
	115, 692,
	116, 692,
	117, 692,
	119, 692,
	121, 692,
	124, 692,
	126, 692,
	127, 692,
	129, 692,
	132, 692,
	133, 692,
	134, 692,
	135, 692,
	136, 692,
	137, 692,
	138, 692,
	140, 692,
	142, 692,
	144, 692,
	145, 692,
	146, 692,
	147, 692,
	148, 692,
	149, 692,
	150, 692,
	151, 692,
	152, 692,
	154, 692,
	156, 692,
	157, 692,
	158, 692,
	159, 692,
	160, 692,
	161, 692,
	162, 692,
	163, 692,
	165, 692,
	166, 692,
	168, 692,
	169, 692,
	170, 692,
	171, 692,
	172, 692,
	174, 692,
	175, 692,
	178, 692,
	180, 692,
	181, 692,
	182, 692,
	183, 692,
	184, 692,
	185, 692,
	186, 692,
	187, 692,
	188, 692,
	189, 692,
	190, 692,
	191, 692,
	193, 692,
	194, 692,
	195, 692,
	196, 692,
	197, 692,
	198, 692,
	200, 692,
	203, 692,
	206, 692,
	207, 692,
	208, 692,
	209, 692,
	210, 692,
	211, 692,
	212, 692,
	213, 692,
	214, 692,
	215, 692,
	216, 692,
	218, 692,
	219, 692,
	220, 692,
	221, 692,
	222, 692,
	224, 692,
	225, 692,
	226, 692,
	227, 692,
	228, 692,
	229, 692,
	230, 692,
	231, 692,
	233, 692,
	234, 692,
	235, 692,
	236, 692,
	237, 692,
	238, 692,
	239, 692,
	240, 692,
	241, 692,
	242, 692,
	243, 692,
	244, 692,
	246, 692,
	247, 692,
	248, 692,
	249, 692,
	250, 692,
	251, 692,
	253, 692,
	254, 692,
	255, 692,
	256, 692,
	258, 692,
	259, 692,
	260, 692,
	261, 692,
	262, 692,
	263, 692,
	264, 692,
	265, 692,
	266, 692,
	267, 692,
	268, 692,
	269, 692,
	270, 692,
	271, 692,
	272, 692,
	274, 692,
	275, 692,
	276, 692,
	277, 692,
	278, 692,
	279, 692,
	280, 692,
	281, 692,
	282, 692,
	283, 692,
	285, 692,
	287, 692,
	288, 692,
	289, 692,
	290, 692,
	291, 692,
	292, 692,
	293, 692,
	294, 692,
	296, 692,
	297, 692,
	298, 692,
	301, 692,
	302, 692,
	303, 692,
	304, 692,
	305, 692,
	306, 692,
	307, 692,
	308, 692,
	309, 692,
	312, 692,
	313, 692,
	314, 692,
	315, 692,
	316, 692,
	317, 692,
	319, 692,
	320, 692,
	321, 692,
	322, 692,
	323, 692,
	324, 692,
	327, 692,
	332, 692,
	333, 692,
	334, 692,
	335, 692,
	336, 692,
	337, 692,
	343, 692,
	348, 692,
	349, 692,
	350, 692,
	357, 692,
	363, 692,
	-2, 0,
	-1, 135,
	1, 53,
	361, 53,
	-2, 684,
	-1, 497,
	123, 1285,
	299, 1285,
	342, 1285,
	359, 1285,
	-2, 0,
	-1, 498,
	123, 1236,
	299, 1236,
	342, 1236,
	359, 1236,
	-2, 0,
	-1, 500,
	123, 1343,
	299, 1343,
	342, 1343,
	359, 1343,
	-2, 0,
	-1, 502,
	123, 1366,
	299, 1366,
	342, 1366,
	359, 1366,
	-2, 0,
	-1, 509,
	123, 1290,
	299, 1290,
	342, 1290,
	359, 1290,
	-2, 317,
	-1, 535,
	1, 394,
	356, 394,
	358, 394,
	360, 394,
	361, 394,
	-2, 0,
	-1, 536,
	1, 441,
	120, 441,
	356, 441,
	358, 441,
	360, 441,
	361, 441,
	-2, 0,
	-1, 542,
	1, 408,
	356, 408,
	358, 408,
	360, 408,
	361, 408,
	-2, 0,
	-1, 544,
	1, 412,
	356, 412,
	358, 412,
	360, 412,
	361, 412,
	-2, 0,
	-1, 547,
	1, 420,
	356, 420,
	358, 420,
	360, 420,
	361, 420,
	-2, 0,
	-1, 548,
	1, 425,
	356, 425,
	358, 425,
	360, 425,
	361, 425,
	-2, 0,
	-1, 551,
	1, 435,
	356, 435,
	358, 435,
	360, 435,
	361, 435,
	-2, 0,
	-1, 565,
	112, 694,
	173, 694,
	199, 694,
	-2, 654,
	-1, 568,
	112, 693,
	173, 693,
	199, 693,
	-2, 652,
	-1, 625,
	357, 1214,
	-2, 1207,
	-1, 626,
	357, 1215,
	-2, 1208,
	-1, 632,
	5, 869,
	357, 869,
	-2, 1417,
	-1, 657,
	5, 828,
	-2, 1387,
	-1, 658,
	5, 863,
	357, 863,
	-2, 1389,
	-1, 659,
	5, 838,
	-2, 1390,
	-1, 660,
	5, 837,
	-2, 1391,
	-1, 661,
	5, 863,
	357, 863,
	-2, 1394,
	-1, 662,
	5, 863,
	357, 863,
	-2, 1395,
	-1, 663,
	5, 864,
	-2, 1398,
	-1, 664,
	5, 820,
	-2, 1399,
	-1, 665,
	5, 820,
	-2, 1400,
	-1, 666,
	5, 845,
	-2, 1404,
	-1, 667,
	5, 830,
	-2, 1405,
	-1, 668,
	5, 831,
	-2, 1406,
	-1, 669,
	5, 821,
	-2, 1411,
	-1, 670,
	5, 822,
	-2, 1412,
	-1, 671,
	5, 823,
	-2, 1413,
	-1, 672,
	5, 824,
	-2, 1414,
	-1, 673,
	5, 825,
	-2, 1415,
	-1, 674,
	5, 826,
	-2, 1416,
	-1, 675,
	5, 820,
	-2, 1421,
	-1, 676,
	5, 829,
	-2, 1426,
	-1, 677,
	5, 827,
	-2, 1429,
	-1, 678,
	5, 861,
	357, 861,
	-2, 1431,
	-1, 679,
	5, 865,
	-2, 1434,
	-1, 680,
	5, 867,
	-2, 1435,
	-1, 681,
	5, 860,
	357, 860,
	-2, 1440,
	-1, 776,
	215, 682,
	-2, 530,
	-1, 780,
	201, 1211,
	-2, 0,
	-1, 815,
	1, 208,
	356, 208,
	358, 208,
	360, 208,
	361, 208,
	-2, 657,
	-1, 822,
	4, 1439,
	10, 1439,
	11, 1439,
	13, 1439,
	14, 1439,
	15, 1439,
	16, 1439,
	17, 1439,
	18, 1439,
	20, 1439,
	21, 1439,
	23, 1439,
	26, 1439,
	28, 1439,
	30, 1439,
	33, 1439,
	34, 1439,
	35, 1439,
	36, 1439,
	37, 1439,
	38, 1439,
	39, 1439,
	40, 1439,
	41, 1439,
	42, 1439,
	44, 1439,
	45, 1439,
	46, 1439,
	47, 1439,
	48, 1439,
	51, 1439,
	52, 1439,
	53, 1439,
	55, 1439,
	56, 1439,
	57, 1439,
	60, 1439,
	61, 1439,
	62, 1439,
	63, 1439,
	64, 1439,
	66, 1439,
	67, 1439,
	68, 1439,
	70, 1439,
	71, 1439,
	72, 1439,
	73, 1439,
	81, 1439,
	82, 1439,
	83, 1439,
	84, 1439,
	85, 1439,
	86, 1439,
	87, 1439,
	88, 1439,
	90, 1439,
	92, 1439,
	94, 1439,
	97, 1439,
	98, 1439,
	100, 1439,
	104, 1439,
	105, 1439,
	106, 1439,
	107, 1439,
	108, 1439,
	109, 1439,
	113, 1439,
	114, 1439,
	115, 1439,
	116, 1439,
	117, 1439,
	118, 1439,
	119, 1439,
	121, 1439,
	124, 1439,
	126, 1439,
	127, 1439,
	129, 1439,
	132, 1439,
	133, 1439,
	134, 1439,
	135, 1439,
	136, 1439,
	137, 1439,
	138, 1439,
	139, 1439,
	140, 1439,
	142, 1439,
	144, 1439,
	145, 1439,
	146, 1439,
	147, 1439,
	148, 1439,
	149, 1439,
	150, 1439,
	151, 1439,
	152, 1439,
	154, 1439,
	156, 1439,
	157, 1439,
	158, 1439,
	159, 1439,
	160, 1439,
	161, 1439,
	162, 1439,
	163, 1439,
	165, 1439,
	166, 1439,
	168, 1439,
	169, 1439,
	170, 1439,
	171, 1439,
	172, 1439,
	174, 1439,
	175, 1439,
	178, 1439,
	179, 1439,
	180, 1439,
	181, 1439,
	182, 1439,
	183, 1439,
	184, 1439,
	185, 1439,
	186, 1439,
	187, 1439,
	188, 1439,
	189, 1439,
	190, 1439,
	194, 1439,
	195, 1439,
	196, 1439,
	197, 1439,
	198, 1439,
	200, 1439,
	203, 1439,
	204, 1439,
	206, 1439,
	207, 1439,
	209, 1439,
	211, 1439,
	212, 1439,
	213, 1439,
	214, 1439,
	215, 1439,
	216, 1439,
	218, 1439,
	219, 1439,
	220, 1439,
	221, 1439,
	222, 1439,
	224, 1439,
	225, 1439,
	226, 1439,
	227, 1439,
	228, 1439,
	229, 1439,
	230, 1439,
	231, 1439,
	233, 1439,
	234, 1439,
	235, 1439,
	236, 1439,
	237, 1439,
	238, 1439,
	239, 1439,
	240, 1439,
	241, 1439,
	242, 1439,
	243, 1439,
	244, 1439,
	246, 1439,
	247, 1439,
	248, 1439,
	249, 1439,
	250, 1439,
	251, 1439,
	252, 1439,
	253, 1439,
	254, 1439,
	255, 1439,
	256, 1439,
	258, 1439,
	259, 1439,
	260, 1439,
	261, 1439,
	262, 1439,
	264, 1439,
	265, 1439,
	266, 1439,
	267, 1439,
	268, 1439,
	269, 1439,
	270, 1439,
	271, 1439,
	272, 1439,
	274, 1439,
	275, 1439,
	276, 1439,
	277, 1439,
	278, 1439,
	279, 1439,
	280, 1439,
	281, 1439,
	282, 1439,
	283, 1439,
	285, 1439,
	287, 1439,
	288, 1439,
	289, 1439,
	290, 1439,
	291, 1439,
	292, 1439,
	293, 1439,
	294, 1439,
	296, 1439,
	297, 1439,
	298, 1439,
	301, 1439,
	302, 1439,
	303, 1439,
	304, 1439,
	306, 1439,
	307, 1439,
	308, 1439,
	309, 1439,
	312, 1439,
	313, 1439,
	314, 1439,
	315, 1439,
	317, 1439,
	319, 1439,
	320, 1439,
	321, 1439,
	322, 1439,
	323, 1439,
	324, 1439,
	327, 1439,
	332, 1439,
	333, 1439,
	334, 1439,
	335, 1439,
	336, 1439,
	337, 1439,
	338, 1439,
	340, 1439,
	341, 1439,
	342, 1439,
	343, 1439,
	345, 1439,
	346, 1439,
	347, 1439,
	348, 1439,
	349, 1439,
	350, 1439,
	351, 1439,
	352, 1439,
	353, 1439,
	355, 1439,
	358, 1439,
	359, 1439,
	362, 1439,
	363, 1439,
	-2, 0,
	-1, 836,
	123, 1343,
	299, 1343,
	342, 1343,
	359, 1343,
	-2, 0,
	-1, 853,
	123, 1366,
	299, 1366,
	342, 1366,
	359, 1366,
	-2, 0,
	-1, 923,
	112, 693,
	173, 693,
	199, 693,
	-2, 655,
	-1, 992,
	103, 659,
	112, 659,
	153, 659,
	173, 659,
	199, 659,
	205, 659,
	310, 659,
	-2, 988,
	-1, 1002,
	357, 1191,
	-2, 1179,
	-1, 1020,
	358, 1131,
	-2, 0,
	-1, 1076,
	103, 659,
	112, 659,
	153, 659,
	173, 659,
	199, 659,
	205, 659,
	310, 659,
	-2, 755,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 904,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 905,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 906,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 910,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 911,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 912,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 917,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 919,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 923,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 924,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 925,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 926,
	-1, 1444,
	210, 1073,
	-2, 1076,
	-1, 1488,
	123, 1113,
	357, 1214,
	-2, 1207,
	-1, 1489,
	123, 1114,
	-2, 1383,
	-1, 1490,
	123, 1115,
	-2, 1289,
	-1, 1491,
	123, 1116,
	-2, 1251,
	-1, 1492,
	123, 1117,
	-2, 1267,
	-1, 1493,
	123, 1118,
	-2, 1288,
	-1, 1494,
	123, 1119,
	-2, 1340,
	-1, 1570,
	1, 756,
	70, 756,
	103, 756,
	112, 756,
	124, 756,
	128, 756,
	130, 756,
	144, 756,
	153, 756,
	160, 756,
	169, 756,
	173, 756,
	186, 756,
	199, 756,
	201, 756,
	205, 756,
	245, 756,
	247, 756,
	310, 756,
	318, 756,
	329, 756,
	330, 756,
	339, 756,
	356, 756,
	358, 756,
	360, 756,
	361, 756,
	362, 756,
	-2, 755,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 918,
	-1, 1711,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 920,
	-1, 1716,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 921,
	-1, 1734,
	210, 1072,
	-2, 1075,
	-1, 1959,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 922,
	-1, 1964,
	156, 0,
	-2, 938,
	-1, 1974,
	210, 1074,
	-2, 1077,
	-1, 2016,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 965,
	-1, 2017,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 966,
	-1, 2018,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 967,
	-1, 2022,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 971,
	-1, 2023,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 972,
	-1, 2024,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 973,
	-1, 2149,
	156, 0,
	-2, 939,
	-1, 2152,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 942,
	-1, 2153,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 944,
	-1, 2272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 943,
	-1, 2273,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 945,
	-1, 2280,
	156, 0,
	-2, 974,
	-1, 2358,
	156, 0,
	-2, 975,
	-1, 2439,
	36, 0,
	138, 0,
	172, 0,
	268, 0,
	337, 0,
	343, 0,
	-2, 1386,
}

const sqlPrivate = 57344

const sqlLast = 41922

var sqlAct = [...]int{

	626, 2509, 2105, 2447, 2243, 2438, 2242, 2490, 2306, 2411,
	2449, 2448, 728, 1633, 1613, 1641, 2507, 1200, 1941, 569,
	1993, 2253, 2363, 2437, 874, 70, 1292, 2115, 1704, 2217,
	2203, 2139, 1502, 2137, 2077, 602, 601, 1242, 1907, 2076,
	173, 585, 1630, 1565, 173, 1207, 1909, 1915, 2286, 1074,
	1070, 1848, 173, 2131, 455, 25, 770, 1612, 1827, 1800,
	1203, 173, 616, 1617, 624, 2183, 173, 173, 1642, 1053,
	173, 1616, 1574, 173, 1583, 623, 1606, 1835, 1293, 1799,
	394, 173, 440, 1745, 1566, 998, 1375, 1468, 1700, 1196,
	2047, 1370, 1442, 857, 926, 577, 115, 1082, 1084, 1452,
	1688, 1105, 1517, 1430, 1054, 1427, 596, 1243, 1319, 437,
	856, 1030, 805, 1614, 1462, 1323, 734, 1034, 1620, 802,
	737, 1635, 876, 1552, 816, 1539, 716, 173, 173, 1061,
	1484, 488, 987, 116, 927, 173, 595, 925, 508, 505,
	1322, 795, 117, 164, 574, 618, 466, 1044, 1214, 792,
	501, 169, 714, 1043, 2218, 529, 931, 115, 1733, 860,
	2244, 173, 173, 173, 173, 2244, 1222, 2061, 173, 173,
	2062, 735, 1634, 1222, 2486, 2485, 2484, 2465, 1104, 1104,
	1104, 2216, 573, 758, 2459, 2458, 1222, 2455, 1656, 1656,
	25, 1104, 2435, 573, 1071, 2434, 1671, 744, 748, 1671,
	754, 568, 2406, 2401, 2397, 1924, 1664, 2267, 1104, 2389,
	480, 2360, 2338, 2216, 2335, 1664, 2216, 2333, 1104, 2317,
	2316, 2216, 1925, 1104, 2216, 2294, 861, 1957, 2291, 1104,
	862, 115, 1104, 2274, 2238, 1101, 583, 1664, 1656, 942,
	943, 2236, 2215, 2196, 1079, 1656, 2216, 1104, 2176, 566,
	2154, 2151, 1656, 2130, 1656, 1664, 2125, 1611, 565, 2057,
	1611, 1607, 945, 2058, 1220, 1968, 1935, 1737, 1896, 1656,
	1897, 619, 1104, 1738, 1541, 578, 752, 742, 746, 1851,
	718, 1824, 1736, 1656, 2050, 1104, 944, 1817, 1656, 1815,
	1814, 1818, 959, 1656, 1656, 942, 943, 39, 2533, 1607,
	1813, 972, 973, 974, 1656, 1734, 2526, 1675, 2529, 1656,
	42, 1656, 1663, 2520, 1656, 1655, 1664, 2407, 945, 1656,
	1610, 976, 1671, 1546, 1611, 132, 1671, 1545, 1235, 1520,
	942, 943, 1236, 962, 963, 964, 972, 973, 974, 1656,
	2267, 720, 944, 721, 2050, 1540, 965, 950, 959, 1638,
	1744, 1952, 1572, 945, 134, 2029, 976, 1971, 1104, 1897,
	1703, 1223, 1686, 1048, 1300, 1446, 942, 943, 1223, 962,
	963, 964, 972, 973, 974, 756, 838, 944, 135, 731,
	1320, 1223, 965, 959, 835, 2219, 132, 834, 833, 945,
	832, 133, 976, 831, 830, 829, 684, 63, 828, 126,
	827, 826, 173, 950, 173, 173, 127, 173, 960, 825,
	824, 722, 173, 944, 719, 134, 561, 560, 173, 959,
	559, 527, 526, 969, 977, 118, 525, 524, 762, 576,
	523, 173, 173, 173, 173, 173, 522, 521, 950, 520,
	819, 519, 518, 517, 516, 515, 1465, 514, 513, 809,
	512, 511, 133, 496, 748, 495, 494, 967, 969, 977,
	493, 1924, 173, 492, 960, 574, 428, 427, 426, 754,
	425, 424, 409, 408, 950, 173, 975, 400, 1075, 64,
	1228, 961, 399, 398, 397, 1843, 118, 1221, 390, 2513,
	389, 173, 967, 1466, 969, 977, 158, 157, 938, 960,
	1354, 173, 156, 155, 119, 66, 154, 67, 153, 152,
	151, 1481, 975, 1540, 150, 149, 148, 132, 147, 146,
	132, 942, 943, 145, 966, 144, 143, 461, 967, 142,
	99, 141, 819, 140, 794, 960, 139, 961, 138, 137,
	774, 1467, 1464, 778, 945, 136, 134, 1326, 1479, 134,
	769, 1477, 869, 970, 1475, 2511, 2483, 2454, 2436, 2416,
	966, 2355, 817, 173, 2336, 2182, 2181, 2508, 944, 798,
	798, 2260, 961, 799, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 133, 2177, 924, 133, 1899, 970, 2169,
	2168, 126, 2167, 2163, 126, 2162, 2161, 2160, 127, 748,
	2136, 127, 2044, 2039, 2038, 2037, 1979, 1895, 961, 1855,
	872, 1770, 1771, 839, 1822, 1819, 1469, 1637, 1438, 1807,
	118, 729, 968, 1798, 970, 867, 574, 1769, 971, 950,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 1766,
	1765, 1763, 1750, 1239, 1749, 1570, 938, 937, 1073, 923,
	854, 851, 174, 942, 943, 1072, 1006, 968, 730, 767,
	956, 957, 958, 971, 1785, 955, 953, 954, 946, 947,
	948, 949, 951, 952, 2498, 2497, 945, 1939, 999, 922,
	990, 1206, 2178, 1995, 132, 2366, 870, 762, 2426, 2425,
	2424, 2392, 2384, 968, 2383, 1463, 956, 957, 958, 971,
	944, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	730, 566, 2382, 134, 173, 2374, 173, 1669, 1812, 1776,
	565, 1321, 1699, 2372, 2350, 1439, 2349, 2259, 934, 935,
	1698, 2348, 2303, 2282, 1052, 939, 2268, 2247, 2222, 173,
	173, 2174, 2113, 2111, 2110, 2108, 2085, 2084, 2065, 2053,
	133, 1963, 1886, 1881, 1868, 1867, 819, 173, 126, 1853,
	1823, 950, 1797, 1108, 574, 127, 1002, 1759, 1758, 173,
	1755, 1730, 1059, 1032, 1033, 735, 1080, 1725, 1432, 1035,
	1786, 173, 1038, 1036, 118, 942, 943, 173, 1557, 173,
	1529, 173, 1473, 1039, 1057, 173, 1205, 1199, 1051, 1042,
	1028, 1027, 1026, 1868, 1025, 1197, 1024, 1023, 945, 1022,
	1021, 1020, 589, 1019, 1018, 1017, 1016, 1015, 1014, 1013,
	1012, 1011, 960, 748, 1010, 1215, 1198, 1215, 1003, 115,
	991, 990, 944, 850, 1102, 2266, 1841, 173, 173, 842,
	813, 2156, 1211, 1069, 819, 1047, 173, 1311, 1310, 173,
	1320, 1317, 2135, 1787, 2060, 2056, 1666, 1558, 1045, 1077,
	999, 948, 949, 951, 952, 1770, 1771, 1480, 1049, 1937,
	1108, 988, 1073, 1910, 1674, 2270, 2269, 866, 1607, 173,
	2263, 1092, 2063, 1926, 173, 1075, 1040, 1465, 1307, 173,
	173, 1041, 173, 768, 173, 961, 173, 920, 173, 1821,
	1820, 1090, 1709, 794, 1478, 863, 2287, 1476, 1103, 173,
	1474, 1008, 1942, 1204, 1634, 173, 173, 1673, 1996, 1091,
	1770, 1771, 1453, 1788, 1789, 1790, 1031, 914, 1741, 2516,
	994, 1240, 1314, 2515, 1466, 1920, 1213, 942, 943, 1216,
	2072, 173, 2419, 1660, 159, 1108, 1781, 1779, 1780, 1772,
	1773, 1774, 1775, 1777, 1778, 2481, 2230, 2480, 1949, 1676,
	945, 2327, 1770, 1771, 1085, 1301, 1086, 915, 2326, 2241,
	709, 1327, 2396, 1785, 2325, 2324, 730, 1073, 2100, 2098,
	2069, 1237, 1467, 1464, 944, 1238, 707, 851, 1295, 1294,
	954, 946, 947, 948, 949, 951, 952, 1286, 1576, 115,
	2068, 1298, 1754, 1753, 2096, 1576, 1324, 906, 1005, 1312,
	1085, 1575, 1086, 1342, 705, 702, 574, 1328, 1315, 711,
	1308, 574, 1357, 1332, 1752, 162, 1938, 1751, 1776, 1336,
	1712, 1337, 1335, 1338, 1659, 1339, 1603, 1340, 1599, 1597,
	1414, 1087, 1046, 1770, 1771, 950, 1384, 173, 755, 173,
	1376, 1383, 173, 864, 1346, 1348, 1533, 1469, 1532, 1198,
	1385, 1356, 1355, 173, 1225, 566, 1538, 1227, 566, 566,
	1776, 1230, 1108, 2523, 1366, 173, 1631, 1367, 1368, 173,
	1374, 1351, 173, 163, 1352, 1450, 173, 1087, 563, 1786,
	173, 414, 820, 2395, 2103, 173, 865, 475, 2104, 735,
	1892, 173, 1108, 2308, 574, 173, 960, 879, 1194, 942,
	943, 2432, 1217, 402, 1249, 735, 941, 1099, 1571, 1440,
	1559, 1429, 1437, 1429, 900, 1085, 748, 1086, 952, 1436,
	849, 748, 945, 1098, 1434, 1316, 1463, 754, 1469, 2472,
	942, 943, 429, 1233, 415, 1917, 1595, 1888, 1495, 1577,
	2403, 1776, 1601, 1096, 2087, 1301, 944, 1453, 1883, 1588,
	1590, 901, 1787, 945, 1095, 682, 1093, 1584, 1989, 1331,
	2377, 1097, 1950, 1560, 2404, 1536, 2480, 1679, 1535, 961,
	1296, 1879, 1667, 1544, 820, 1029, 1353, 944, 1681, 1554,
	1555, 1321, 1318, 1550, 406, 1425, 572, 1722, 1918, 1077,
	173, 1626, 1087, 1605, 1580, 1948, 1593, 173, 1778, 1682,
	1423, 1598, 1720, 1604, 1249, 1249, 423, 950, 173, 2332,
	173, 1680, 173, 433, 2510, 173, 1350, 173, 160, 173,
	173, 919, 173, 173, 2508, 1587, 418, 819, 2094, 1280,
	2500, 173, 1917, 1469, 2278, 1573, 571, 1654, 950, 683,
	1782, 1783, 1784, 2244, 1645, 1781, 1779, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 1088, 754, 754, 467, 161, 1636,
	703, 1636, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 432, 985, 1419, 391, 1717, 703, 631, 913, 686,
	472, 1420, 1222, 1421, 1757, 1718, 468, 1426, 573, 1723,
	1772, 1773, 1774, 1775, 1777, 1778, 905, 1549, 573, 960,
	1088, 685, 417, 416, 704, 703, 713, 2309, 628, 712,
	2088, 1443, 2471, 469, 1662, 994, 1553, 1108, 2451, 1447,
	880, 115, 1569, 1455, 2143, 173, 1586, 115, 1640, 1280,
	1280, 1651, 1083, 471, 2450, 1657, 1487, 1487, 1500, 1652,
	1512, 173, 173, 173, 1661, 173, 1524, 1525, 1527, 817,
	1648, 1658, 887, 798, 1668, 798, 1649, 881, 1650, 1670,
	878, 2479, 564, 1714, 173, 1428, 580, 2477, 554, 940,
	1435, 474, 961, 1774, 1775, 1777, 1778, 1692, 754, 1694,
	1986, 748, 1036, 848, 1039, 2211, 582, 401, 485, 1299,
	1033, 1032, 1563, 570, 930, 1422, 2385, 1719, 820, 1301,
	1708, 1677, 1424, 2252, 1721, 1109, 2493, 2452, 464, 1701,
	1702, 1628, 407, 2470, 1585, 1088, 431, 403, 1687, 581,
	2212, 929, 419, 1330, 860, 2501, 845, 404, 1987, 115,
	392, 837, 2172, 910, 1891, 2319, 1060, 946, 947, 948,
	949, 951, 952, 1691, 2318, 470, 434, 555, 574, 2386,
	1726, 1727, 2506, 2301, 1693, 467, 430, 2226, 2412, 1306,
	1697, 1695, 420, 2453, 2369, 1743, 953, 954, 946, 947,
	948, 949, 951, 952, 2071, 1864, 1860, 1223, 472, 1629,
	1212, 1201, 928, 1985, 468, 855, 820, 1345, 1302, 2025,
	1064, 861, 421, 1849, 422, 862, 1362, 2229, 393, 2519,
	911, 473, 2116, 1469, 2228, 1304, 1715, 1713, 930, 772,
	1067, 469, 1109, 942, 943, 929, 2254, 1305, 771, 1838,
	166, 2302, 2207, 574, 2208, 1548, 1062, 1793, 1794, 1795,
	1729, 471, 173, 1108, 2173, 1065, 945, 1870, 173, 173,
	1869, 1740, 173, 1825, 860, 1707, 2491, 173, 1831, 556,
	173, 888, 1063, 912, 2210, 1547, 2505, 860, 173, 2225,
	944, 1850, 571, 2213, 173, 173, 173, 1837, 735, 1363,
	173, 483, 477, 173, 735, 735, 928, 1832, 735, 173,
	173, 173, 173, 173, 780, 2026, 2106, 1109, 173, 1411,
	173, 2027, 791, 1845, 173, 821, 2245, 1890, 1844, 3,
	1857, 2492, 173, 2184, 611, 2048, 2227, 1804, 1805, 1806,
	1854, 861, 173, 1066, 173, 862, 173, 789, 1472, 173,
	909, 950, 2494, 173, 1882, 579, 463, 557, 173, 2281,
	173, 1840, 2171, 1861, 1830, 1826, 554, 173, 1894, 1880,
	860, 2299, 2209, 470, 170, 1885, 464, 2102, 395, 1801,
	173, 819, 1962, 574, 582, 1905, 410, 1898, 1893, 1900,
	558, 1856, 819, 173, 1197, 435, 2300, 898, 1764, 1901,
	478, 170, 1904, 1197, 486, 1724, 904, 491, 1922, 1865,
	760, 1878, 960, 1672, 1836, 510, 1609, 821, 757, 761,
	1602, 1409, 1412, 467, 1596, 918, 917, 896, 173, 473,
	871, 843, 554, 1802, 460, 33, 1343, 861, 1334, 1009,
	1471, 862, 2446, 1865, 1109, 555, 472, 1919, 1913, 2343,
	582, 894, 468, 2409, 2200, 1408, 1927, 482, 476, 1934,
	2092, 717, 717, 1365, 1956, 740, 1960, 1961, 2090, 395,
	1943, 908, 701, 892, 1109, 790, 459, 32, 173, 469,
	1933, 890, 1728, 1965, 1902, 961, 1981, 1982, 1983, 1731,
	1947, 2070, 1936, 1944, 1906, 395, 395, 750, 395, 471,
	788, 1632, 170, 759, 1625, 1953, 1829, 1747, 1748, 1945,
	1946, 555, 1833, 1834, 1232, 1955, 1839, 1231, 897, 458,
	29, 1229, 1951, 884, 903, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 1975, 2028, 1972, 556, 895, 457,
	76, 1410, 1503, 787, 456, 75, 1064, 1796, 1226, 173,
	1988, 1990, 1991, 1997, 1224, 173, 1100, 2002, 1999, 1809,
	33, 1094, 893, 1249, 173, 173, 1067, 2004, 1089, 2032,
	1908, 946, 947, 948, 949, 951, 952, 1976, 2066, 1376,
	2000, 2481, 1551, 932, 891, 735, 706, 708, 1376, 2005,
	2033, 1065, 889, 1325, 1770, 1771, 2265, 1249, 2059, 820,
	2264, 470, 32, 556, 453, 21, 2132, 2345, 173, 1592,
	173, 2064, 454, 22, 2049, 557, 2046, 173, 2101, 725,
	819, 2036, 2052, 1705, 1928, 1929, 2124, 1930, 1931, 115,
	2112, 821, 2051, 2379, 883, 173, 173, 2219, 1110, 726,
	462, 2083, 882, 2082, 2118, 29, 1249, 2126, 558, 2067,
	2357, 2074, 1600, 173, 2081, 2109, 933, 473, 452, 27,
	1576, 1060, 2095, 173, 786, 2117, 1591, 1576, 1108, 1066,
	2120, 1645, 735, 1589, 2121, 76, 451, 19, 2129, 2107,
	75, 557, 2119, 942, 943, 1706, 2331, 2185, 1280, 1109,
	449, 18, 936, 1594, 2128, 2145, 2408, 2122, 2250, 2133,
	1639, 1627, 1776, 2127, 1624, 1537, 173, 1249, 1297, 484,
	1241, 2150, 727, 2489, 558, 1064, 2504, 450, 17, 821,
	444, 14, 1280, 2293, 445, 15, 510, 2190, 776, 510,
	944, 781, 1770, 1771, 2134, 1067, 784, 2045, 443, 13,
	21, 1992, 395, 1249, 1249, 1110, 448, 11, 22, 942,
	943, 1062, 1249, 1249, 1684, 510, 510, 395, 806, 759,
	1065, 173, 1940, 1786, 173, 442, 9, 1684, 1683, 2146,
	1969, 1280, 2170, 1846, 1108, 173, 173, 1063, 2188, 173,
	173, 173, 447, 7, 1816, 1249, 510, 446, 6, 1685,
	2195, 441, 5, 2055, 27, 1534, 173, 735, 1531, 510,
	1530, 173, 1279, 173, 1461, 173, 173, 173, 996, 173,
	2224, 173, 19, 819, 2158, 846, 1984, 2189, 2194, 2220,
	1110, 173, 173, 2191, 1903, 510, 18, 2187, 819, 1006,
	1004, 916, 1280, 907, 2223, 2248, 1787, 2030, 1066, 2240,
	1248, 2233, 1282, 902, 2199, 2237, 899, 885, 2040, 2091,
	847, 2093, 2256, 17, 562, 2307, 14, 2083, 2246, 2082,
	15, 465, 1333, 2251, 1281, 886, 1842, 1556, 1280, 1280,
	2081, 1245, 2257, 2255, 13, 2192, 2402, 1280, 1280, 2249,
	1829, 2083, 11, 2082, 2262, 2271, 2083, 395, 2082, 2276,
	2261, 2164, 1756, 2362, 2081, 2277, 1470, 942, 943, 2081,
	1007, 9, 1279, 1279, 52, 1109, 2079, 605, 2201, 2073,
	1280, 173, 1619, 173, 2280, 1108, 173, 1618, 7, 1111,
	945, 2097, 2283, 6, 173, 1309, 2099, 5, 627, 1486,
	1108, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 1377, 700,
	1248, 1248, 1282, 1282, 944, 1249, 2290, 1110, 629, 2292,
	1503, 1503, 1246, 630, 1247, 2304, 2311, 1037, 617, 2313,
	2305, 2310, 1244, 173, 1281, 1281, 819, 814, 1643, 1313,
	173, 1245, 1245, 1433, 2295, 1451, 1739, 1110, 173, 173,
	819, 819, 1000, 597, 2344, 1198, 2346, 2328, 609, 2083,
	2341, 2082, 608, 1448, 841, 1847, 1916, 2334, 173, 2339,
	2258, 1361, 2081, 173, 1696, 2186, 2342, 2356, 1358, 2351,
	173, 2340, 2352, 1912, 2329, 2337, 2297, 1770, 1771, 2373,
	2083, 2089, 2082, 820, 2358, 1770, 1771, 1503, 1503, 1503,
	2359, 2312, 405, 2081, 820, 173, 173, 2367, 491, 1767,
	717, 812, 1509, 173, 1501, 2376, 2365, 1497, 2321, 2390,
	921, 819, 2388, 1058, 2375, 2368, 173, 2391, 2353, 2354,
	819, 819, 986, 395, 395, 1644, 868, 1923, 1665, 1050,
	1280, 1369, 724, 723, 1303, 2393, 1678, 979, 978, 2387,
	2394, 170, 710, 173, 574, 173, 2399, 2400, 173, 1234,
	1108, 2371, 859, 395, 858, 1202, 1863, 2499, 2378, 2414,
	1059, 2427, 2086, 2418, 2429, 1210, 2517, 131, 2428, 128,
	130, 395, 821, 395, 2415, 395, 129, 1889, 173, 1218,
	79, 2433, 31, 30, 2417, 1776, 2431, 98, 97, 96,
	95, 94, 93, 1776, 92, 173, 173, 173, 2443, 2445,
	2444, 2464, 2430, 173, 91, 2456, 90, 89, 88, 2461,
	2462, 2463, 87, 2460, 86, 2469, 1249, 173, 2466, 85,
	84, 510, 170, 2467, 2468, 2083, 83, 2082, 82, 2476,
	170, 2478, 81, 510, 506, 503, 2482, 78, 2081, 1645,
	77, 28, 24, 102, 2487, 23, 1786, 74, 73, 26,
	2488, 2420, 16, 10, 1786, 20, 2496, 57, 58, 2495,
	2502, 56, 1110, 510, 55, 2503, 2322, 2323, 510, 54,
	587, 12, 1249, 170, 510, 50, 510, 49, 510, 173,
	510, 173, 510, 47, 46, 2289, 45, 44, 8, 101,
	41, 40, 2521, 1344, 2522, 100, 1503, 1503, 2518, 510,
	510, 2532, 2530, 2525, 2531, 2534, 2527, 2524, 113, 110,
	112, 109, 111, 2528, 114, 106, 107, 108, 105, 1787,
	104, 37, 2315, 36, 1249, 510, 35, 1787, 34, 2,
	1, 0, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 1503, 1503, 1503, 1503,
	1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
	1503, 1503, 1503, 1503, 0, 1503, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 71, 0, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777,
	1778, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 0,
	0, 491, 0, 717, 0, 0, 759, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 395, 0, 1280,
	0, 0, 0, 0, 0, 0, 71, 2405, 0, 1568,
	0, 0, 0, 395, 0, 0, 395, 0, 0, 38,
	1581, 0, 0, 0, 395, 0, 0, 0, 1110, 395,
	39, 0, 2421, 2422, 2423, 395, 1109, 0, 0, 1608,
	0, 2211, 0, 42, 2204, 0, 0, 0, 0, 0,
	0, 0, 2202, 0, 0, 0, 2206, 0, 0, 0,
	567, 0, 0, 575, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 820, 2212, 0, 0, 736,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 763, 765, 59, 0, 0, 0, 2205, 0,
	0, 60, 0, 61, 0, 0, 0, 0, 0, 1770,
	1771, 0, 1788, 1789, 1790, 0, 0, 0, 0, 1770,
	1771, 0, 0, 0, 0, 2148, 0, 0, 0, 0,
	63, 0, 0, 0, 1615, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 1279, 395, 0, 1647, 0, 510, 821, 0, 510,
	0, 510, 1785, 395, 395, 0, 1653, 759, 0, 0,
	0, 0, 0, 0, 0, 1581, 840, 1109, 2207, 0,
	2208, 0, 844, 0, 0, 1279, 0, 0, 0, 1248,
	0, 1282, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	2210, 0, 64, 1281, 0, 0, 0, 1776, 0, 2213,
	1245, 0, 0, 1248, 0, 1282, 0, 1776, 820, 0,
	0, 0, 0, 0, 1279, 0, 0, 119, 66, 0,
	67, 0, 820, 820, 0, 0, 0, 1281, 0, 0,
	0, 0, 0, 132, 1245, 1791, 0, 1690, 0, 0,
	461, 0, 0, 99, 0, 0, 0, 0, 0, 1689,
	0, 0, 1248, 0, 1282, 0, 0, 0, 1786, 0,
	0, 0, 134, 0, 0, 395, 395, 395, 1786, 395,
	980, 981, 982, 983, 984, 1279, 1281, 0, 2209, 0,
	993, 0, 0, 1245, 1503, 0, 0, 0, 395, 0,
	1001, 0, 0, 820, 0, 0, 0, 0, 0, 133,
	0, 0, 820, 820, 0, 0, 0, 126, 0, 0,
	0, 1279, 1279, 1248, 127, 1282, 0, 0, 0, 0,
	1279, 1279, 0, 0, 0, 1503, 0, 0, 0, 0,
	0, 1787, 1109, 118, 0, 0, 0, 1281, 0, 0,
	0, 1787, 0, 0, 1245, 0, 0, 0, 0, 1248,
	1248, 1282, 1282, 1279, 0, 0, 0, 0, 1248, 1248,
	1282, 1282, 0, 0, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 1281, 1281, 821, 0, 0, 0, 0,
	1245, 1245, 1281, 1281, 0, 0, 0, 0, 0, 1245,
	1245, 1248, 0, 1282, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 1055, 1055, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 1281, 0, 0, 0, 1782,
	1783, 1784, 1245, 1110, 1781, 1779, 1780, 1772, 1773, 1774,
	1775, 1777, 1778, 0, 0, 0, 0, 1772, 1773, 1774,
	1775, 1777, 1778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 395, 0, 0, 0,
	0, 0, 395, 395, 0, 0, 395, 0, 0, 0,
	0, 1568, 0, 0, 1568, 0, 0, 0, 0, 0,
	0, 0, 1852, 0, 0, 0, 0, 0, 395, 1858,
	1859, 0, 0, 0, 1581, 0, 0, 1866, 0, 0,
	0, 0, 567, 1871, 1872, 1874, 1876, 1877, 0, 0,
	0, 0, 395, 1279, 1884, 0, 0, 0, 1887, 0,
	0, 0, 0, 989, 0, 992, 395, 0, 0, 1110,
	0, 0, 997, 0, 0, 0, 1210, 0, 1210, 0,
	510, 0, 0, 395, 587, 587, 0, 1911, 0, 0,
	0, 1248, 395, 1282, 1921, 0, 0, 0, 0, 0,
	0, 395, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 0, 1689, 1281, 0, 0, 0, 0,
	0, 0, 1245, 821, 0, 0, 0, 1689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1359, 0,
	1364, 0, 0, 0, 0, 0, 1371, 0, 0, 0,
	0, 0, 395, 0, 0, 0, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 0, 1413,
	0, 1415, 1416, 1417, 1418, 0, 0, 0, 71, 0,
	0, 0, 0, 1076, 0, 0, 0, 0, 1441, 0,
	1110, 0, 1994, 0, 0, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 0, 0, 1499, 0,
	1511, 1513, 1518, 1521, 1522, 1523, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 121, 0,
	0, 821, 0, 0, 1279, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 821, 821, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	43, 0, 48, 395, 0, 0, 0, 0, 0, 1568,
	0, 0, 1248, 0, 1282, 0, 0, 0, 759, 1568,
	0, 0, 0, 51, 0, 0, 0, 53, 0, 0,
	1279, 59, 0, 2078, 124, 0, 1281, 0, 60, 0,
	61, 0, 0, 1245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 62, 0,
	0, 0, 1581, 0, 1210, 821, 821, 63, 1248, 0,
	1282, 2114, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 1279, 0, 0, 0, 0, 38, 0, 395,
	395, 0, 1281, 0, 0, 1110, 0, 0, 39, 1245,
	0, 0, 0, 0, 0, 0, 567, 2140, 0, 567,
	567, 42, 0, 0, 0, 0, 0, 2142, 0, 0,
	1248, 0, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 64,
	0, 1245, 1431, 0, 0, 65, 0, 0, 0, 0,
	2165, 0, 59, 0, 0, 575, 0, 0, 0, 60,
	992, 61, 0, 72, 119, 66, 0, 67, 0, 68,
	0, 125, 0, 0, 0, 0, 69, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 80, 63, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 395, 0, 0, 759, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1568,
	759, 0, 0, 2197, 2198, 1581, 0, 736, 0, 103,
	0, 0, 1068, 0, 0, 0, 0, 0, 120, 2078,
	759, 0, 0, 1076, 0, 2231, 133, 2232, 38, 395,
	2234, 2235, 0, 395, 126, 2239, 71, 0, 0, 39,
	0, 127, 71, 2078, 0, 759, 1615, 0, 2078, 0,
	64, 0, 42, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 4, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 119, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 1341, 0, 0, 461, 0,
	0, 99, 0, 59, 0, 0, 0, 0, 1710, 1711,
	60, 0, 61, 0, 1716, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1581, 0, 2296, 0, 63,
	2298, 0, 0, 0, 0, 0, 1735, 0, 395, 0,
	0, 2078, 0, 1742, 0, 0, 1746, 133, 0, 71,
	0, 71, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 127, 1760, 0, 0, 2330, 0, 0, 0,
	71, 0, 2078, 0, 0, 0, 71, 395, 0, 0,
	0, 118, 0, 0, 759, 0, 0, 0, 0, 0,
	0, 0, 2140, 2140, 0, 0, 0, 993, 0, 0,
	0, 0, 0, 0, 1518, 1518, 1518, 0, 0, 0,
	438, 64, 2364, 0, 0, 0, 0, 1568, 0, 0,
	0, 0, 0, 0, 1210, 0, 0, 0, 0, 0,
	1055, 38, 0, 0, 0, 587, 119, 66, 0, 67,
	0, 0, 39, 0, 0, 0, 0, 0, 0, 2380,
	2381, 0, 132, 0, 0, 42, 0, 395, 0, 461,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	2398, 0, 0, 0, 0, 0, 0, 48, 71, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2413, 0, 759,
	0, 0, 395, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 60, 0, 61, 0, 2078, 133, 0,
	0, 0, 0, 0, 1914, 0, 126, 0, 0, 0,
	0, 0, 2364, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 1932, 1431, 0, 759,
	759, 759, 118, 0, 0, 0, 0, 395, 0, 0,
	0, 0, 0, 587, 587, 0, 0, 992, 0, 0,
	0, 2475, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1954, 0,
	0, 0, 0, 1371, 0, 0, 0, 0, 0, 1958,
	0, 0, 1959, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 1964, 0, 0, 0, 0, 0,
	965, 0, 0, 1973, 64, 0, 0, 945, 0, 0,
	976, 1977, 0, 2512, 1932, 2514, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 119,
	66, 944, 67, 0, 2001, 0, 0, 959, 2003, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 99, 736, 0, 0, 0,
	0, 0, 736, 736, 0, 0, 736, 0, 0, 0,
	0, 2034, 2035, 0, 134, 0, 0, 0, 0, 0,
	2041, 2042, 2043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2054, 0, 71,
	0, 133, 969, 977, 0, 71, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 2075, 0, 71,
	0, 0, 71, 0, 0, 439, 967, 0, 0, 0,
	0, 0, 575, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 0, 942, 943, 0, 962, 963, 964, 972, 973,
	974, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 945, 961, 0, 976, 0,
	0, 0, 2149, 0, 0, 0, 2152, 2153, 0, 0,
	0, 2155, 970, 0, 0, 0, 0, 0, 2157, 944,
	2159, 0, 0, 942, 943, 959, 962, 963, 964, 972,
	973, 974, 0, 0, 0, 0, 2166, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2175,
	944, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	950, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	969, 977, 0, 0, 0, 0, 1811, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	2221, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 977, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 966, 0, 0, 975,
	965, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	976, 0, 0, 0, 0, 967, 0, 2272, 2273, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 959, 0, 0,
	736, 38, 0, 0, 961, 0, 0, 966, 2285, 0,
	0, 0, 39, 0, 2288, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 950, 0, 0, 961, 0, 0, 2320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 969, 977, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 60, 0, 61, 0, 0, 0, 968,
	975, 0, 956, 957, 958, 971, 0, 955, 953, 954,
	946, 947, 948, 949, 951, 952, 967, 0, 0, 0,
	0, 0, 63, 960, 1810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 2370, 0, 0, 0, 0, 966, 0,
	968, 0, 0, 956, 957, 958, 971, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 1762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	71, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	66, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2442, 2442, 132, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 99, 0, 0, 0, 2457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 2442,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 2410, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 2442,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 2347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 1112, 177, 1113, 1114, 1115, 1116, 333, 1117,
	1118, 1119, 1120, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 1121, 182, 340, 341, 183, 184, 1122,
	1123, 342, 343, 344, 1124, 185, 345, 1125, 823, 1126,
	186, 187, 188, 992, 189, 1127, 190, 191, 192, 1128,
	687, 193, 194, 195, 1129, 1130, 1132, 1131, 1133, 1134,
	1135, 196, 197, 396, 198, 346, 199, 347, 348, 1136,
	200, 1137, 201, 1138, 202, 1139, 1140, 203, 204, 1141,
	205, 1142, 0, 1143, 349, 206, 207, 208, 350, 351,
	1144, 1145, 1146, 209, 210, 352, 353, 354, 0, 211,
	1147, 212, 1148, 1149, 688, 1150, 213, 355, 1151, 356,
	1152, 0, 214, 215, 216, 217, 357, 358, 690, 1153,
	221, 1154, 218, 1155, 689, 219, 359, 220, 360, 361,
	362, 363, 364, 1156, 365, 1157, 691, 222, 223, 224,
	692, 225, 226, 227, 1158, 229, 228, 1159, 366, 693,
	230, 231, 694, 1160, 232, 233, 1161, 1162, 234, 0,
	235, 236, 237, 239, 367, 238, 695, 240, 241, 243,
	242, 1163, 1164, 1165, 368, 244, 369, 245, 246, 1166,
	247, 1167, 1168, 248, 1169, 1170, 249, 370, 696, 250,
	697, 371, 251, 252, 253, 254, 255, 1171, 256, 372,
	257, 373, 258, 1172, 259, 260, 261, 262, 263, 374,
	264, 265, 1173, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 1174, 278, 698, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 1175, 290, 376,
	289, 291, 292, 1176, 293, 282, 283, 294, 699, 295,
	377, 378, 296, 1177, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 1178, 304, 1179, 305, 306, 307,
	308, 309, 310, 311, 312, 1180, 381, 382, 383, 1181,
	1182, 313, 314, 384, 385, 1183, 315, 316, 317, 318,
	1184, 1185, 319, 320, 321, 322, 1186, 323, 1187, 386,
	324, 325, 326, 387, 388, 1188, 1189, 327, 1190, 1191,
	1192, 1193, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 1561, 0, 0, 0, 0,
	0, 0, 0, 0, 1562, 175, 176, 1112, 177, 1113,
	1114, 1115, 1116, 333, 1117, 1118, 1119, 1120, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 1121, 182,
	340, 341, 183, 184, 1122, 1123, 342, 343, 344, 1124,
	185, 345, 1125, 823, 1126, 186, 187, 188, 0, 189,
	1127, 190, 191, 192, 1128, 687, 193, 194, 195, 1129,
	1130, 1132, 1131, 1133, 1134, 1135, 196, 197, 396, 198,
	346, 199, 347, 348, 1136, 200, 1137, 201, 1138, 202,
	1139, 1140, 203, 204, 1141, 205, 1142, 0, 1143, 349,
	206, 207, 208, 350, 351, 1144, 1145, 1146, 209, 210,
	352, 353, 354, 0, 211, 1147, 212, 1148, 1149, 688,
	1150, 213, 355, 1151, 356, 1152, 0, 214, 215, 216,
	217, 357, 358, 690, 1153, 221, 1154, 218, 1155, 689,
	219, 359, 220, 360, 361, 362, 363, 364, 1156, 365,
	1157, 691, 222, 223, 224, 692, 225, 226, 227, 1158,
	229, 228, 1159, 366, 693, 230, 231, 694, 1160, 232,
	233, 1161, 1162, 234, 0, 235, 236, 237, 239, 367,
	238, 695, 240, 241, 243, 242, 1163, 1164, 1165, 368,
	244, 369, 245, 246, 1166, 247, 1167, 1168, 248, 1169,
	1170, 249, 370, 696, 250, 697, 371, 251, 252, 253,
	254, 255, 1171, 256, 372, 257, 373, 258, 1172, 259,
	260, 261, 262, 263, 374, 264, 265, 1173, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	1174, 278, 698, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 1175, 290, 376, 289, 291, 292, 1176, 293,
	282, 283, 294, 699, 295, 377, 378, 296, 1177, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 1178,
	304, 1179, 305, 306, 307, 308, 309, 310, 311, 312,
	1180, 381, 382, 383, 1181, 1182, 313, 314, 384, 385,
	1183, 315, 316, 317, 318, 1184, 1185, 319, 320, 321,
	322, 1186, 323, 1187, 386, 324, 325, 326, 387, 388,
	1188, 1189, 327, 1190, 1191, 1192, 1193, 328, 329, 330,
	331, 332, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2193, 175, 176, 1112, 177, 1113, 1114, 1115, 1116, 333,
	1117, 1118, 1119, 1120, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 1121, 182, 340, 341, 183, 184,
	1122, 1123, 342, 343, 344, 1124, 185, 345, 1125, 823,
	1126, 186, 187, 188, 0, 189, 1127, 190, 191, 192,
	1128, 687, 193, 194, 195, 1129, 1130, 1132, 1131, 1133,
	1134, 1135, 196, 197, 396, 198, 346, 199, 347, 348,
	1136, 200, 1137, 201, 1138, 202, 1139, 1140, 203, 204,
	1141, 205, 1142, 0, 1143, 349, 206, 207, 208, 350,
	351, 1144, 1145, 1146, 209, 210, 352, 353, 354, 0,
	211, 1147, 212, 1148, 1149, 688, 1150, 213, 355, 1151,
	356, 1152, 0, 214, 215, 216, 217, 357, 358, 690,
	1153, 221, 1154, 218, 1155, 689, 219, 359, 220, 360,
	361, 362, 363, 364, 1156, 365, 1157, 691, 222, 223,
	224, 692, 225, 226, 227, 1158, 229, 228, 1159, 366,
	693, 230, 231, 694, 1160, 232, 233, 1161, 1162, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 1163, 1164, 1165, 368, 244, 369, 245, 246,
	1166, 247, 1167, 1168, 248, 1169, 1170, 249, 370, 696,
	250, 697, 371, 251, 252, 253, 254, 255, 1171, 256,
	372, 257, 373, 258, 1172, 259, 260, 261, 262, 263,
	374, 264, 265, 1173, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 1174, 278, 698, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 1175, 290,
	376, 289, 291, 292, 1176, 293, 282, 283, 294, 699,
	295, 377, 378, 296, 1177, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 1178, 304, 1179, 305, 306,
	307, 308, 309, 310, 311, 312, 1180, 381, 382, 383,
	1181, 1182, 313, 314, 384, 385, 1183, 315, 316, 317,
	318, 1184, 1185, 319, 320, 321, 322, 1186, 323, 1187,
	386, 324, 325, 326, 387, 388, 1188, 1189, 327, 1190,
	1191, 1192, 1193, 328, 329, 330, 331, 332, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 0, 0, 175, 176, 1112, 177, 1113, 1114,
	1115, 1116, 333, 1117, 1118, 1119, 1120, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 1121, 182, 340,
	341, 183, 184, 1122, 1123, 342, 343, 344, 1124, 185,
	345, 1125, 823, 1126, 186, 187, 188, 0, 189, 1127,
	190, 191, 192, 1128, 687, 193, 194, 195, 1129, 1130,
	1132, 1131, 1133, 1134, 1135, 196, 197, 396, 198, 346,
	199, 347, 348, 1136, 200, 1137, 201, 1138, 202, 1139,
	1140, 203, 204, 1141, 205, 1142, 0, 1143, 349, 206,
	207, 208, 350, 351, 1144, 1145, 1146, 209, 210, 352,
	353, 354, 0, 211, 1147, 212, 1148, 1149, 688, 1150,
	213, 355, 1151, 356, 1152, 0, 214, 215, 216, 217,
	357, 358, 690, 1153, 221, 1154, 218, 1155, 689, 219,
	359, 220, 360, 361, 362, 363, 364, 1156, 365, 1157,
	691, 222, 223, 224, 692, 225, 226, 227, 1158, 229,
	228, 1159, 366, 693, 230, 231, 694, 1160, 232, 233,
	1161, 1162, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 1163, 1164, 1165, 368, 244,
	369, 245, 246, 1166, 247, 1167, 1168, 248, 1169, 1170,
	249, 370, 696, 250, 697, 371, 251, 252, 253, 254,
	255, 1171, 256, 372, 257, 373, 258, 1172, 259, 260,
	261, 262, 263, 374, 264, 265, 1173, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 1174,
	278, 698, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 1175, 290, 376, 289, 291, 292, 1176, 293, 282,
	283, 294, 699, 295, 377, 378, 296, 1177, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 1178, 304,
	1179, 305, 306, 307, 308, 309, 310, 311, 312, 1180,
	381, 382, 383, 1181, 1182, 313, 314, 384, 385, 1183,
	315, 316, 317, 318, 1184, 1185, 319, 320, 321, 322,
	1186, 323, 1187, 386, 324, 325, 326, 387, 388, 1188,
	1189, 327, 1190, 1191, 1192, 1193, 328, 329, 330, 331,
	332, 1460, 0, 625, 614, 615, 612, 613, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 1457, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 1458, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 681, 1456, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 1459,
	625, 614, 615, 612, 613, 604, 600, 1454, 0, 0,
	0, 0, 603, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 588, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 132, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 134, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 822,
	681, 0, 0, 327, 0, 0, 0, 126, 328, 329,
	330, 331, 332, 594, 127, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 0, 0, 0,
	0, 0, 0, 995, 0, 0, 0, 0, 576, 603,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 132, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 134, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 822,
	681, 0, 0, 327, 0, 0, 0, 126, 328, 329,
	330, 331, 332, 594, 127, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 625, 614, 615, 612,
	613, 604, 0, 995, 0, 0, 0, 0, 0, 603,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 178, 179, 180, 334, 657,
	336, 658, 181, 659, 660, 0, 182, 340, 341, 183,
	184, 610, 641, 661, 662, 344, 0, 185, 653, 0,
	633, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 687, 193, 194, 195, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 654,
	0, 356, 0, 0, 214, 215, 216, 217, 650, 652,
	690, 0, 221, 0, 218, 0, 689, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 222,
	223, 224, 692, 225, 226, 227, 0, 229, 228, 0,
	655, 693, 230, 231, 694, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 695, 240,
	241, 243, 242, 593, 0, 622, 651, 244, 675, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	696, 250, 697, 645, 251, 252, 253, 254, 255, 0,
	256, 646, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 676, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 698,
	279, 280, 599, 281, 0, 285, 286, 287, 288, 132,
	290, 376, 289, 291, 292, 639, 293, 282, 283, 294,
	699, 295, 677, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 678, 300, 301, 647, 0, 304, 134, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 679,
	680, 0, 0, 313, 314, 648, 649, 620, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 640, 323,
	0, 386, 324, 325, 326, 822, 681, 0, 0, 327,
	0, 0, 0, 126, 328, 329, 330, 331, 332, 594,
	127, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 625, 614, 615, 612, 613, 604, 0, 995,
	0, 0, 0, 0, 0, 603, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 642, 607, 0, 0,
	0, 178, 179, 180, 334, 657, 336, 658, 181, 659,
	660, 1514, 182, 340, 341, 183, 184, 610, 641, 661,
	662, 344, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 1519, 688, 0, 213, 654, 0, 356, 0, 0,
	214, 215, 216, 217, 650, 652, 690, 0, 221, 0,
	218, 0, 689, 219, 669, 220, 670, 671, 672, 673,
	674, 0, 632, 0, 691, 222, 223, 224, 692, 225,
	226, 227, 0, 229, 228, 1515, 655, 693, 230, 231,
	694, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 593,
	0, 622, 651, 244, 675, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 696, 250, 697, 645,
	251, 252, 253, 254, 255, 0, 256, 646, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 676, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 698, 279, 280, 599, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 639, 293, 282, 283, 294, 699, 295, 677, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 678, 300,
	301, 647, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 679, 680, 0, 1516, 313,
	314, 648, 649, 620, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 640, 323, 0, 386, 324, 325,
	326, 387, 681, 0, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 594, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 590, 591, 0, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	584, 603, 625, 614, 615, 612, 613, 604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 642, 607, 0, 0,
	0, 178, 179, 180, 334, 657, 336, 658, 181, 659,
	660, 0, 182, 340, 341, 183, 184, 610, 641, 661,
	662, 344, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 588, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 654, 0, 356, 0, 0,
	214, 215, 216, 217, 650, 652, 690, 0, 221, 0,
	218, 0, 689, 219, 669, 220, 670, 671, 672, 673,
	674, 0, 632, 0, 691, 222, 223, 224, 692, 225,
	226, 227, 0, 229, 228, 0, 655, 693, 230, 231,
	694, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 593,
	0, 622, 651, 244, 675, 245, 246, 0, 247, 586,
	0, 248, 0, 0, 249, 370, 696, 250, 697, 645,
	251, 252, 253, 254, 255, 0, 256, 646, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 676, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 698, 279, 280, 599, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 639, 293, 282, 283, 294, 699, 295, 677, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 678, 300,
	301, 647, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 679, 680, 0, 0, 313,
	314, 648, 649, 620, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 640, 323, 0, 386, 324, 325,
	326, 387, 681, 0, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 594, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 590, 591, 625, 614,
	615, 612, 613, 604, 0, 600, 0, 0, 0, 0,
	0, 603, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 2123, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 1056, 625, 614, 615, 612, 613,
	604, 600, 0, 0, 0, 0, 0, 603, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 642,
	607, 0, 0, 0, 178, 179, 180, 334, 657, 336,
	658, 181, 659, 660, 0, 182, 340, 341, 183, 184,
	610, 641, 661, 662, 344, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	0, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 598, 206, 207, 208, 643,
	644, 621, 0, 0, 209, 210, 666, 667, 668, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 654, 0,
	356, 0, 0, 214, 215, 216, 217, 650, 652, 690,
	0, 221, 1373, 218, 0, 689, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 0, 655,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 593, 0, 622, 651, 244, 675, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 645, 251, 252, 253, 254, 255, 0, 256,
	646, 257, 373, 258, 1372, 259, 260, 261, 262, 263,
	676, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 599, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 639, 293, 282, 283, 294, 699,
	295, 677, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 678, 300, 301, 647, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 679, 680,
	0, 0, 313, 314, 648, 649, 620, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 640, 323, 0,
	386, 324, 325, 326, 387, 681, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 625, 614, 615, 612, 613, 604, 0, 600, 0,
	0, 0, 0, 0, 603, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 588, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 586, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 625, 614, 615,
	612, 613, 604, 0, 600, 0, 0, 0, 0, 0,
	603, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 610, 641, 661, 662, 344, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	654, 0, 356, 0, 0, 214, 215, 216, 217, 650,
	652, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 655, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 593, 0, 622, 651, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 645, 251, 252, 253, 254, 255,
	0, 256, 646, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 599, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 639, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 647, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 648, 649, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 640,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	594, 0, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 0, 0, 0, 0, 999, 1449,
	600, 0, 0, 0, 0, 0, 603, 625, 614, 615,
	612, 613, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 610, 641, 661, 662, 344, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 588, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 598, 206, 207,
	208, 643, 644, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	654, 0, 356, 0, 0, 214, 215, 216, 217, 650,
	652, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 655, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 593, 0, 622, 651, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 645, 251, 252, 253, 254, 255,
	0, 256, 646, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 599, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 639, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 647, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 648, 649, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 640,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	594, 0, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 625, 614, 615, 612, 613, 604, 0,
	600, 0, 0, 0, 0, 0, 603, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 178, 179, 180, 334, 657, 336, 658, 181,
	659, 660, 0, 182, 340, 341, 183, 184, 610, 641,
	661, 662, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 663, 199, 664, 665, 0, 200,
	0, 201, 0, 202, 0, 0, 656, 204, 0, 205,
	0, 0, 0, 598, 206, 207, 208, 643, 644, 621,
	0, 0, 209, 210, 666, 667, 668, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 669, 220, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	593, 0, 622, 651, 244, 675, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 676, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 599,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 677,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 678,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 679, 680, 0, 0,
	313, 314, 648, 649, 620, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 681, 0, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 600, 2031, 0, 0,
	0, 0, 603, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 178, 179,
	180, 334, 657, 336, 658, 181, 659, 660, 0, 182,
	340, 341, 183, 184, 610, 641, 661, 662, 344, 0,
	185, 653, 0, 633, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 687, 193, 194, 195, 0,
	634, 635, 637, 0, 636, 638, 196, 197, 396, 198,
	663, 199, 664, 665, 0, 200, 0, 201, 0, 202,
	0, 0, 656, 204, 0, 205, 0, 0, 0, 598,
	206, 207, 208, 643, 644, 621, 0, 0, 209, 210,
	666, 667, 668, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 654, 0, 356, 0, 0, 214, 215, 216,
	217, 650, 652, 690, 0, 221, 0, 218, 0, 689,
	219, 669, 220, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 222, 223, 224, 692, 225, 226, 227, 0,
	229, 228, 0, 655, 693, 230, 231, 694, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 695, 240, 241, 243, 242, 593, 0, 622, 651,
	244, 675, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 696, 250, 697, 645, 251, 252, 253,
	254, 255, 0, 256, 646, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 676, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 698, 279, 280, 599, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 639, 293,
	282, 283, 294, 699, 295, 677, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 678, 300, 301, 647, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 679, 680, 0, 0, 313, 314, 648, 649,
	620, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 640, 323, 0, 386, 324, 325, 326, 387, 681,
	1980, 0, 327, 0, 0, 0, 0, 328, 329, 330,
	331, 332, 594, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 590, 591, 625, 614, 615, 612, 613,
	604, 0, 600, 0, 0, 0, 0, 0, 603, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 642,
	607, 0, 0, 0, 178, 179, 180, 334, 657, 336,
	658, 181, 659, 660, 0, 182, 340, 341, 183, 184,
	610, 641, 661, 662, 344, 0, 185, 653, 0, 633,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 634, 635, 637, 0,
	636, 638, 196, 197, 396, 198, 663, 199, 664, 665,
	0, 200, 0, 201, 0, 202, 0, 0, 656, 204,
	0, 205, 0, 0, 0, 598, 206, 207, 208, 643,
	644, 621, 0, 0, 209, 210, 666, 667, 668, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 654, 0,
	356, 0, 0, 214, 215, 216, 217, 650, 652, 690,
	0, 221, 0, 218, 0, 689, 219, 669, 220, 670,
	671, 672, 673, 674, 0, 632, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 0, 655,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 593, 0, 622, 651, 244, 675, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 645, 251, 252, 253, 254, 255, 0, 256,
	646, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	676, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 599, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 639, 293, 282, 283, 294, 699,
	295, 677, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 678, 300, 301, 647, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 679, 680,
	0, 0, 313, 314, 648, 649, 620, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 640, 323, 0,
	386, 324, 325, 326, 387, 681, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 625, 614, 615, 612, 613, 604, 0, 600, 1970,
	0, 0, 0, 0, 603, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	178, 179, 180, 334, 657, 336, 658, 181, 659, 660,
	0, 182, 340, 341, 183, 184, 610, 641, 661, 662,
	344, 0, 185, 653, 0, 633, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 634, 635, 637, 0, 636, 638, 196, 197,
	396, 198, 663, 199, 664, 665, 0, 200, 0, 201,
	0, 202, 0, 0, 656, 204, 0, 205, 0, 0,
	0, 598, 206, 207, 208, 643, 644, 621, 0, 0,
	209, 210, 666, 667, 668, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 654, 0, 356, 0, 0, 214,
	215, 216, 217, 650, 652, 690, 0, 221, 0, 218,
	0, 689, 219, 669, 220, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 655, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 593, 0,
	622, 651, 244, 675, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 645, 251,
	252, 253, 254, 255, 0, 256, 646, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 676, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 599, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	639, 293, 282, 283, 294, 699, 295, 677, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 678, 300, 301,
	647, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 679, 680, 0, 0, 313, 314,
	648, 649, 620, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 640, 323, 0, 386, 324, 325, 326,
	387, 681, 0, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 1056, 625, 614,
	615, 612, 613, 604, 600, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 1519, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1564, 603, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1528, 603, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1526, 603, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1510, 603, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1498, 603, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1496, 603, 1488, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	1491, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 1492, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 1493, 1490, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	1494, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 1489,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 1485, 603, 1488, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	334, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 195, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	1491, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 1492, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 1493, 1490, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	1494, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 1489,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 625, 614, 615, 612, 613, 604,
	0, 600, 0, 0, 0, 0, 0, 603, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 178, 179, 180, 334, 657, 336, 658,
	181, 659, 660, 0, 182, 340, 341, 183, 184, 610,
	641, 661, 662, 344, 0, 185, 653, 0, 633, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	687, 193, 194, 195, 0, 634, 635, 637, 0, 636,
	638, 196, 197, 396, 198, 663, 199, 664, 665, 0,
	200, 0, 201, 0, 202, 0, 0, 656, 204, 0,
	205, 0, 0, 0, 598, 206, 207, 208, 643, 644,
	621, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 688, 0, 213, 654, 0, 356,
	0, 0, 214, 215, 216, 217, 650, 652, 690, 0,
	221, 0, 218, 0, 689, 219, 669, 220, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 222, 223, 224,
	692, 225, 226, 227, 0, 229, 228, 0, 655, 693,
	230, 231, 694, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 695, 240, 241, 243,
	242, 593, 0, 622, 651, 244, 675, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 696, 250,
	697, 645, 251, 252, 253, 254, 255, 0, 256, 646,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 676,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 698, 279, 280,
	599, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 639, 293, 282, 283, 294, 699, 295,
	677, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	678, 300, 301, 647, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 679, 680, 0,
	0, 313, 314, 648, 649, 620, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 640, 323, 0, 386,
	324, 325, 326, 387, 681, 0, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 594, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	625, 614, 615, 612, 613, 604, 0, 600, 1444, 0,
	0, 0, 0, 603, 0, 0, 175, 176, 1360, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 0, 0, 0, 766, 603,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 0, 0, 0, 764, 603,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 178,
	179, 180, 334, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 195,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 690, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 694, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 699, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 625, 614, 615, 612,
	613, 604, 0, 600, 0, 0, 0, 0, 0, 603,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 178, 179, 180, 334, 657,
	336, 658, 181, 659, 660, 0, 182, 340, 341, 183,
	184, 610, 641, 661, 662, 344, 0, 185, 653, 0,
	633, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 687, 193, 194, 2441, 0, 634, 635, 637,
	0, 636, 638, 196, 197, 396, 198, 663, 199, 664,
	665, 0, 200, 0, 201, 0, 202, 0, 0, 656,
	204, 0, 205, 0, 0, 0, 598, 206, 207, 208,
	643, 644, 621, 0, 0, 209, 210, 666, 667, 668,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 654,
	0, 356, 0, 0, 214, 215, 216, 217, 650, 652,
	690, 0, 221, 0, 218, 0, 689, 219, 669, 220,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 222,
	223, 224, 692, 225, 226, 227, 0, 229, 228, 0,
	655, 693, 230, 231, 694, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 695, 240,
	241, 243, 242, 593, 0, 622, 651, 244, 675, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	696, 250, 697, 645, 251, 252, 253, 254, 255, 0,
	256, 646, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 676, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 698,
	279, 280, 599, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 639, 293, 282, 283, 294,
	699, 295, 677, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 678, 300, 301, 647, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 679,
	680, 0, 0, 313, 314, 648, 649, 620, 315, 316,
	2440, 318, 0, 0, 319, 320, 321, 322, 640, 323,
	0, 386, 324, 325, 326, 387, 681, 0, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 625, 614, 615, 612, 613, 604, 0, 600,
	0, 0, 0, 0, 0, 603, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 642, 607, 0, 0,
	0, 178, 179, 180, 334, 657, 336, 658, 181, 659,
	660, 0, 182, 340, 341, 183, 184, 610, 641, 661,
	662, 344, 0, 185, 653, 0, 633, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 687, 193,
	194, 195, 0, 634, 635, 637, 0, 636, 638, 196,
	197, 396, 198, 663, 199, 664, 665, 0, 200, 0,
	201, 0, 202, 0, 0, 656, 204, 0, 205, 0,
	0, 0, 598, 206, 207, 208, 643, 644, 621, 0,
	0, 209, 210, 666, 667, 668, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 654, 0, 356, 0, 0,
	214, 215, 216, 217, 650, 652, 690, 0, 221, 0,
	218, 0, 689, 219, 669, 220, 670, 671, 672, 673,
	674, 0, 632, 0, 691, 222, 223, 224, 692, 225,
	226, 227, 0, 229, 228, 0, 655, 693, 230, 231,
	694, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 593,
	0, 622, 651, 244, 675, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 696, 250, 697, 645,
	251, 252, 253, 254, 255, 0, 256, 646, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 676, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 698, 279, 280, 599, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 639, 293, 282, 283, 294, 699, 295, 677, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 678, 300,
	301, 647, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 679, 680, 0, 0, 313,
	314, 648, 649, 620, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 640, 323, 0, 386, 324, 325,
	326, 387, 681, 0, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 594, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 590, 591, 625, 614,
	615, 612, 613, 604, 0, 600, 0, 0, 0, 0,
	0, 603, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 178, 179, 180,
	2439, 657, 336, 658, 181, 659, 660, 0, 182, 340,
	341, 183, 184, 610, 641, 661, 662, 344, 0, 185,
	653, 0, 633, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 687, 193, 194, 2441, 0, 634,
	635, 637, 0, 636, 638, 196, 197, 396, 198, 663,
	199, 664, 665, 0, 200, 0, 201, 0, 202, 0,
	0, 656, 204, 0, 205, 0, 0, 0, 598, 206,
	207, 208, 643, 644, 621, 0, 0, 209, 210, 666,
	667, 668, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 654, 0, 356, 0, 0, 214, 215, 216, 217,
	650, 652, 690, 0, 221, 0, 218, 0, 689, 219,
	669, 220, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 222, 223, 224, 692, 225, 226, 227, 0, 229,
	228, 0, 655, 693, 230, 231, 694, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	695, 240, 241, 243, 242, 593, 0, 622, 651, 244,
	675, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 696, 250, 697, 645, 251, 252, 253, 254,
	255, 0, 256, 646, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 676, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 698, 279, 280, 599, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 639, 293, 282,
	283, 294, 699, 295, 677, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 678, 300, 301, 647, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 679, 680, 0, 0, 313, 314, 648, 649, 620,
	315, 316, 2440, 318, 0, 0, 319, 320, 321, 322,
	640, 323, 0, 386, 324, 325, 326, 387, 681, 0,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 625, 614, 615, 612, 613, 604,
	0, 600, 0, 0, 0, 0, 0, 603, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 178, 179, 180, 334, 657, 336, 658,
	181, 659, 660, 0, 182, 340, 341, 183, 184, 610,
	641, 661, 662, 344, 0, 185, 653, 0, 633, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	687, 193, 194, 195, 0, 634, 635, 637, 0, 636,
	638, 196, 197, 396, 198, 663, 199, 664, 665, 0,
	200, 0, 201, 0, 202, 0, 0, 656, 204, 0,
	205, 0, 0, 0, 598, 206, 207, 208, 643, 644,
	621, 0, 0, 209, 210, 666, 667, 668, 0, 211,
	0, 212, 0, 0, 688, 0, 213, 654, 0, 356,
	0, 0, 214, 215, 216, 217, 650, 652, 690, 0,
	221, 0, 218, 0, 689, 219, 669, 220, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 222, 223, 224,
	692, 225, 226, 227, 0, 229, 228, 0, 655, 693,
	230, 231, 694, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 695, 240, 241, 243,
	242, 0, 0, 622, 651, 244, 675, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 696, 250,
	697, 645, 251, 252, 253, 254, 255, 0, 256, 646,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 676,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 698, 279, 280,
	1508, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 639, 293, 282, 283, 294, 699, 295,
	677, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	678, 300, 301, 647, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 679, 680, 0,
	0, 313, 314, 648, 649, 620, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 640, 323, 0, 386,
	324, 325, 326, 387, 681, 0, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 625, 614, 615,
	612, 613, 604, 1506, 0, 0, 0, 0, 1504, 1505,
	0, 0, 0, 175, 176, 0, 177, 1507, 0, 0,
	0, 642, 607, 603, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 0, 641, 661, 662, 344, 0, 185, 653,
	0, 633, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 634, 635,
	637, 0, 636, 638, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 643, 644, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	654, 0, 356, 0, 0, 214, 215, 216, 217, 650,
	652, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 655, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 0, 0, 622, 651, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 645, 251, 252, 253, 254, 255,
	0, 256, 646, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 1508, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 639, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 647, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 648, 649, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 640,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	1507, 0, 0, 0, 642, 607, 603, 0, 0, 178,
	179, 180, 0, 657, 336, 658, 181, 659, 660, 0,
	182, 340, 341, 183, 184, 610, 641, 661, 662, 344,
	0, 185, 653, 0, 633, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 687, 193, 194, 2441,
	0, 634, 635, 637, 0, 636, 638, 196, 197, 396,
	198, 663, 199, 664, 665, 0, 200, 0, 201, 0,
	202, 0, 0, 656, 204, 0, 205, 0, 0, 0,
	598, 206, 207, 208, 643, 644, 621, 0, 0, 209,
	210, 666, 667, 668, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 654, 0, 356, 0, 0, 214, 215,
	216, 217, 650, 652, 0, 0, 221, 0, 218, 0,
	689, 219, 669, 220, 670, 671, 672, 673, 674, 0,
	632, 0, 0, 222, 223, 224, 692, 225, 226, 227,
	0, 229, 228, 0, 655, 693, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 695, 240, 241, 243, 242, 593, 0, 622,
	651, 244, 675, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 696, 250, 697, 645, 251, 252,
	253, 254, 255, 0, 256, 646, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 676, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 698, 279, 280, 599, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 639,
	293, 282, 283, 294, 0, 295, 677, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 678, 300, 301, 647,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 679, 680, 0, 0, 313, 314, 648,
	649, 620, 315, 316, 2440, 318, 0, 0, 319, 320,
	321, 322, 640, 323, 0, 386, 324, 325, 326, 387,
	681, 0, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 591, 0, 0, 0, 175,
	176, 0, 177, 600, 0, 0, 0, 642, 0, 603,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 641,
	342, 343, 344, 0, 185, 653, 0, 633, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 634, 635, 637, 0, 636, 638,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 643, 644, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 654, 0, 356, 0,
	0, 214, 215, 216, 217, 650, 652, 690, 0, 221,
	0, 218, 0, 689, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 655, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	0, 0, 0, 651, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	645, 251, 252, 253, 254, 255, 0, 256, 646, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 639, 293, 282, 283, 294, 699, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 647, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 648, 649, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 640, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 0, 327, 815, 0, 818,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 2080, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 823, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 687, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 357, 358, 690, 0, 221, 0, 218, 0, 689,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 691, 222, 223, 224, 692, 225, 226, 227, 0,
	229, 228, 0, 366, 693, 230, 231, 694, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 695, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 696, 250, 697, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 698, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 132, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 699, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 134, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 822, 388,
	0, 0, 327, 576, 0, 172, 126, 328, 329, 330,
	331, 332, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 118, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 739, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 132, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 134, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 822, 388, 0, 0, 327, 0,
	172, 0, 126, 328, 329, 330, 331, 332, 0, 127,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 733, 0, 1078, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 357, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 739, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 132, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 134, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 822,
	388, 0, 0, 327, 576, 0, 172, 126, 328, 329,
	330, 331, 332, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 733, 0, 1078, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 132,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 134, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 822, 388, 0, 0, 327,
	1828, 0, 172, 126, 328, 329, 330, 331, 332, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 118,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	739, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 0, 0, 327, 732, 0, 172, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 733, 0, 738, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 739, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	0, 327, 0, 172, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 733,
	0, 738, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 739, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 0, 327, 0, 172, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 733, 0, 738, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	0, 327, 0, 0, 172, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 1195, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 0, 327, 0, 172,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 1646, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 357, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 0, 327, 0, 172, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 1995, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 625, 614, 615,
	612, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 1081, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	657, 336, 658, 181, 659, 660, 0, 182, 340, 341,
	183, 184, 0, 0, 661, 662, 344, 0, 185, 345,
	0, 823, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 687, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 663, 199,
	664, 665, 0, 200, 0, 201, 0, 202, 0, 0,
	656, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 621, 0, 0, 209, 210, 666, 667,
	668, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 690, 0, 221, 0, 218, 0, 689, 219, 669,
	220, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	222, 223, 224, 692, 225, 226, 227, 0, 229, 228,
	0, 366, 693, 230, 231, 694, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 695,
	240, 241, 243, 242, 0, 0, 622, 368, 244, 675,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 696, 250, 697, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 676, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	698, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 699, 295, 677, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 678, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	679, 680, 0, 0, 313, 314, 384, 385, 620, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 681, 0, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	873, 0, 818, 877, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 823, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 687, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 690, 0, 221, 0,
	218, 0, 689, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 691, 222, 223, 224, 692, 225,
	226, 227, 0, 229, 228, 0, 366, 693, 230, 231,
	694, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 695, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 696, 250, 697, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 698, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 699, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 0, 481, 327, 172, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 168, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 167, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 0, 165, 327,
	172, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 171, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 168,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 357, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 167, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 818, 877, 327, 0, 0, 875, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 171, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 823, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 687, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 690, 0, 221, 0, 218,
	0, 689, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 691, 222, 223, 224, 692, 225, 226,
	227, 0, 229, 228, 0, 366, 693, 230, 231, 694,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 695, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 696, 250, 697, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 698, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 699, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 172, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 168, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 167, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 818, 877, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 171, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 823, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 687,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 690, 0, 221,
	0, 218, 0, 689, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 691, 222, 223, 224, 692,
	225, 226, 227, 0, 229, 228, 0, 366, 693, 230,
	231, 694, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 695, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 696, 250, 697,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 698, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 699, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 172, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 818, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	171, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 823,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 687, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 690,
	0, 221, 0, 218, 0, 689, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 691, 222, 223,
	224, 692, 225, 226, 227, 0, 229, 228, 0, 366,
	693, 230, 231, 694, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 695, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 696,
	250, 697, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 698, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 699,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 172, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 1584, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 1582, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 1623, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 1587, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 1621, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 1586, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 1622, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 172, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 1584, 185, 345,
	0, 0, 1579, 186, 187, 188, 0, 189, 1582, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 1587, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 1578,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 1586, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 1585, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 793,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 739,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 745, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 747, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 739, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 741, 327, 172,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 743, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 739, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 413, 327, 172, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 412, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 411, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 172, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	1567, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 172, 2141, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 172, 2141, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 2138, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 172, 0, 327,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 739, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 1349,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 1347, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 172, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 175, 176, 1329, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 357, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 0, 507, 327,
	172, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 852,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 357, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 509, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 504, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 0, 1209, 327, 172, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 1208, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 507, 327, 172, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 852, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 509,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	504, 382, 383, 0, 0, 313, 853, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	507, 327, 172, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 498, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 509, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 836,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 504, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 0, 811, 327, 172, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 178, 179, 180, 334, 335,
	336, 337, 181, 338, 339, 0, 182, 340, 341, 183,
	184, 0, 0, 342, 343, 344, 0, 185, 345, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 396, 198, 346, 199, 347,
	348, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 349, 206, 207, 208,
	350, 351, 0, 0, 0, 209, 210, 352, 353, 354,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 355,
	0, 356, 0, 0, 214, 215, 216, 217, 810, 358,
	0, 0, 221, 0, 218, 0, 0, 219, 359, 220,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	366, 0, 230, 231, 0, 0, 232, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 0, 381, 382,
	383, 0, 0, 313, 314, 384, 385, 0, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 323,
	0, 386, 324, 325, 326, 387, 388, 0, 808, 327,
	172, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 807, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 0, 804, 327, 172, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 803, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 0, 801, 327, 172, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	800, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 0,
	797, 327, 172, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 796, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 172, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 175,
	176, 785, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 783, 327, 172, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 782,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 779,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 777, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 773, 327, 172,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 775, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 751, 327, 172, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 753, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 749, 327, 172, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 0, 507,
	327, 172, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 498, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 357, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 497, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 509, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 499, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 500, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 504, 382, 383, 0, 0, 313, 502,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 0, 489, 327, 172, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 490, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 487, 327, 172,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 357, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	0, 479, 327, 172, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 0, 436, 327, 172, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 178, 179, 180, 334,
	335, 336, 337, 181, 338, 339, 0, 182, 340, 341,
	183, 184, 0, 0, 342, 343, 344, 0, 185, 345,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 396, 198, 346, 199,
	347, 348, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 349, 206, 207,
	208, 350, 351, 0, 0, 0, 209, 210, 352, 353,
	354, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	355, 0, 356, 0, 0, 214, 215, 216, 217, 357,
	358, 0, 0, 221, 0, 218, 0, 0, 219, 359,
	220, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 366, 0, 230, 231, 0, 0, 232, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 312, 0, 381,
	382, 383, 0, 0, 313, 314, 384, 385, 0, 315,
	316, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	323, 0, 386, 324, 325, 326, 387, 388, 172, 0,
	327, 0, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 178, 179, 180,
	334, 335, 336, 337, 181, 338, 339, 0, 182, 340,
	341, 183, 184, 0, 0, 342, 343, 344, 0, 185,
	345, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 396, 198, 346,
	199, 347, 348, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 349, 206,
	207, 208, 350, 351, 0, 0, 0, 209, 210, 352,
	353, 354, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 355, 0, 356, 0, 0, 214, 215, 216, 217,
	357, 358, 0, 0, 221, 0, 218, 0, 0, 219,
	359, 220, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 366, 0, 230, 231, 0, 0, 232, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 0,
	381, 382, 383, 0, 0, 313, 314, 384, 385, 0,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 323, 0, 386, 324, 325, 326, 387, 388, 172,
	0, 327, 0, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 178, 179,
	180, 334, 335, 336, 337, 181, 338, 339, 0, 182,
	340, 341, 183, 184, 0, 0, 342, 343, 344, 0,
	185, 345, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 396, 198,
	346, 199, 347, 348, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 349,
	206, 207, 208, 350, 351, 0, 0, 0, 209, 210,
	352, 353, 354, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 355, 0, 356, 0, 0, 214, 215, 216,
	217, 1875, 358, 0, 0, 221, 0, 218, 0, 0,
	219, 359, 220, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 366, 0, 230, 231, 0, 0, 232,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 312,
	0, 381, 382, 383, 0, 0, 313, 314, 384, 385,
	0, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 323, 0, 386, 324, 325, 326, 387, 388,
	172, 0, 327, 0, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 178,
	179, 180, 334, 335, 336, 337, 181, 338, 339, 0,
	182, 340, 341, 183, 184, 0, 0, 342, 343, 344,
	0, 185, 345, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 396,
	198, 346, 199, 347, 348, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	349, 206, 207, 208, 350, 351, 0, 0, 0, 209,
	210, 352, 353, 354, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 355, 0, 356, 0, 0, 214, 215,
	216, 217, 1873, 358, 0, 0, 221, 0, 218, 0,
	0, 219, 359, 220, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 366, 0, 230, 231, 0, 0,
	232, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 381, 382, 383, 0, 0, 313, 314, 384,
	385, 0, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 323, 0, 386, 324, 325, 326, 387,
	388, 172, 0, 327, 0, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	178, 179, 180, 334, 335, 336, 337, 181, 338, 339,
	0, 182, 340, 341, 183, 184, 0, 0, 342, 343,
	344, 0, 185, 345, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	396, 198, 346, 199, 347, 348, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 349, 206, 207, 208, 350, 351, 0, 0, 0,
	209, 210, 352, 353, 354, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 355, 0, 356, 0, 0, 214,
	215, 216, 217, 1862, 358, 0, 0, 221, 0, 218,
	0, 0, 219, 359, 220, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 366, 0, 230, 231, 0,
	0, 232, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 312, 0, 381, 382, 383, 0, 0, 313, 314,
	384, 385, 0, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 323, 0, 386, 324, 325, 326,
	387, 388, 172, 0, 327, 0, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 178, 179, 180, 334, 335, 336, 337, 181, 338,
	339, 0, 182, 340, 341, 183, 184, 0, 0, 342,
	343, 344, 0, 185, 345, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 396, 198, 346, 199, 347, 348, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 349, 206, 207, 208, 350, 351, 0, 0,
	0, 209, 210, 352, 353, 354, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 355, 0, 356, 0, 0,
	214, 215, 216, 217, 357, 358, 0, 0, 221, 0,
	218, 0, 0, 219, 359, 220, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 366, 0, 230, 231,
	0, 0, 232, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 490, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 312, 0, 381, 382, 383, 0, 0, 313,
	314, 384, 385, 0, 315, 316, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 323, 0, 386, 324, 325,
	326, 387, 388, 172, 0, 327, 0, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 333, 0, 1219,
	0, 0, 178, 179, 180, 334, 335, 336, 337, 181,
	338, 339, 0, 182, 340, 341, 183, 184, 0, 0,
	342, 343, 344, 0, 185, 345, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 396, 198, 346, 199, 347, 348, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 349, 206, 207, 208, 350, 351, 0,
	0, 0, 209, 210, 352, 353, 354, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 355, 0, 356, 0,
	0, 214, 215, 216, 217, 357, 358, 0, 0, 221,
	0, 218, 0, 0, 219, 359, 220, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 366, 0, 230,
	231, 0, 0, 232, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 0, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 312, 0, 381, 382, 383, 0, 0,
	313, 314, 384, 385, 0, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 323, 0, 386, 324,
	325, 326, 387, 388, 172, 0, 327, 0, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 178, 179, 180, 334, 335, 336, 337,
	181, 338, 339, 0, 182, 340, 341, 183, 184, 0,
	0, 342, 343, 344, 0, 185, 345, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 396, 198, 346, 199, 347, 348, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 349, 206, 207, 208, 350, 351,
	0, 0, 0, 209, 210, 352, 353, 354, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 355, 0, 356,
	0, 0, 214, 215, 216, 217, 357, 358, 0, 0,
	221, 0, 218, 0, 0, 219, 359, 220, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 366, 0,
	230, 231, 0, 0, 232, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	715, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 312, 0, 381, 382, 383, 0,
	0, 313, 314, 384, 385, 0, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 323, 0, 386,
	324, 325, 326, 387, 388, 172, 0, 327, 0, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 178, 179, 180, 334, 335, 336,
	337, 181, 338, 339, 0, 182, 340, 341, 183, 184,
	0, 0, 342, 343, 344, 0, 185, 345, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 396, 198, 346, 199, 347, 348,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 349, 206, 207, 208, 350,
	351, 0, 0, 0, 209, 210, 352, 353, 354, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 355, 0,
	356, 0, 0, 214, 215, 216, 217, 357, 358, 0,
	0, 221, 0, 218, 0, 0, 219, 359, 220, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 366,
	0, 230, 231, 0, 0, 232, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 0, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 0, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 0, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 312, 0, 381, 382, 383,
	0, 0, 313, 314, 384, 385, 0, 315, 316, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 323, 0,
	386, 324, 325, 326, 387, 388, 0, 0, 327, 0,
	0, 0, 0, 328, 329, 330, 331, 332, 942, 943,
	0, 962, 963, 964, 972, 973, 974, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 976, 0, 942, 943, 0, 962,
	963, 964, 972, 973, 974, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 944, 0, 0, 0, 945,
	0, 959, 976, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 944, 0, 0, 0, 945, 0, 959,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 950, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 977, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 977, 0, 0, 0, 0,
	967, 0, 950, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 977, 0, 0, 0, 0, 967, 0,
	0, 0, 966, 0, 0, 960, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	966, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 942, 943, 0, 962, 963, 964, 972, 973, 974,
	0, 0, 0, 0, 970, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 945, 0, 961, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 959, 968, 0, 0, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 2361, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 956, 957, 958, 971,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 0, 2314, 0, 0, 0, 0, 950,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 969,
	977, 0, 2284, 942, 943, 0, 962, 963, 964, 972,
	973, 974, 0, 0, 0, 0, 0, 975, 0, 965,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 976,
	0, 942, 943, 967, 962, 963, 964, 972, 973, 974,
	960, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	944, 0, 0, 0, 945, 0, 959, 976, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 969, 977, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	977, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 966, 968, 0,
	960, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 2279,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 942, 943,
	0, 962, 963, 964, 972, 973, 974, 0, 0, 0,
	0, 970, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 945, 0, 961, 976, 0, 942, 943, 0, 962,
	963, 964, 972, 973, 974, 0, 0, 0, 0, 970,
	0, 0, 965, 0, 0, 944, 0, 0, 0, 945,
	0, 959, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 959,
	968, 0, 0, 956, 957, 958, 971, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	0, 2275, 0, 0, 0, 0, 950, 0, 968, 0,
	0, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 969, 977, 0, 2214,
	0, 0, 0, 0, 950, 0, 1770, 1771, 0, 1788,
	1789, 1790, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 2147, 0, 969, 977, 0, 0, 942, 943,
	967, 962, 963, 964, 972, 973, 974, 960, 0, 0,
	0, 0, 975, 0, 965, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 976, 0, 0, 0, 967, 1785,
	0, 0, 966, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 1776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 961, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 0, 1791, 0, 970, 965, 969, 977, 0, 0,
	0, 0, 945, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 1786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	967, 0, 959, 0, 0, 968, 0, 960, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 2180, 0, 0, 0,
	0, 0, 966, 968, 0, 0, 956, 957, 958, 971,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 0, 2179, 0, 0, 950, 1787, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 969, 977, 0,
	961, 0, 945, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 967, 959, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 1782, 1783, 1784, 0,
	0, 1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778,
	0, 0, 0, 0, 0, 968, 0, 950, 956, 957,
	958, 971, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 2144, 969, 977, 0,
	0, 961, 0, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 975, 0, 970, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	976, 967, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 1998, 0, 0,
	0, 961, 950, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 970, 0, 0,
	965, 0, 969, 977, 0, 0, 0, 945, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 967, 959, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 966, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 950, 0, 1770, 1771, 0, 1788, 1789, 1790,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1967, 0, 969, 977, 0, 0, 961, 0, 0, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	975, 0, 970, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 976, 967, 1785, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 1776, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 1445, 0, 0, 0, 961, 950, 2474, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	1791, 0, 970, 0, 0, 965, 0, 969, 977, 0,
	0, 0, 945, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 1786, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 967, 959, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 966, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 2473,
	1732, 0, 0, 0, 0, 0, 1787, 950, 0, 1802,
	0, 0, 1801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 977, 0,
	0, 961, 0, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 975, 0, 970, 0, 0,
	965, 0, 0, 0, 0, 1705, 0, 945, 0, 0,
	976, 967, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 966, 1782, 1783, 1784, 0, 0, 1781,
	1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 1706, 0, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 0, 1543, 0,
	0, 961, 950, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 970, 0, 0,
	965, 0, 969, 977, 1542, 0, 0, 945, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 967, 959, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 966, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 969, 977, 0, 0, 961, 945, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 967, 959, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 950, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 969, 977, 0, 0, 961, 0, 0, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	975, 0, 970, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 976, 967, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 966, 573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1770, 1771, 0, 1788, 1789, 1790, 0, 0, 0, 0,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 950, 0, 942,
	943, 0, 962, 963, 964, 972, 973, 974, 0, 0,
	0, 0, 970, 1785, 0, 965, 0, 969, 977, 0,
	0, 0, 945, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 967, 959, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1776, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 966, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 1791, 950, 0, 0,
	942, 943, 1808, 962, 963, 964, 972, 973, 974, 0,
	0, 0, 0, 0, 0, 0, 965, 969, 977, 1786,
	1803, 961, 0, 945, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 967, 0, 959, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 1978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 1787, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 950, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 0, 969, 977,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 970, 0, 0,
	0, 942, 943, 0, 962, 963, 964, 972, 973, 974,
	0, 0, 967, 0, 0, 0, 0, 965, 0, 960,
	0, 0, 0, 0, 945, 0, 0, 976, 0, 0,
	1782, 1783, 1784, 0, 0, 1781, 1779, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 966, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 956,
	957, 958, 971, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 950,
	0, 942, 943, 0, 962, 963, 964, 972, 973, 974,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 969,
	977, 1761, 0, 0, 945, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 967, 959, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	956, 957, 958, 971, 0, 955, 953, 954, 946, 947,
	948, 949, 951, 952, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 942, 943, 0, 962, 963, 964, 972, 973, 974,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 969,
	977, 0, 0, 961, 945, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 967, 959, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 950,
	0, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 969,
	977, 0, 0, 961, 942, 943, 0, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 975, 0, 970,
	965, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	976, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 942, 943, 966, 962, 963, 964, 972,
	973, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 968, 976,
	0, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 0,
	944, 0, 950, 961, 942, 943, 959, 962, 963, 964,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 969, 977, 0, 0, 0, 945, 0, 0,
	976, 1770, 1771, 0, 1788, 1789, 1790, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 1966, 0, 0,
	0, 944, 0, 0, 0, 0, 967, 959, 0, 0,
	0, 950, 0, 960, 0, 0, 0, 0, 0, 0,
	1770, 1771, 0, 1788, 1789, 1790, 0, 0, 0, 0,
	0, 969, 977, 0, 1785, 0, 0, 0, 968, 0,
	0, 956, 957, 958, 971, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 960, 1785, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 977, 0, 0, 961, 0, 0, 1776,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 1791, 1776, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 1792,
	1786, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 1791, 0, 0, 0,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 1786,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1787, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 956, 957, 958, 971, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 1268, 1258, 1287, 1250, 1278,
	1277, 0, 1787, 1252, 1251, 0, 0, 0, 0, 1289,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 956, 957, 958, 971, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 0, 1283, 0, 1275, 1274, 0, 0, 0,
	0, 1782, 1783, 1784, 0, 1273, 1781, 1779, 1780, 1772,
	1773, 1774, 1775, 1777, 1778, 0, 0, 0, 0, 0,
	0, 0, 0, 1272, 1270, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1782, 1783, 1784, 0, 0, 1781, 1779, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 1261, 1260, 1262, 1263, 1264, 1265,
	1266, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 1258, 1287, 1250, 1278, 1277, 0, 0,
	1252, 1251, 0, 0, 0, 0, 1289, 1288, 0, 0,
	0, 0, 1254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1283, 0, 1275, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 1269, 0, 0,
	0, 1380, 1378, 1379, 1382, 1381, 0, 0, 0, 0,
	1272, 1270, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1267, 1256,
	0, 1261, 1260, 1262, 1263, 1264, 1265, 1266, 1291, 1286,
	0, 0, 0, 0, 0, 0, 528, 0, 554, 0,
	0, 1253, 0, 0, 0, 1284, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 0, 0, 1254,
	0, 0, 0, 0, 0, 0, 0, 1257, 531, 0,
	0, 1276, 1290, 0, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 532,
	0, 0, 0, 0, 534, 0, 0, 0, 0, 540,
	541, 0, 0, 550, 1269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1255, 0, 0, 0, 0, 0,
	553, 0, 0, 0, 0, 1267, 1256, 0, 0, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 1253, 0,
	0, 0, 1284, 1285, 0, 537, 538, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 1257, 0, 539, 546, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 547, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 552, 0, 0, 0, 0,
	558, 0, 0, 0, 0, 545, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551,
}
var sqlPact = [...]int{

	3383, -1000, 17, -1000, -1000, -1000, 185, -1000, -1000, -1000,
	179, 178, 176, -1000, 173, 171, 169, 166, 165, 163,
	159, 158, 156, 155, 154, -1000, 150, -1000, -1000, -1000,
	-1000, 149, 148, 146, 143, 142, 137, 136, 942, 22706,
	130, 128, 1282, 35624, 124, 123, 122, 117, 1111, 113,
	112, 26249, 999, 1214, 111, 110, 108, 107, 106, 1140,
	35303, 3898, 1634, 1095, 1580, 34979, 22382, 1579, 1396, 34655,
	-1000, -1000, 34331, 103, 100, 96, 95, 93, -1000, -1000,
	34007, 91, 90, 88, 87, 85, 84, 83, 82, 81,
	79, 77, 76, 70, 67, -1000, 66, 62, 61, 41604,
	60, 57, 56, 1086, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 129, -1000, 1093, 427, 1374,
	8018, 1013, 1012, 984, 968, 1017, 37550, 35624, 54, -19,
	51, -1000, 1907, 619, 19764, 3383, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25925, 25601, 33683, 33359, 749, -1000, 13, 23990, 35624, -1000,
	69, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15426, 15066, 536, 69, -1000, -1000, -1000, -1000,
	-1000, 33035, -1000, 32711, 32387, 1453, 32063, -1000, -1000, -1000,
	-1000, 31739, -1000, -1000, 1831, 1625, 1600, 25277, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31418, 31094, 30770, 30446, 30122, 483, -1000, -1000, -1000, 18135,
	-1000, -1000, -1000, -1000, 50, -1000, 49, -1000, 41, 40,
	38, 35, -1000, 34, 33, -1000, 30, 28, -1000, 27,
	24, 29798, 1240, -1000, -1000, 14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35624, -1000, 16118, -1000, 482, -1000,
	1588, -1000, 16118, -1000, 1235, -1000, -1000, -1000, -1000, -1000,
	35624, -1000, -1000, -1000, -1000, -1000, -1000, 2138, 1128, 476,
	29474, -1000, 1493, -1000, 569, 754, -1000, -1000, -1000, 9057,
	193, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1708, 22058, 1105, 1877, 1801, 2135, 1360, 1759, 1751, 1729,
	1705, 1675, 2134, 899, 2131, 1684, 1005, 2121, 1628, 1286,
	641, 2119, 1583, 1582, -1000, -1000, -1000, -1000, 895, -1000,
	-1000, -1000, 27533, -1000, -1000, 1093, -1000, -1000, -1000, 1319,
	1851, 1851, 1851, 1938, 289, 288, -1000, 129, -1000, 1642,
	-1000, 1114, -1000, -1000, -1000, -1000, -1000, 40801, -1000, -1000,
	16118, 16118, 16118, 16118, 16118, 1072, 516, -1000, 474, 473,
	7312, -1000, -1000, 2091, -1000, -1000, -1000, 323, -1000, -1000,
	16118, 69, -1000, -1000, -1000, -1000, 471, 2115, -1000, 651,
	-1000, -1000, -1000, 579, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1599, 467, 464, 463, -1000, 462, -1000,
	-1000, 461, 460, 459, 458, 457, 456, 454, 453, 452,
	450, 449, 447, 445, 444, 443, 964, -1000, 599, -1000,
	-1000, 599, 599, -1000, 422, 422, 425, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 422, -1000, -1000, -1000, 553,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	442, 1277, -1000, -1000, 1277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 743, 36908, 1, 35624, -1000, 441, 1, -1000,
	-1000, 301, -1000, 11147, 11147, -1000, -1000, -1000, -1000, -1000,
	9763, 1881, -1000, 3685, -169, 298, 547, -1000, 18786, 21390,
	-1000, -1000, 1104, 1754, 627, -1000, 928, 1747, 522, -1000,
	926, -1000, 879, 1742, -128, 23027, 23990, 13, -4, -1000,
	-1000, -1000, 5591, 40801, -1000, 40801, -1000, 830, 20414, 69,
	-1000, -1000, -1000, -1000, 440, 1300, 582, -1000, 324, -1000,
	29150, 582, 1299, -1000, -1000, -1000, 27533, -1000, 35624, -1000,
	35624, -1000, 848, -1000, 37229, 125, 1740, -1000, -1000, 125,
	1734, -1000, 118, 1697, -1000, -1000, 1244, 1693, -1000, -4,
	1690, -1000, -1000, 16118, -30, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 619, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28826, 23348, 1198, 574,
	40801, 1970, 41445, 23027, 40801, 23348, -1000, -1000, 35624, -1000,
	16118, -1000, 1968, 1397, 2, -1000, -1000, -1000, -1000, -1000,
	1327, 1337, 686, 843, 9057, 9057, 1810, -1000, 188, 5924,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28502, -1000,
	-1000, -1000, 1167, 35624, -1000, -1000, 1598, -1000, 23348, 35624,
	-1000, 35624, -1000, 35624, -1000, 35624, -1000, 35624, -1000, -1000,
	-1000, -1000, -1000, 3514, -1000, 1596, -1000, -1000, 35624, -1000,
	1326, -1000, -1000, -1000, 28181, 27857, -1000, 940, 798, -1000,
	-1000, 138, -1000, -1000, 1319, -1000, 1205, 1413, 14706, 1392,
	16118, 129, -1000, -1000, 129, 129, 8711, -1000, -1000, -1000,
	35624, -1000, 41318, 41445, 5924, 764, 16118, 16118, 16118, 16118,
	16118, 16118, 16118, 16118, 16118, 16118, 16118, 16118, 16118, 16118,
	16118, 16118, 16118, 16118, 16118, 16118, 16118, 16118, 1563, 16118,
	741, 16118, 16118, 16118, 16118, 1100, 1091, 421, 1107, -1000,
	2029, 2029, 2029, 41044, 41044, 368, 516, -1000, 16118, -1000,
	68, 14360, 288, 39364, 3, 6966, -1000, -1000, -1000, 9403,
	594, 40801, 69, 6259, -1000, 2087, 801, 1607, 1500, 435,
	552, 549, 546, 509, 16118, 16118, 14014, 13654, 13294, 16810,
	12934, 16118, 7658, 16118, 16118, 16118, 16118, 12574, 12214, -1000,
	433, -1000, -1000, -1000, -1000, 2083, -1000, -1000, 2081, -1000,
	762, 760, 2078, -1000, 2, -1000, 36908, -1000, 35624, 1,
	1965, 35624, -1000, 151, -1000, 39964, -1000, 151, -35, -1000,
	1405, 1375, 20089, 1712, 1118, 1118, 1118, -1000, 431, 501,
	547, 4910, 11854, -1000, 26570, 1126, 140, 287, 18461, 1881,
	-1000, 35624, -10, 946, -1000, 24953, 1898, 1891, 1834, 27533,
	1950, 68, 1581, 740, 27533, 739, 1909, 68, 1577, 737,
	35624, 5924, 539, -1000, 35624, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1573, -38, -1000, -1000, 24632,
	1964, 1680, -1000, 986, -1000, 1961, 35624, 1220, 1298, -1000,
	-1000, 787, 1677, 585, 260, 1960, 260, 20740, -1000, 35624,
	-1000, 35624, -1000, -1000, 35624, -1000, 35624, -1000, 35624, 35624,
	-1000, 35624, 35624, -43, 40801, 4528, 24311, 735, -1000, 625,
	24632, 263, -46, -1000, 827, -1000, -1000, -1000, -1000, 360,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 425, 964, 422, 422, 422, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 553, -1000, -1000, 599, 599, 599,
	-1000, -1000, -40, -1000, 1570, 575, -51, 657, 2, -1000,
	1277, -1000, 949, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2114, -1000, 2050, -1000,
	-1000, 2072, 0, -1000, 0, -1000, 5924, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35624, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2676, -1000, -1000, -1000, -1000, -1000, -1000,
	35624, 35624, 35624, -1000, 27533, -1000, -1000, -1000, -1000, 40801,
	-1000, 373, -1000, -1000, 40801, 1169, 1419, -1000, 1419, -2,
	-1000, 39854, 1394, 35624, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 566, 511, 511, 775, 775,
	775, 775, 2177, 643, 1513, 1130, 285, 285, 285, 927,
	1099, 1099, 285, 285, 285, 41044, 40934, 229, 16118, 16118,
	731, 1089, 421, 229, 16118, 229, 229, 229, 229, -1000,
	1102, -1000, -1000, -1000, -1000, 1562, 420, 16810, 16810, -1000,
	-1000, -1000, 7312, 17143, -1000, -1000, -1000, -1000, 414, 16118,
	-1000, 39474, -208, -53, -1000, -1000, 16118, -74, -89, -1000,
	-1000, 829, -1000, 16118, -1000, -12, 16118, 16118, 16118, 286,
	-1000, 284, -1000, 728, -1000, 725, 704, 703, -1000, 413,
	1085, 411, 410, 16118, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40691, 4353, 283, -1000, 1555, -48, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 282, -1000, 281, -1000, 40581,
	-48, 269, 41110, -1000, 16810, 16810, 16810, 7312, 405, 265,
	-1000, 39719, -48, 40430, 11494, 11494, 11494, 261, 40319, 16118,
	-48, 4302, 4084, 356, -58, -68, -1000, -69, -1000, 2067,
	-71, 257, 564, 563, 256, -1000, -1000, 403, -77, 585,
	11147, 19438, 5924, -1000, 585, 9763, -1000, 20089, 20089, 1376,
	1369, 20089, -1000, -1000, -1000, -1000, 26570, 478, 547, 26570,
	-1000, 2056, 1382, -79, -1000, -1000, -1000, 35624, 402, -1000,
	547, 251, 989, 35624, 35624, 35624, -1000, -1000, 1295, 36587,
	1294, 41445, 35624, -1000, 398, 397, 1389, 1386, 35624, 35624,
	36266, 35945, 35624, 943, 68, -1000, 396, 35624, 920, 35624,
	68, -1000, 395, 35624, 909, -1000, 1472, 1247, -1000, 822,
	1545, 35624, 249, -90, -3, 41445, -1000, -1000, -1000, -1000,
	-1000, 35624, 446, 35624, 68, 35624, 2109, 68, 35624, 1670,
	1760, 531, 35624, 1413, 16118, 997, -1000, 19112, 612, 35624,
	900, 99, -1000, -1000, -1000, 541, 35624, -1000, -1000, 125,
	125, -1000, 118, 1244, -4, -1000, 16118, -1000, -1000, 35624,
	23027, -92, -1000, -1000, 41445, -1000, 514, 670, -1000, 2045,
	581, 23027, 35624, 9057, 9057, -1000, 1410, -1000, -1000, 896,
	-1000, 944, -1000, -1000, -1000, -1000, 9057, -1000, -11, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1169, -1000, 16118, 2037,
	-1000, -1000, -1000, 8711, -1000, -1000, -1000, 35624, -136, 16118,
	229, 229, 16118, 16810, 16810, -1000, 229, -1000, -1000, -1000,
	-1000, -1000, 1539, 394, 16118, 41445, 41071, 39584, -93, -1000,
	10801, -5, -1000, 16118, -1000, 39229, -1000, -1000, 505, 1766,
	-1000, 16118, 40209, 248, 10455, -1000, 40074, -23, -23, -1000,
	2101, 1311, 1257, 987, 882, 2024, -1000, 21065, 589, 1103,
	39119, 41318, 41445, -1000, 16118, -1000, -1000, 1536, 16118, -1000,
	41318, 41445, 16810, 16810, 16810, 16810, 16810, 16810, 16810, 16810,
	16810, 16810, 16810, 16810, 16810, 16810, 16810, 16810, 16810, 16810,
	16810, 1404, 16810, 2012, 2012, 2012, -7, 10109, -1000, 1593,
	1536, 16118, 16118, 41445, 247, 246, 245, -1000, 16118, -48,
	16118, 16118, 16118, -1000, -1000, -1000, 244, -1000, 2020, -1000,
	-1000, -1000, -1000, 263, -1000, 1487, -1000, -78, -1000, 1881,
	-1000, 1487, -1000, -1000, 1376, -1000, 392, 16118, 20089, -1000,
	499, -1000, -99, -1000, 26570, -1000, 498, -195, -1000, 540,
	-1000, 547, 391, 35624, 26570, -1000, -1000, -1000, 701, 681,
	1667, -1000, 1293, -1000, 620, -1000, 1113, 16118, 17809, 390,
	389, 1056, -1000, 1644, 1244, 1636, 1244, -1000, -10, 939,
	-1000, 16118, -1000, 680, -1000, -1000, 16118, -1000, 679, 581,
	1534, 809, -1000, 820, -1000, 1456, -1000, 24632, 388, 35624,
	387, -1000, 386, -1000, -1000, 385, 35624, 1346, 531, 23669,
	-1000, 582, 900, -1000, 40801, -1000, 900, 8364, 1852, -102,
	-1000, -1000, -1000, 585, 20740, 20089, 9763, -105, -1000, -1000,
	-1000, -1000, 40801, -11, 1825, 1825, -1000, 2017, -1000, 496,
	242, -1000, 27212, -1000, -11, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35624, 1132, 39008, -1000, 1882, 5924, 1963, 229,
	38986, 2779, 16118, 41445, 40993, -107, 16118, 16118, -1000, -108,
	-1000, 16118, 485, 40801, -1000, -1000, -1000, 40801, 16118, 2099,
	16118, 239, 238, 237, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 235, -1000, -1000, 37871, 16118, 234, -1000, 232,
	231, 40801, 1593, 40801, -1000, -1000, 1033, 1033, 855, 855,
	855, 855, 2012, 1874, 2789, 2305, 601, 601, 601, 2297,
	952, 952, 601, 601, 601, 1519, 1347, 384, 40280, 16118,
	-110, -1000, -1000, -1000, 40801, 40801, 226, -1000, -1000, -1000,
	-48, 320, 38876, 38848, -1000, 208, 207, 1483, 1933, -1000,
	20089, 1483, -1000, 35624, 40801, -1000, -169, -1000, 2010, -1000,
	-1000, 1382, -1000, 5255, 26570, 35624, -115, -1000, 35624, 35624,
	35624, 1630, -1000, 2667, -1000, 38631, -116, -1000, 328, 1870,
	16118, -1000, -1000, 381, 17809, 35624, -1000, 1378, 1425, 649,
	35624, -1000, 35624, -1000, 35624, 35624, 35624, -117, 35624, -124,
	35624, -1000, 23027, 673, -1000, 1039, 1467, -1000, 17809, 380,
	35624, 24632, 1958, 17809, 1212, 1361, 531, 23669, -1000, 787,
	-1000, -1000, -17, -1000, 370, 68, 900, -1000, -18, -1000,
	538, 1808, -1000, 1804, 479, -1000, -1000, -22, 379, -1000,
	534, 533, -1000, -1000, -1000, -1000, 1882, 16118, 16118, 40993,
	-125, -1000, 229, 229, -1000, 38603, -1000, 40801, -1000, 40074,
	-1000, -1000, -1000, -1000, 1030, -1000, 38471, -1000, -1000, -1000,
	-1000, 16810, 1516, 376, 41445, 38254, -1000, -1000, 16118, -1000,
	-1000, -1000, -1000, 576, 16118, 16118, 1881, 576, -130, 547,
	-1000, -1000, -1000, 2006, -1000, -133, -1000, -1000, -1000, -1000,
	35624, -1000, 35624, -1000, 5924, 35624, 1540, 1270, -1000, -1000,
	1370, 375, 16810, 35624, -1000, 1035, 17809, 1882, 69, 5924,
	1882, 38226, 6259, -138, -139, 1261, -1000, 1252, 16118, -1000,
	41445, 1244, 1244, -1000, 676, 675, 669, -1000, 662, -1000,
	-36, 21723, -1000, -1000, 1932, 1007, -141, 17809, -144, 206,
	68, -146, 35624, -1000, 531, 23669, -1000, 1760, 1633, 35624,
	1832, -1000, -1000, 374, 369, 367, -1000, 26891, 26891, 23027,
	23027, -1000, 229, 229, -1000, -1000, 203, 1103, 1896, -1000,
	910, 16810, 41445, -147, -1000, 38198, -1000, 35624, 40801, -48,
	-1000, -1000, 26570, 329, -1000, -1000, 1341, -1000, -1000, 35624,
	1283, -1000, -1000, 16118, 40280, 366, 1456, 358, -1000, -1000,
	-1000, -1000, -1000, -1000, 1870, -12, -1000, 938, -1000, -1000,
	40801, 1866, -1000, -1000, 35624, 35624, 355, 337, -1000, 335,
	69, 1232, 35624, 1035, -149, -1000, 1456, -1000, 1035, 334,
	23669, -1000, 1346, 780, -154, 35624, -1000, -1000, 6606, 23027,
	23027, -1000, -155, -1000, -1000, -1000, 923, 16118, 910, -156,
	-1000, -1000, -45, -1000, 1956, -1000, -1000, -1000, -1000, 1629,
	4484, 1288, 35624, -1000, 35624, 1882, 201, 35624, 624, 5924,
	-1000, -1000, 16118, 16118, 16118, 333, 332, 331, 1456, 1035,
	-1000, 1456, 17809, -1000, 1361, 847, -1000, 585, -1000, -163,
	-166, -1000, 200, 16464, 16464, -48, -1000, 35624, 326, 1611,
	-1000, 1143, 1204, 199, -171, -1000, -1000, 324, -1000, 16118,
	-1000, -173, -174, -23, 35624, 35624, 35624, -1000, 1456, -1000,
	-181, -1000, 20740, -1000, 581, 581, -1000, -1000, -1000, 17476,
	1203, 889, 39609, -1000, -1000, -1000, 35624, -1000, 1176, 1170,
	863, -1000, -1000, -1000, -1000, -1000, 1288, 40801, -1000, -1000,
	198, -182, -183, -184, -1000, 1035, -157, -1000, -1000, 1977,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1779, -1000, 644,
	1368, 1368, 1143, 2099, 318, 317, 1192, 1456, -1000, 15772,
	-1000, 1986, -1000, -1000, 1373, -1000, -1000, 1020, 1010, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 197, 35624, 131,
	35624, -1000, 610, -1000, 606, 301, 1339, -49, -1000, 779,
	353, -56, -1000, 301, -1000, -1000, 1020, -54, -1000, 1010,
	-64, -1000, -1000, 1010, -1000,
}
var sqlPgo = [...]int{

	0, 2560, 2559, 1609, 2081, 2558, 2556, 2553, 2551, 2550,
	2548, 2547, 2546, 2545, 2544, 2542, 2541, 2540, 2539, 2538,
	2077, 2525, 2072, 2521, 2520, 2519, 2518, 2055, 2517, 2516,
	2514, 2513, 2507, 2505, 2036, 2501, 2028, 2499, 2494, 2491,
	2488, 2487, 2014, 2485, 82, 109, 2010, 2483, 2482, 2007,
	1980, 1966, 2479, 1948, 2478, 2477, 1902, 1894, 2475, 54,
	2473, 2472, 2471, 1834, 1829, 2470, 2467, 2465, 150, 2464,
	1799, 2462, 2458, 2456, 2450, 2449, 2444, 2442, 2438, 2437,
	2436, 2434, 2424, 2422, 2421, 2420, 2419, 2418, 2417, 155,
	2413, 2412, 1756, 1714, 2410, 2407, 31, 33, 18, 53,
	25, 142, 2624, 133, 2406, 2400, 2399, 2397, 2396, 2393,
	2392, 28, 98, 97, 2388, 264, 2387, 2386, 42, 38,
	27, 21, 2385, 93, 2384, 2382, 1614, 45, 2381, 2372,
	131, 2368, 62, 29, 36, 151, 148, 112, 119, 2367,
	2366, 2364, 57, 113, 2, 6, 4, 16, 1, 2363,
	2362, 17, 83, 19, 2361, 39, 14, 2359, 2358, 125,
	2357, 58, 89, 1530, 138, 141, 329, 2356, 69, 15,
	68, 2355, 2352, 154, 56, 2343, 12, 90, 137, 2340,
	47, 156, 123, 77, 129, 130, 2337, 2334, 2332, 102,
	2331, 114, 87, 2329, 2322, 72, 2311, 94, 134, 2303,
	2298, 2294, 88, 2291, 121, 2290, 2286, 153, 147, 110,
	8, 63, 71, 13, 1528, 1519, 132, 92, 50, 51,
	2285, 2379, 32, 812, 35, 106, 79, 59, 103, 65,
	85, 145, 37, 2284, 2283, 136, 2282, 2278, 2273, 2272,
	2266, 99, 2265, 2263, 41, 2259, 84, 43, 49, 91,
	34, 244, 120, 116, 149, 104, 2258, 76, 124, 2257,
	107, 2252, 2248, 1318, 117, 2247, 2244, 2243, 1311, 1289,
	1287, 271, 2242, 2238, 1249, 396, 2229, 2228, 86, 2219,
	111, 108, 115, 140, 139, 101, 2218, 122, 24, 2215,
	78, 26, 0, 1165, 652, 2209, 118, 74, 2207, 2202,
	2199, 2198, 30, 3, 10, 9, 11, 7, 75, 64,
	2197, 2196, 126, 95, 60, 2194, 152, 2190, 2186, 2185,
	48, 2183, 22, 2182, 20, 2181, 2166, 23, 5, 2157,
	2156, 143, 2155, 100, 2152, 1930, 2151, 146, 2145, 2144,
	1752, 46, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 113, 113,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 110, 110, 115, 115, 115,
	117, 117, 114, 114, 109, 109, 20, 20, 57, 57,
	99, 50, 50, 50, 290, 290, 291, 291, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 165,
	165, 164, 164, 167, 167, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 259, 259, 258, 43, 43, 233, 233, 46,
	46, 190, 190, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 331, 331, 331, 335, 335, 336, 336, 337,
	337, 337, 337, 337, 337, 337, 333, 333, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 284, 282,
	282, 283, 283, 140, 140, 140, 140, 140, 141, 141,
	141, 289, 289, 289, 289, 289, 289, 288, 288, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	332, 332, 334, 334, 51, 51, 30, 30, 31, 31,
	142, 142, 143, 143, 212, 212, 212, 212, 144, 144,
	116, 116, 116, 146, 146, 145, 145, 147, 147, 147,
	148, 148, 148, 108, 108, 211, 300, 300, 301, 301,
	301, 301, 301, 301, 302, 302, 302, 302, 302, 302,
	302, 298, 298, 299, 296, 296, 297, 297, 297, 297,
	338, 338, 210, 210, 151, 151, 305, 305, 305, 305,
	303, 303, 303, 303, 303, 306, 304, 307, 307, 307,
	307, 307, 245, 245, 245, 91, 91, 32, 32, 122,
	122, 33, 33, 29, 29, 29, 194, 194, 155, 155,
	250, 250, 250, 133, 133, 111, 111, 111, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 195,
	195, 196, 196, 52, 52, 56, 56, 61, 61, 90,
	90, 90, 90, 90, 90, 21, 21, 21, 21, 25,
	25, 25, 25, 60, 60, 340, 340, 129, 129, 129,
	129, 130, 130, 207, 207, 208, 208, 208, 209, 209,
	209, 124, 123, 125, 125, 28, 28, 28, 118, 118,
	119, 119, 120, 120, 121, 121, 341, 341, 49, 49,
	49, 93, 93, 136, 136, 204, 204, 204, 206, 206,
	205, 205, 205, 180, 180, 180, 92, 92, 160, 160,
	169, 169, 170, 170, 256, 171, 171, 59, 59, 102,
	102, 100, 100, 100, 100, 100, 100, 101, 101, 101,
	103, 103, 103, 103, 103, 103, 103, 106, 106, 106,
	107, 107, 107, 105, 105, 313, 313, 313, 316, 316,
	312, 314, 314, 315, 315, 339, 339, 181, 181, 181,
	150, 149, 149, 153, 153, 152, 154, 154, 249, 249,
	249, 178, 178, 178, 178, 199, 199, 197, 197, 198,
	198, 200, 200, 201, 201, 201, 202, 202, 203, 203,
	177, 177, 229, 229, 104, 104, 104, 159, 159, 159,
	161, 161, 219, 219, 219, 220, 220, 218, 218, 218,
	218, 251, 251, 251, 251, 251, 251, 251, 251, 329,
	329, 329, 330, 330, 248, 248, 252, 252, 252, 252,
	252, 252, 246, 246, 246, 246, 247, 247, 257, 257,
	184, 184, 184, 184, 182, 182, 183, 183, 253, 253,
	253, 253, 179, 179, 254, 254, 254, 213, 213, 260,
	260, 260, 278, 278, 158, 158, 158, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 262, 262, 262, 262, 264, 264,
	264, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 277,
	277, 277, 277, 277, 265, 265, 272, 272, 273, 273,
	274, 275, 266, 266, 267, 267, 268, 269, 276, 276,
	276, 276, 280, 280, 270, 270, 270, 270, 270, 271,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 192, 192, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 223, 223,
	223, 223, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 308, 308, 308, 308, 308, 308, 308,
	308, 310, 310, 311, 311, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 317, 317, 318, 318, 320,
	320, 321, 321, 322, 323, 323, 323, 324, 325, 325,
	319, 319, 326, 326, 326, 327, 327, 328, 328, 328,
	328, 328, 235, 235, 235, 236, 236, 237, 243, 243,
	243, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 131, 131, 131,
	131, 131, 166, 166, 232, 232, 230, 230, 230, 234,
	234, 185, 185, 279, 279, 279, 279, 279, 279, 279,
	186, 186, 186, 193, 187, 187, 188, 188, 188, 188,
	188, 188, 226, 227, 189, 189, 189, 228, 228, 238,
	242, 242, 241, 240, 240, 239, 239, 216, 216, 217,
	217, 215, 214, 174, 174, 173, 173, 172, 172, 342,
	342, 244, 244, 175, 175, 176, 168, 168, 255, 255,
	255, 255, 162, 162, 138, 138, 163, 163, 134, 134,
	137, 137, 135, 135, 135, 135, 156, 156, 157, 157,
	132, 132, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 281, 281, 281, 231, 126, 126, 126,
	127, 127, 128, 128, 286, 286, 286, 287, 287, 287,
	287, 285, 285, 285, 285, 285, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 9, 9, 1, 0, 6, 7, 5,
	8, 9, 7, 1, 3, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 2, 4, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 2, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 2, 3, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 360, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -315, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 216, 222, 242, 244, 246, 253,
	-100, -102, 240, -54, -55, -63, -64, -65, -66, -94,
	264, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 267,
	-21, -25, -60, 306, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -313, -103, -101, 357, 241,
	315, 35, 276, 61, 101, 248, 331, 338, -106, -104,
	-105, -107, 257, 323, 286, 361, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 2,
	286, 326, 83, 141, -331, 2, -163, 286, 83, -135,
	-126, 350, 4, -292, -294, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 142, 145,
	147, 140, 157, 158, 159, 161, 162, 163, 166, 165,
	170, 171, 174, 175, 178, 180, 181, 182, 185, 183,
	187, 188, 190, 189, 195, 197, 198, 200, 203, 206,
	209, 212, 213, 214, 215, 216, 218, 220, 222, 224,
	225, 226, 227, 228, 230, 231, 233, 234, 235, 236,
	237, 240, 238, 239, 241, 242, 243, 244, 246, 248,
	249, 251, 265, 266, 277, 253, 254, 255, 256, 260,
	258, 261, 262, 264, 267, 269, 272, 275, 276, 278,
	281, 282, 279, 274, 285, 287, 288, 289, 290, 291,
	292, 293, 294, 301, 302, 306, 307, 308, 309, 312,
	313, 314, 315, 317, 320, 321, 322, 327, 332, 333,
	334, 335, 336, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 85, 87, 88, 104,
	108, 109, 115, 116, 117, 127, 129, 136, 137, 146,
	148, 149, 150, 151, 152, 154, 168, 184, 194, 196,
	207, 211, 219, 221, 229, 250, 259, 270, 271, 280,
	283, 296, 297, 298, 303, 304, 319, 323, 324, 360,
	360, 2, 158, 226, -134, -126, 83, 360, 360, 360,
	360, 286, 2, 316, 326, -194, 83, 311, 360, 360,
	-126, 222, 22, 2, 92, 145, 314, 313, 22, 218,
	258, 288, 290, 2, 360, 360, 360, 360, 360, 2,
	326, 286, 141, 83, 316, -126, 2, -45, 2, 357,
	-44, -4, -27, -36, -46, -42, -20, -22, -34, -50,
	-49, -51, -53, -57, -56, -59, -63, -64, -70, -92,
	-93, 264, -335, 2, 22, -336, -337, 69, 98, 125,
	257, 145, 92, 313, 286, 2, 158, 2, -126, 2,
	-331, 2, 158, 2, -335, 2, -126, 2, -130, 2,
	253, -126, 360, 360, 360, 360, 360, 175, 55, 250,
	261, -68, 302, -67, 296, -284, -69, 2, -164, 185,
	-126, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 2, -89,
	261, 34, 55, 22, 60, 84, 126, 141, 142, 162,
	65, 66, 225, 175, 159, 301, 163, 262, 287, 302,
	69, 317, 291, 106, 4, 83, 185, 263, 296, 360,
	360, 360, -339, 2, 286, -101, -103, -102, -152, -153,
	310, 153, 103, 205, -100, -102, 2, -313, -89, 261,
	2, 55, 22, -282, 2, -244, 201, -221, 89, -223,
	348, 349, 343, 191, 337, -235, -225, -238, 104, 250,
	357, -134, -224, 363, 9, -310, -102, 29, -236, -237,
	49, -126, 7, 8, 5, 6, -132, -262, -231, -271,
	305, 110, 193, -308, -309, 4, -292, -286, -263, -273,
	-267, -270, 154, 58, 75, 76, 79, 77, 80, 263,
	316, 50, 28, 108, 109, 211, 219, 283, 303, 304,
	136, 194, 137, 56, 127, 168, 97, 37, 39, 41,
	42, 51, 52, 85, 87, 88, 115, 116, 117, 146,
	148, 149, 150, 151, 152, 196, 229, 270, 280, 297,
	298, 324, -293, -274, -275, -268, -269, 70, 124, 144,
	138, 156, 160, 169, 172, 186, 208, 210, 247, 268,
	-276, -340, 2, 302, 302, 2, -340, 2, -340, 2,
	-129, 2, 302, 299, -316, 230, -312, -126, -316, 360,
	360, 362, 360, -149, -150, 2, 22, 95, -176, 2,
	357, -251, 2, 355, -253, -134, -102, -252, 357, 202,
	-3, 2, -253, 136, -134, 2, -253, 136, -134, 2,
	-126, 2, -137, 136, -134, 299, 362, -163, -156, -126,
	-215, -214, 359, -221, 2, -221, 2, 123, 357, -173,
	-174, -214, -215, 2, -164, 136, -126, 2, -164, 2,
	141, -126, 136, 2, -126, 22, 123, 2, 155, 2,
	155, 2, -254, 2, -253, -165, 136, 2, -164, -165,
	136, 2, -138, 136, 2, -137, -126, 136, 2, -156,
	136, 2, -190, 357, -259, 2, -258, -287, 4, -292,
	-294, -293, 323, 58, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 261, 201, 362, -164,
	-221, -233, 357, 123, -221, 201, -126, 2, 265, 2,
	357, -68, 53, 302, -208, 2, -209, -123, -124, -125,
	157, 224, 228, 336, 299, 342, 123, -282, -167, 359,
	-89, 2, -290, 2, -288, 9, -287, 5, 265, 2,
	225, 262, 55, 123, 2, 2, -332, 2, 201, 123,
	2, 123, 2, 123, 2, 123, 2, 123, 2, 2,
	225, 262, 2, 120, 2, 301, 2, 2, 123, 2,
	157, 224, 277, 2, 286, 326, 2, 123, 123, 336,
	2, -179, -253, -152, -153, -178, -197, -198, 173, 112,
	199, -181, 22, 95, -181, -181, 44, 358, 358, -89,
	265, 2, 10, 11, 57, 33, 348, 349, 350, 351,
	118, 352, 353, 346, 347, 345, 340, 341, 342, 63,
	179, 252, 13, 14, 15, 26, 204, 172, 337, 138,
	268, 343, 16, 17, 18, 156, 36, 139, -131, -139,
	-221, -221, -221, -221, -221, 210, -172, -216, 355, -102,
	357, 357, -102, -221, -166, 357, 7, -102, -230, 355,
	-239, -221, -173, 357, 5, 357, 5, -317, 332, 120,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 221,
	-280, 327, -280, -280, -264, 357, -264, -265, 357, -264,
	333, 338, 357, -207, -208, -207, 299, -130, 362, -316,
	-157, 357, -176, -168, -255, -221, 350, -168, -175, -244,
	70, -184, 160, 186, 124, 169, 247, 144, 7, -45,
	-218, 363, 357, 350, -248, 338, -102, -252, 357, -251,
	-134, 357, -113, 238, -112, 21, 23, 98, 321, 104,
	274, 292, 254, 238, 104, 238, 274, 292, 254, 238,
	104, 363, -290, -135, 362, -285, 350, 4, -292, -294,
	-293, -295, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 74,
	75, 77, 76, 78, 79, 80, 89, 91, 93, 95,
	96, 99, 101, 103, 110, 111, 112, 120, 122, 123,
	125, 128, 130, 139, 141, 143, 153, 155, 164, 167,
	173, 176, 177, 191, 192, 193, 199, 201, 202, 204,
	205, 217, 223, 232, 245, 257, 263, 273, 284, 286,
	295, 299, 300, 305, 310, 311, 316, 318, 325, 326,
	328, 329, 330, 331, 278, 358, -162, -134, -174, 357,
	-151, 191, -122, -314, 331, -151, 357, -127, 136, 2,
	-126, -314, 191, -254, -136, -134, -136, 264, -126, 30,
	-115, 362, 48, 243, 104, -115, 104, -115, 362, 104,
	-115, 104, 104, -166, -221, 358, 362, -331, -337, 69,
	357, 30, -232, -260, -261, -263, -272, -266, -270, -271,
	40, 46, 45, 293, 184, 259, 271, 319, 38, 200,
	147, 146, 148, 149, 150, 151, 152, 270, 37, 229,
	116, 117, 115, 97, 88, 87, 196, 42, 41, -274,
	-275, -268, -269, 85, 297, 298, 154, 39, 52, 51,
	324, 280, -291, -290, -331, -284, -166, 30, -208, 2,
	362, -209, 171, -141, 178, 190, 132, 202, 334, -289,
	5, 4, -231, -245, 89, 175, -271, 8, 349, -281,
	7, 348, -283, -282, -283, 73, 359, -285, -164, 22,
	266, 2, -284, -334, 120, -331, -284, -284, -284, -284,
	-284, 261, -45, 120, -126, 171, -284, 2, -284, 2,
	286, 141, 286, -115, 362, -178, -198, -197, -200, -221,
	22, -203, 114, 187, -221, -223, -101, -101, -101, -154,
	-249, -221, 223, 141, -284, -278, -260, -277, 234, 235,
	233, 237, 236, -260, -285, 296, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, 172, 138,
	268, 36, 139, -221, 299, -221, -221, -221, -221, 183,
	191, 193, 305, 110, 312, 95, 197, -342, 284, 32,
	-228, -102, 357, -243, 27, 273, 22, -235, 250, 357,
	-216, -221, -217, -166, 358, 358, 362, -166, -234, 356,
	-230, -242, -241, 328, 358, -166, 325, 22, 95, 350,
	2, 7, -191, 335, 182, 86, 133, 181, -192, 256,
	-318, 113, 128, 357, 358, 2, 358, 2, 358, 2,
	358, 2, -221, -221, -185, 2, -279, -166, 4, 335,
	182, 86, 133, 181, 256, -185, 2, -186, 2, -221,
	-166, -187, -222, -223, 348, 349, 343, 357, 250, -188,
	2, -221, -166, -221, 43, 167, 300, -189, -221, 123,
	-166, -221, -221, -221, -166, -166, 2, -166, 2, 357,
	7, 7, 296, 296, 7, -130, -312, 30, -156, -159,
	362, 123, 30, 4, -159, 362, 358, 160, 160, -251,
	-184, 160, -182, 208, -182, -182, -329, 357, 356, -248,
	-285, 355, 364, -166, 2, -247, -246, 30, -126, 206,
	358, -134, 362, 299, -195, 65, 59, -211, 136, 59,
	-296, -126, 65, -297, 54, 311, 223, 122, -195, 65,
	-195, 65, 65, -253, 33, -59, 123, 299, -253, 299,
	33, -59, 123, 299, -137, -285, -257, 339, -126, 123,
	358, 362, -142, -156, -143, -126, -212, -211, -298, -299,
	-296, 141, 311, 111, 30, 104, 215, 30, 201, 191,
	-118, 289, 104, -213, 329, -204, -59, 357, 89, 30,
	-204, -169, -170, -256, -171, -134, 357, -126, -164, -165,
	-165, -137, -138, -126, -156, 358, 362, -45, -258, 299,
	318, -143, -44, 358, 362, -158, 29, 355, -191, 357,
	-257, 362, 123, 342, 299, 358, 302, -209, -140, 228,
	272, 239, 260, 8, 7, 7, 362, -285, -333, -126,
	261, -45, -134, -137, -134, -253, -201, -281, 357, 349,
	-202, 250, 251, 362, -111, 31, 93, 161, -134, 336,
	-221, -221, 299, -342, 284, -228, -221, 183, 193, 305,
	110, 312, 95, 197, 123, 357, -222, -222, -166, -225,
	357, -166, 356, 366, 358, -221, 356, 356, 362, -240,
	-241, 99, -221, -153, 362, -152, -221, -166, -166, 358,
	358, 299, 299, 299, 299, 357, -323, 209, 357, 357,
	-221, 30, 362, 358, 123, 358, 358, -193, 217, 358,
	10, 11, 348, 349, 350, 351, 118, 352, 353, 346,
	347, 345, 340, 341, 342, 63, 179, 252, 13, 14,
	15, 156, 139, -222, -222, -222, -166, 357, 358, -226,
	-227, 123, 120, 30, -189, -189, -189, 358, 123, -166,
	362, 362, 362, 358, 358, 358, 7, 358, 362, 358,
	336, 336, 358, 357, 358, -213, -255, -161, 2, -251,
	-285, -213, -244, -251, -251, -183, 318, 201, 160, -251,
	-246, 358, -330, 7, -248, -247, 7, -220, -219, 121,
	189, 358, -126, 357, -248, 358, -112, -134, -126, -126,
	191, -211, 136, -117, 191, -260, -126, 357, 357, 161,
	161, -126, -126, 136, -126, 136, -126, -126, -113, 238,
	-59, 357, -134, 238, -126, -59, 357, -126, 238, -95,
	135, 197, 278, 123, -134, 358, 358, 362, -127, 141,
	-127, -59, -164, 5, -59, -134, 104, -119, 100, -341,
	342, -126, -199, -197, -221, -180, -206, 245, 201, -162,
	323, -126, -180, -160, 362, 123, 342, -162, -115, -115,
	-115, -115, -221, -333, -290, 358, -260, 355, 356, 7,
	7, -98, 331, -290, -333, -282, -282, -123, 309, 62,
	228, -282, 362, -202, -221, -249, -134, 363, -221, -221,
	-222, -222, 123, 357, -221, -232, 26, 26, 358, -166,
	358, 362, -217, -221, 358, -230, 101, -221, 295, 358,
	325, -153, -153, -153, 5, 182, 133, 181, -192, 181,
	-192, -192, 7, -324, -126, 357, 329, -152, 358, -278,
	-260, -221, -226, -221, -278, -260, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, 95, 191, 197, -222, 362,
	-166, 358, -227, -226, -221, -221, -260, 358, 358, 358,
	-166, -221, -221, -221, 358, 7, -44, -177, 128, -257,
	362, -177, -183, 357, -221, -251, 356, 358, 362, -247,
	356, 362, 365, 342, -248, 357, -156, -246, 299, 299,
	104, 191, 320, -300, -297, -221, -155, -250, -126, -311,
	357, -308, -309, -132, 357, 357, -110, 98, 264, -196,
	104, -115, 104, -115, 299, -195, 65, -166, 299, -166,
	299, -98, 123, 285, 278, -144, 140, -212, 357, -127,
	357, 357, -151, 357, -126, -120, 166, -341, -288, -314,
	-180, -180, -168, 192, 64, 358, -213, -170, -161, -244,
	358, -99, 71, -99, 7, 356, 358, -97, 203, -96,
	-126, 5, -126, 202, 358, -111, -285, 26, 26, -221,
	-232, 358, -221, -221, 358, -221, 356, -221, 5, -221,
	358, 358, 358, 358, -325, -126, -221, 358, 358, 358,
	-227, 123, 95, 197, 357, -221, 358, 358, 362, 358,
	358, 358, 358, -229, 130, 44, -251, -229, -156, -218,
	7, -219, -285, 355, -247, -156, 358, -126, -126, -211,
	104, -301, 65, -302, 57, 111, 69, 191, 193, 311,
	223, 54, 89, 232, 358, 358, 362, -133, -173, 57,
	-133, -221, 357, -155, -156, 191, 89, 191, 89, 82,
	307, -126, -126, -134, -126, -126, 358, -134, 358, -126,
	-291, 296, -145, -146, 214, 139, -155, 357, -156, -142,
	30, -155, 201, -121, 165, -341, -288, -118, -205, 357,
	201, -59, -180, 342, 82, 82, 356, 362, 357, 342,
	342, -111, -221, -221, 358, 358, -153, -319, 214, 358,
	-222, 123, 357, -232, 358, -221, -320, 330, -221, -166,
	-320, 358, -248, 7, 358, -211, -126, -285, -126, 111,
	136, 193, 161, 357, -222, -134, -210, -338, 68, 282,
	-250, -111, -285, -111, 358, -166, 358, 358, 193, 193,
	-221, -260, -115, -115, 299, 299, 299, 299, -224, -132,
	-126, 44, 212, 358, -155, 358, 358, -59, 358, -134,
	-341, -288, -119, 96, -156, 65, -176, -102, 357, 357,
	357, -96, -97, -290, -290, 358, -153, 44, -222, -232,
	358, 358, -321, -322, -126, -247, 356, -302, -127, 191,
	-221, -128, 357, -144, 357, -133, -153, 232, -114, 57,
	-126, -126, 357, 357, 357, 174, 227, -134, -210, 358,
	-144, -210, 357, -288, -120, 313, 192, 358, -126, -291,
	-291, 358, -326, 227, 251, -166, 358, 362, 30, 104,
	358, -305, 180, -126, -156, -111, 358, -134, -109, 318,
	-285, -166, -166, -166, 357, 357, 357, -144, -210, -144,
	-155, -121, 264, -213, 358, 358, 358, -327, -328, 36,
	308, 73, -221, -327, -322, -324, 111, -303, -306, -304,
	201, 124, 213, 269, 358, 358, -151, -221, 358, 358,
	-153, -156, -156, -156, -144, 358, -169, -98, -98, -328,
	220, 119, 250, 220, 119, -126, -304, 201, -306, 201,
	313, 92, -305, 358, 358, 358, 358, -210, -213, 26,
	-307, 188, 243, 48, 264, -307, -303, 357, 357, -116,
	48, 243, -144, -328, 20, 193, 89, -147, 214, -148,
	214, 358, -126, 358, -126, 323, 323, -108, -176, 170,
	362, -146, -145, 294, -147, -176, 362, -176, -147, 362,
	-146, -145, -148, 362, -148,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	647, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	569, 571, 573, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 683, -2, 694, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 660, 662,
	664, 666, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1249, 1176,
	1182, 1183, 1207, 1208, 1209, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 143,
	145, 146, 0, 0, 0, 1178, 1249, 152, 154, 156,
	158, 0, 164, 0, 0, 0, 0, 536, 161, 163,
	253, 1310, 255, 257, 0, 0, 0, 0, 167, 168,
	169, 170, 171, 172, 174, 176, 178, 180, 182, 183,
	0, 0, 0, 0, 0, 252, 250, 205, 206, 0,
	235, 236, 237, 238, 239, 241, 209, 211, 212, 214,
	216, 218, 220, 221, 223, 225, 226, 228, 230, 231,
	233, 0, 0, 259, 265, 266, 267, 269, 270, 271,
	272, 273, 274, 275, 0, 123, 0, 445, 248, 246,
	0, 119, 0, 566, 0, 261, 567, 568, 563, 564,
	1337, 592, 279, 281, 290, 292, 294, -2, -2, 1427,
	-2, 303, -2, 311, 1433, 0, 314, 315, 318, -2,
	201, 340, 342, 344, 346, 348, 350, 352, 354, 356,
	358, 360, 362, 364, 366, 369, 371, 373, 374, 375,
	0, 0, 0, 379, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 378, 380, 381, 382, 0, 570,
	572, 574, 0, 526, 685, -2, 658, 659, -2, 0,
	689, 689, 689, 0, 0, 659, 657, 0, 282, 0,
	284, 0, 379, 287, 288, 319, 320, 1161, 1162, 886,
	0, 0, 0, 0, 0, 0, 978, 980, 1401, 1427,
	0, 982, 983, 0, 985, 987, 988, 0, 991, 992,
	1146, 1178, 1192, 1193, 1194, 1195, 0, 0, 1198, 0,
	1200, 1201, 1202, 1046, 1002, -2, -2, 1190, 814, 815,
	816, 817, -2, 1441, 1006, 1009, 1012, 1015, 1016, 1019,
	1020, 0, 1385, 1402, 1403, 1423, 1424, 1432, 1436, 1437,
	1409, 1420, 1410, 1397, 1407, 1418, 1255, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1216, 848, 849, 854, 855, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	857, 594, 576, 585, 594, 578, 579, 580, 581, 582,
	583, 584, 587, 0, 675, 1316, 678, 1189, 676, 661,
	663, 0, 665, 0, 0, 669, 691, 690, 724, 725,
	0, 673, 674, 684, 740, 778, 755, 746, 0, 0,
	2, 68, 0, 1409, 778, 70, 0, 1409, 778, 72,
	0, 77, 0, 1409, 1181, 0, 0, 263, 264, 1186,
	1184, 1185, 0, 147, 148, 149, 150, 0, 0, 1179,
	1155, 1153, 1154, 159, 505, 1409, -2, 528, 505, 532,
	-2, 682, 1409, 607, 254, 256, 0, 166, 0, 620,
	0, 622, 0, 637, 784, 109, 1409, 186, 199, 109,
	1409, 189, 109, 1409, 192, 1174, 109, 1409, 195, 196,
	1409, 198, 249, 0, 0, -2, 242, 244, 1217, 1218,
	1219, 1220, -2, 1441, 240, 210, 213, 215, 217, 219,
	222, 224, 227, 229, 232, 234, -2, 0, 0, 0,
	444, 0, 0, 0, 565, 0, 591, 297, 0, 300,
	0, 302, 1396, -2, 305, 306, 595, 598, 599, 600,
	0, 0, 0, 0, 0, 0, 0, 316, 202, 0,
	376, 377, 385, 386, 124, 125, 337, 338, 0, 389,
	410, 422, 0, 0, 393, 395, 443, 397, 0, 0,
	399, 0, 401, 0, 403, 0, 405, 0, 407, 409,
	411, 423, 413, 684, 415, 0, 417, 421, 0, 426,
	0, 428, 429, 430, 0, 0, 436, 0, 0, 383,
	384, 109, 782, -2, 0, 653, 703, 704, 0, 0,
	0, 0, 687, 688, 0, 0, 0, 649, 650, 283,
	0, 286, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	1085, 1086, 1089, 1090, 1087, 1088, 1091, 1092, 1093, 0,
	0, 0, 1094, 1095, 1096, 0, 0, 1098, 0, 1100,
	0, 0, 0, 0, 0, 0, 1160, 0, 0, 1097,
	891, 892, 893, 915, 916, 0, 979, 1157, 1150, 981,
	0, 0, -2, 1102, 0, 0, 984, 989, 990, 0,
	0, 1145, -2, 0, 1197, 0, 883, 1048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1125,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	851, 862, 859, 858, 835, 0, 834, 832, 0, 836,
	0, 0, 0, 575, 593, 577, 0, 589, 0, 677,
	0, 0, 726, 729, 1166, 1170, 1171, 729, 0, 1163,
	0, 0, 0, 0, 775, 775, 775, 773, 749, 0,
	755, 0, 0, 779, 767, 0, -2, 746, 0, 0,
	780, 0, 78, 560, 88, 0, 560, 560, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 769, 1177, 0, 1151, 1152, 1221, 1222, 1223,
	1224, 1225, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 139, 0, 0, 1172, 1156, 451,
	0, 0, 527, 0, 681, 0, 0, 0, 1409, 535,
	1210, 609, 0, 788, 0, 623, 0, 0, 785, 0,
	184, 0, 107, 108, 0, 187, 0, 190, 0, 0,
	193, 0, 0, 0, 1102, 684, 0, 0, 268, 0,
	0, 684, 0, 1104, 796, 797, 798, 799, 800, 883,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 845, 0, 820, 820, 820, 837, 838, 846,
	847, 852, 853, 864, 865, 867, 869, 863, 863, 863,
	860, 861, 769, 126, 0, 0, 0, 0, 307, 308,
	0, 597, 0, 601, 328, 329, 330, 603, 604, 312,
	331, 332, 333, 334, 335, 336, 0, 522, 0, 524,
	1203, 0, 309, 321, 310, 313, 0, 203, 387, 388,
	390, 391, 392, 396, 0, 440, 398, 400, 402, 404,
	406, 414, 418, 684, 424, 427, 431, 432, 433, 434,
	0, 0, 0, 525, 0, 656, 701, 702, 707, 711,
	712, 715, 718, 719, 709, 886, 670, 671, 672, 695,
	696, 547, 0, 0, 285, 887, 792, 793, 839, 840,
	841, 842, 843, 888, 889, 0, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, -2, -2, -2, 907,
	908, 909, -2, -2, -2, 913, 914, -2, 1099, 1101,
	0, 1160, 0, -2, 0, -2, -2, -2, -2, 927,
	0, 929, 932, 934, 936, 0, 0, 0, 0, 1159,
	946, 1137, 0, 0, 1078, 1079, 1080, 931, 0, 0,
	1158, 1149, 0, 0, -2, 986, 0, 0, 0, 1108,
	1109, 1144, 1140, 0, 993, 694, 0, 0, 0, 0,
	1000, 0, 1206, 870, 871, 872, 873, 874, 875, 884,
	1056, 0, 0, 0, 1007, 1008, 1010, 1011, 1013, 1014,
	1017, 1018, 0, 0, 0, 1024, 0, 1112, -2, -2,
	-2, -2, -2, -2, -2, 0, 1026, 0, 1028, 1102,
	1122, 0, 0, 949, 0, 0, 0, 0, 1427, 0,
	1031, 1102, 1130, 0, 0, 0, 0, 0, 1102, 0,
	1136, 0, 0, 0, 0, 0, 1042, 0, 1044, 0,
	0, 0, 0, 0, 0, 588, 679, 0, 0, 788,
	0, 0, 0, 1169, 788, 0, 1165, 0, 0, 0,
	0, 0, 770, 774, 771, 772, 0, 0, 755, 767,
	737, 0, 0, 0, 744, 745, 766, 0, 765, 754,
	-2, 0, 0, 0, 0, 0, 559, 90, 1409, 0,
	111, 0, 0, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 1180, 129, 0, 1187, 0,
	0, 0, 0, 0, 450, 1186, 452, 454, 455, 456,
	457, 1211, 0, 1211, 0, 0, 0, 0, 0, 0,
	611, 617, 0, 706, 0, 635, 625, 0, 0, 0,
	635, 639, 640, 642, 643, 0, 0, 786, 200, 109,
	109, 1175, 109, 109, 197, 251, 0, 207, 243, 0,
	0, 0, 245, 247, 0, 789, 791, 0, 801, 0,
	138, 0, 0, 0, 0, 301, 0, 596, 602, 0,
	325, 0, 327, 523, 1205, 1204, 0, 204, 442, 276,
	416, 419, 437, 438, 439, 783, 0, 713, 0, 0,
	710, 716, 717, 0, 698, 545, 546, 0, 0, 0,
	-2, -2, 0, 0, 0, 947, -2, 928, 930, 933,
	935, 937, 0, 0, 0, 0, 0, 0, 0, 948,
	0, 0, 1147, 1150, -2, 1103, 1106, 1107, 0, 0,
	1141, 0, 0, 0, 0, 693, 694, 694, 694, 999,
	0, 0, 0, 0, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 1023, 0, 1025, 1027, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 953, 954, 0, 0, 1030, 1128,
	1129, 0, 0, 0, 0, 0, 0, 1036, 0, 1135,
	0, 0, 0, 1040, 1041, 1043, 0, 818, 0, 844,
	866, 868, 856, 684, 1188, 721, 1167, 769, 728, 730,
	1168, 721, 1164, 757, 0, 759, 0, 0, 0, 761,
	0, 750, 0, 752, 767, 742, 0, 0, 735, 0,
	734, 755, 763, 0, 0, 781, 89, 549, 0, 0,
	0, 92, 1409, 100, 0, 477, 0, 0, 0, 0,
	0, 562, 101, 1409, 109, 1409, 109, 102, 79, 560,
	80, 0, 555, 0, 548, 81, 0, 557, 0, 138,
	0, 0, 140, 0, 1173, 459, 504, 0, 0, 1211,
	0, 448, 505, 529, 531, 0, 0, 613, 617, 0,
	616, 682, 635, 705, 787, 618, 635, 0, 0, 0,
	627, 624, 621, 788, 0, 0, 0, 0, 185, 188,
	191, 194, 1103, 258, 0, 0, 1105, 0, 794, 0,
	0, 118, 0, 127, 260, 298, 299, 304, 323, 324,
	326, 322, 0, 0, 0, 697, 547, 0, 890, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1138, 0,
	1073, 0, 0, 1149, -2, 1110, 1139, 1143, 0, 994,
	0, 0, 0, 0, 1199, 876, 877, 878, 879, 880,
	881, 882, 0, 1054, 1055, 1059, 0, 0, 1005, 0,
	0, 1111, 1121, 1123, 950, 951, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, -2, -2, -2, 968,
	969, 970, -2, -2, -2, 0, 0, 0, 1124, 0,
	0, 1076, 1126, 1127, 1132, 1133, 0, 1033, 1034, 1035,
	1134, 0, 0, 0, 850, 0, 0, 723, 0, 727,
	0, 723, 758, 0, 777, 760, 740, 751, 0, 748,
	738, 0, 739, 0, 767, 0, 0, 747, 0, 0,
	0, 0, 110, 475, 494, 0, 0, 538, 544, 544,
	0, 1003, 1004, 0, 0, 0, 94, 0, 0, 0,
	0, 98, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 141, 466, 0, 453, 0, 0,
	0, 451, 0, 0, 0, 615, 617, 0, 608, 609,
	165, 619, 633, 634, 632, 0, 635, 641, 638, 644,
	0, 0, 120, 0, 0, 795, 802, 136, 1300, 134,
	131, 133, 277, 708, 714, 699, 547, 0, 0, -2,
	0, 940, -2, -2, 1072, 1103, 1148, 1142, 1196, 694,
	995, 997, 998, 885, 1061, 1058, 0, 1045, 1021, 1022,
	1120, 0, 0, 0, 0, 1103, 1075, 1032, 0, 1038,
	1039, 819, 680, 1050, 0, 0, 731, 1050, 0, 755,
	753, 736, 732, 0, 743, 0, 764, 551, 553, 91,
	0, 476, 0, 479, 0, 0, 0, 0, 485, 486,
	0, 0, 0, 0, 496, 503, 0, 547, 1191, 0,
	547, 0, 0, 0, 0, 0, 106, 0, 0, 561,
	0, 109, 109, 550, 0, 0, 0, 556, 0, 558,
	128, 0, 446, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 617, 0, 610, 611, 0, 0,
	0, 626, 636, 0, 0, 0, 790, 0, 0, 0,
	0, 700, -2, -2, 941, 1074, 0, 694, 0, 1047,
	-2, 0, 0, 0, 1077, 0, 667, 0, 722, 720,
	668, 776, 767, 0, 762, 93, 0, 480, 481, 1211,
	0, 484, 487, 0, 489, 1213, 459, 0, 500, 501,
	539, 540, 543, 541, 544, 694, 498, 0, 95, 96,
	105, 113, 97, 103, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 503, 0, 493, 459, 449, 503, 0,
	0, 612, 613, 0, 0, 0, 645, 646, 0, 0,
	0, 135, 0, 130, 132, 996, 1064, 0, -2, 0,
	976, 1037, 1049, 1051, 0, 741, 733, 478, 482, 0,
	0, 509, 0, 497, 0, 547, 0, 0, 115, 0,
	552, 554, 0, 0, 0, 0, 0, 0, 459, 503,
	447, 459, 0, 614, 615, 0, 629, 788, 631, 0,
	0, 137, 0, 0, 0, 1060, 977, 0, 0, 0,
	488, 514, 0, 0, 0, 542, 994, 505, 99, 0,
	112, 0, 0, 694, 0, 0, 0, 491, 459, 533,
	0, 606, 0, 630, 138, 138, 1057, 1062, 1065, -2,
	1369, 1246, 0, 1063, 1052, 1053, 0, 490, 510, 511,
	0, 506, 507, 508, 1212, 502, 509, 114, 85, 87,
	0, 0, 0, 0, 492, 503, 788, 121, 122, 0,
	1067, 1068, 1069, 1070, 1071, 483, 512, 0, 513, 0,
	0, 0, 514, 0, 0, 0, 462, 459, 628, 0,
	515, 0, 518, 519, 0, 516, 499, 0, 0, 458,
	460, 461, 534, 1066, 517, 520, 521, 0, 0, 0,
	0, 463, 0, 464, 0, 0, 0, 466, 473, 0,
	0, 465, 469, 0, 467, 474, 0, 466, 468, 0,
	465, 472, 470, 0, 471,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 346, 3, 352, 347, 3,
	357, 358, 350, 348, 362, 349, 359, 351, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 366, 361,
	340, 342, 341, 3, 363, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 355, 3, 356, 353, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 364, 345, 365, 343,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 344, 57683, 354, 57684, 360,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:887
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1045
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1051
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1140
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1212
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1213
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1216
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1217
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1377
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1556
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1571
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2400
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2404
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil, PartitionBy: sqlDollar[8].union.partitionBy()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2545
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &PartitionBy{
				Typ:        PartitionByList,
				Fields:     sqlDollar[5].union.nameList(),
				Partitions: sqlDollar[8].union.partitions(),
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &PartitionBy{
				Typ:        PartitionByRange,
				Fields:     sqlDollar[5].union.nameList(),
				Partitions: sqlDollar[8].union.partitions(),
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = append([]Partition{{
				Name:   sqlDollar[2].str,
				Tuples: sqlDollar[4].union.tuples(),
				Typ:    PartitionByList,
			}}, sqlDollar[6].union.partitions()...)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = append([]Partition{{
				Name:         sqlDollar[2].str,
				Tuples:       sqlDollar[4].union.tuples(),
				Typ:          PartitionByList,
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.partitions()...)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = []Partition{{
				Name:         sqlDollar[2].str,
				Tuples:       sqlDollar[4].union.tuples(),
				Typ:          PartitionByList,
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = append([]Partition{{
				Name:   sqlDollar[2].str,
				Tuples: []*Tuple{{Exprs: sqlDollar[6].union.exprs()}},
				Typ:    PartitionByRange,
			}}, sqlDollar[8].union.partitions()...)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = append([]Partition{{
				Name:         sqlDollar[2].str,
				Tuples:       []*Tuple{{Exprs: sqlDollar[6].union.exprs()}},
				Typ:          PartitionByRange,
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}, sqlDollar[9].union.partitions()...)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = []Partition{{
				Name:         sqlDollar[2].str,
				Tuples:       []*Tuple{{Exprs: sqlDollar[6].union.exprs()}},
				Typ:          PartitionByRange,
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[1].union.exprs()}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[3].union.exprs()})
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			return unimplemented(sqllex, "match full")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			return unimplemented(sqllex, "match partial")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			return unimplemented(sqllex, "match simple")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2854
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2864
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			return unimplemented(sqllex, "no action")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2878
		{
			return unimplemented(sqllex, "action set null")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			return unimplemented(sqllex, "action set default")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2980
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = true
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = false
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3011
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = Ascending
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = Descending
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3055
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3057
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = true
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = false
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3091
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3148
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3190
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.str = ""
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.str = ""
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = ReadOnly
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = ReadWrite
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.str = ""
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.str = ""
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3360
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			return helpWith(sqllex, "INSERT")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3443
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 636:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			return helpWith(sqllex, "SELECT")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			return helpWith(sqllex, "VALUES")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			return helpWith(sqllex, "TABLE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			return helpWith(sqllex, "SELECT")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			return helpWith(sqllex, "TABLE")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3759
		{
			return unimplemented(sqllex, "cte")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = true
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = false
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = false
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = true
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3795
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3923
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			return helpWith(sqllex, "VALUES")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &From{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4020
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4065
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4102
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = nil
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = true
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.str = astFullJoin
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.str = astLeftJoin
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.str = astRightJoin
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.str = astInnerJoin
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4286
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4372
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4386
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4429
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4492
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4501
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = nil
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4662
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4694
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4734
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = year
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = month
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = day
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = hour
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = minute
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = month
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = hour
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = minute
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = minute
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = nil
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = second
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4829
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4864
		{
			return unimplemented(sqllex, "at tz")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5098
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5271
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5324
		{
			return unimplemented(sqllex, "variadic")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5325
		{
			return unimplemented(sqllex, "variadic")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5370
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5388
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5398
		{
			return unimplemented(sqllex, "current role")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5407
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5433
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5447
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5448
		{
			return unimplemented(sqllex, "treat")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5494
		{
			return unimplemented(sqllex, "within group")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5495
		{
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.str = ""
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5592
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5593
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5594
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5597
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5598
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5604
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5605
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5606
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5607
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5608
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = Any
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = Some
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = All
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = Plus
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = Minus
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = Mult
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = Div
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = Mod
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = Bitand
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = Bitor
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = Pow
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = Bitxor
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = LT
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = GT
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = EQ
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = LE
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = GE
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = NE
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = Like
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = NotLike
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = ILike
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = NotILike
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5973
		{
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6091
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6135
		{
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6171
		{
			return unimplemented(sqllex, "func const")
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6180
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = DNull
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6207
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.str = ""
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
